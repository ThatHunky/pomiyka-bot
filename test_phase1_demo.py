#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω—å –§–∞–∑–∏ 1
"""
import sys
import os
import asyncio
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(__file__))

def print_header(title: str):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print(f"\n{'='*50}")
    print(f"üéØ {title}")
    print('='*50)

def print_result(test_name: str, success: bool, details: str = ""):
    """–í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É"""
    status = "‚úÖ" if success else "‚ùå"
    print(f"{status} {test_name}")
    if details:
        print(f"   {details}")

def test_context_adapter():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    print_header("–¢–ï–°–¢ –ê–î–ê–ü–¢–ï–†–ê –ö–û–ù–¢–ï–ö–°–¢–£")
    
    try:
        from bot.modules.context_adapter import ContextAdapter, get_context_adapter
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        adapter = ContextAdapter(use_async=False)
        print_result("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–µ—Ä–∞", True, f"–†–µ–∂–∏–º: {'async' if adapter.use_async else 'sync'}")
        
        # –¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        adapter.init_db()
        print_result("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î", True)
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = adapter.get_stats()
        print_result("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", True, f"–¢–∏–ø: {stats.get('adapter_type', 'unknown')}")
        
        # –¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞
        global_adapter = get_context_adapter()
        print_result("–ì–ª–æ–±–∞–ª—å–Ω–∏–π –∞–¥–∞–ø—Ç–µ—Ä", True, f"–û–¥–Ω–∞–∫–æ–≤–∏–π: {adapter is global_adapter}")
        
        return True
        
    except Exception as e:
        print_result("–ê–¥–∞–ø—Ç–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç—É", False, str(e))
        return False

def test_gemini_cache():
    """–¢–µ—Å—Ç –∫–µ—à—É Gemini"""
    print_header("–¢–ï–°–¢ –ö–ï–®–£ GEMINI")
    
    try:
            from bot.modules.gemini_cache import GeminiCacheManager
            
            cache = GeminiCacheManager()
            print_result("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–µ—à—É", True)
            
            # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç—É —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–±–≥–æ—Ä—Ç–∫—É
            import asyncio
            
            async def test_cache_operations():
                await cache.initialize()
                
                prompt = "–ü—Ä–∏–≤—ñ—Ç!"
                context = "–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
                tone = "friendly"
                response = "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?"
                
                await cache.cache_response(prompt, response, context, tone)
                cached_response = await cache.get_cached_response(prompt, context, tone)
                return cached_response == response
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
            success = asyncio.run(test_cache_operations())
            print_result("–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–æ—Ç—Ä–∏–º–∞–Ω–Ω—è", success)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            async def get_stats():
                await cache.initialize()
                return await cache.get_cache_stats()
            
            stats = asyncio.run(get_stats())
            print_result("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É", True, 
                        f"–ó–∞–ø–∏—Å—ñ–≤: {stats.get('total_entries', 0)}")
            
            return True
        
    except Exception as e:
        print_result("–ö–µ—à Gemini", False, str(e))
        return False

def test_config_validator():
    """–¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    print_header("–¢–ï–°–¢ –í–ê–õ–Ü–î–ê–¢–û–†–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á")
    
    try:
        from bot.modules.config_validator import ConfigValidator
        
        validator = ConfigValidator()
        print_result("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–∞", True)
        
        # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (–º–æ–∂–µ –Ω–µ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤)
        try:
            is_valid = validator.validate_all()
            print_result("–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", is_valid, 
                        "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞" if is_valid else "–Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é")
        except Exception as e:
            print_result("–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", False, f"–ü–æ–º–∏–ª–∫–∞: {str(e)[:100]}...")
        
        return True
        
    except Exception as e:
        print_result("–í–∞–ª—ñ–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", False, str(e))
        return False

def test_performance_monitor():
    """–¢–µ—Å—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    print_header("–¢–ï–°–¢ –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü")
    
    try:
        from bot.modules.performance_monitor import PerformanceMonitor
        
        monitor = PerformanceMonitor()
        print_result("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∞", True)
        
        # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = monitor.get_system_stats()
        print_result("–°–∏—Å—Ç–µ–º–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", True, 
                    f"CPU: {stats.get('cpu_percent', 'N/A')}%, RAM: {stats.get('memory_percent', 'N/A')}%")
        
        # –¢–µ—Å—Ç health check
        health = monitor.health_check()
        is_healthy = health.get('status') == 'healthy'
        print_result("Health check", is_healthy, 
                    f"–°—Ç–∞—Ç—É—Å: {health.get('status', 'unknown')}")
        
        return True
        
    except Exception as e:
        print_result("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", False, str(e))
        return False

async def test_async_database():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print_header("–¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–û–á –ë–ê–ó–ò –î–ê–ù–ò–•")
    
    try:
        from bot.modules.context_async import AsyncContextManager
        
        manager = AsyncContextManager()
        print_result("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞", True)
        
        # –¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        await manager.initialize()
        print_result("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è", True)
        
        # –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è
        try:
            connection_ok = await manager.test_connection()
            print_result("–¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è", connection_ok)
        except Exception as e:
            print_result("–¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è", False, str(e))
            connection_ok = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = await manager.get_stats()
        print_result("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î", True, 
                    f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {stats.get('total_messages', 0)}")
        
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        await manager.close()
        
        return True
        
    except Exception as e:
        print_result("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ë–î", False, str(e))
        return False

def test_web_dashboard():
    """–¢–µ—Å—Ç –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É"""
    print_header("–¢–ï–°–¢ –í–ï–ë-–î–ê–®–ë–û–†–î–£")
    
    try:
        from bot.modules.web_dashboard import create_app, start_dashboard
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
        app = create_app()
        print_result("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É", app is not None)
        
        # –ü—Ä–∏–º—ñ—Ç–∫–∞ –ø—Ä–æ –∑–∞–ø—É—Å–∫
        print_result("–ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ –∑–∞–ø—É—Å–∫—É", True, 
                    "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'make monitor' –¥–ª—è –∑–∞–ø—É—Å–∫—É –¥–∞—à–±–æ—Ä–¥—É")
        
        return True
        
    except Exception as e:
        print_result("–í–µ–±-–¥–∞—à–±–æ—Ä–¥", False, str(e))
        return False

def test_docker_improvements():
    """–¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω—å Docker"""
    print_header("–¢–ï–°–¢ –ü–û–ö–†–ê–©–ï–ù–¨ DOCKER")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Dockerfile
    dockerfile_path = "Dockerfile"
    if os.path.exists(dockerfile_path):
        try:
            with open(dockerfile_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except UnicodeDecodeError:
            with open(dockerfile_path, 'r', encoding='latin-1') as f:
                content = f.read()
        
        improvements = {
            "HEALTHCHECK": "HEALTHCHECK" in content,
            "Non-root user": any(keyword in content for keyword in ["RUN adduser", "USER "]),
            "Multi-stage": content.count("FROM") >= 1,
        }
        
        for improvement, exists in improvements.items():
            print_result(f"Dockerfile: {improvement}", exists)
    else:
        print_result("Dockerfile", False, "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ docker-compose.yml
    compose_path = "docker-compose.yml"
    if os.path.exists(compose_path):
        try:
            with open(compose_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except UnicodeDecodeError:
            with open(compose_path, 'r', encoding='latin-1') as f:
                content = f.read()
        
        improvements = {
            "Healthcheck": "healthcheck:" in content,
            "Logging": "logging:" in content,
            "Resource limits": any(keyword in content for keyword in ["deploy:", "mem_limit:", "cpus:"]),
        }
        
        for improvement, exists in improvements.items():
            print_result(f"docker-compose: {improvement}", exists)
    else:
        print_result("docker-compose.yml", False, "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    return True

def test_makefile_improvements():
    """–¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω—å Makefile"""
    print_header("–¢–ï–°–¢ –ü–û–ö–†–ê–©–ï–ù–¨ MAKEFILE")
    
    makefile_path = "Makefile"
    if os.path.exists(makefile_path):
        try:
            with open(makefile_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except UnicodeDecodeError:
            with open(makefile_path, 'r', encoding='latin-1') as f:
                content = f.read()
        
        new_commands = [
            "monitor:", "validate-config:", "check-performance:", "migrate-db:",
            "test-cache:", "deploy:", "health-check:", "cache-stats:",
            "test-async:", "optimize-db:", "clear-cache:", "benchmark:"
        ]
        
        for command in new_commands:
            exists = command in content
            print_result(f"–ö–æ–º–∞–Ω–¥–∞ {command[:-1]}", exists)
        
        return True
    else:
        print_result("Makefile", False, "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ü–û–ö–†–ê–©–ï–ù–¨ –§–ê–ó–ò 1")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    results = []
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ç–µ—Å—Ç–∏
    results.append(("–ê–¥–∞–ø—Ç–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç—É", test_context_adapter()))
    results.append(("–ö–µ—à Gemini", test_gemini_cache()))
    results.append(("–í–∞–ª—ñ–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", test_config_validator()))
    results.append(("–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", test_performance_monitor()))
    results.append(("–í–µ–±-–¥–∞—à–±–æ—Ä–¥", test_web_dashboard()))
    results.append(("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è Docker", test_docker_improvements()))
    results.append(("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è Makefile", test_makefile_improvements()))
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ç–µ—Å—Ç –∑ —Ç–∞–π–º-–∞—É—Ç–æ–º
    try:
        async_result = asyncio.wait_for(test_async_database(), timeout=10.0)
        async_result = asyncio.run(async_result)
        results.append(("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ë–î", async_result))
    except asyncio.TimeoutError:
        results.append(("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ë–î", False))
        print("‚ùå –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ë–î: –¢–∞–π–º-–∞—É—Ç (> 10 —Å–µ–∫)")
    except Exception as e:
        results.append(("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ë–î", False))
        print(f"‚ùå –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ë–î: {e}")
    
    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤—Å—ñ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ –∑–∞–∫—Ä–∏—Ç—ñ
    try:
        from bot.modules.context_async import close_connection
        asyncio.run(close_connection())
    except Exception:
        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print_header("–ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total:.1%})")
    
    if passed == total:
        print("üéâ –í—Å—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –§–∞–∑–∏ 1 –ø—Ä–∞—Ü—é—é—Ç—å —á—É–¥–æ–≤–æ!")
    elif passed >= total * 0.7:
        print("üëç –ë—ñ–ª—å—à—ñ—Å—Ç—å –ø–æ–∫—Ä–∞—â–µ–Ω—å –ø—Ä–∞—Ü—é—î, —î –∫—ñ–ª—å–∫–∞ –ø—Ä–æ–±–ª–µ–º –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è.")
    else:
        print("‚ö†Ô∏è  –ë–∞–≥–∞—Ç–æ –ø—Ä–æ–±–ª–µ–º –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏.")
    
    print(f"\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print("   1. –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –º–æ–¥—É–ª—ñ")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏: make test-integration")
    print("   3. –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –§–∞–∑–∏ 2: –ë–µ–∑–ø–µ–∫–∞ —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å")
    
    # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    return passed == total

if __name__ == "__main__":
    try:
        success = main()
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ event loop —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        try:
            loop = asyncio.get_running_loop()
            if loop and not loop.is_closed():
                loop.stop()
        except RuntimeError:
            # Event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π
            pass
        
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
