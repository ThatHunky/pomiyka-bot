#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É –∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ—é –≤–µ—Ä—Å—ñ—î—é –ì—Ä—è–≥-–±–æ—Ç–∞.
–í–∫–ª—é—á–∞—î –ª–∏—à–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –¥–ª—è production deployment.
"""

import zipfile
import os
from pathlib import Path
from datetime import datetime

def create_bot_archive():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞—Ä—Ö—ñ–≤ –∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ—é –≤–µ—Ä—Å—ñ—î—é –±–æ—Ç–∞."""
    
    # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ—î–∫—Ç—É
    root_dir = Path(__file__).parent
    
    # –Ü–º'—è –∞—Ä—Ö—ñ–≤—É –∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ—é –¥–∞—Ç–æ—é —Ç–∞ –≤–µ—Ä—Å—ñ—î—é
    version = "v2.8-docker-optimized"
    archive_name = f"gryag-bot-{version}-{datetime.now().strftime('%Y%m%d')}.zip"
    archive_path = root_dir / archive_name
    
    # –§–∞–π–ª–∏ —Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è –≤ –∞—Ä—Ö—ñ–≤
    files_to_include = [
        # –û—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏
        "requirements.txt",
        "start.py",
        "Dockerfile", 
        "docker-compose.yml",
        "docker-compose.prod.yml",
        ".dockerignore",
        "README.md",
        "CHANGELOG.md",
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
        "GEMINI_ENHANCED_INTEGRATION.md",
        "GEMINI_INTEGRATION_COMPLETION_REPORT.md", 
        "API_VERSION_UPDATE_REPORT.md",
        "PROJECT_ANALYSIS.md",
        "AGENTS.md",
        "DEPLOYMENT.md",
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (–ø—Ä–∏–∫–ª–∞–¥)
        ".env.sample",
        
        # –¢–µ—Å—Ç–∏ (–∫—Ä–∏—Ç–∏—á–Ω—ñ)
        "test_integration_gemini.py",
        "test_api_version.py",
        "test_enhanced_behavior_unit.py",
        "test_health_checker_unit.py",
        "test_backup_manager.py",
        "test_rate_limiter_unit.py",
        
        # –í–µ—Å—å –º–æ–¥—É–ª—å –±–æ—Ç–∞
        "bot/",
    ]
    
    # –§–∞–π–ª–∏ —Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è
    exclude_patterns = [
        "__pycache__",
        "*.pyc",
        "*.pyo", 
        "*.db",
        "*.json",
        ".env",
        "data/",
        "*.zip",
        "*.tar.gz"
    ]
    
    # –í–∏–Ω—è—Ç–∫–∏ –∑ –≤–∏–∫–ª—é—á–µ–Ω—å (—Ñ–∞–π–ª–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–ª—é—á–∏—Ç–∏ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–∏ –ø—ñ–¥–ø–∞–¥–∞—é—Ç—å –ø—ñ–¥ —Ñ—ñ–ª—å—Ç—Ä)
    include_exceptions = [
        "test_integration_gemini.py",
        "test_api_version.py",
        ".env.sample",
        ".env.example"
    ]
    
    def should_exclude(file_path: Path) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª—é—á–∏—Ç–∏ —Ñ–∞–π–ª."""
        # –ó–∞–≤–∂–¥–∏ –≤–∫–ª—é—á–∞—Ç–∏ —Ñ–∞–π–ª–∏ –∑ –≤–∏–Ω—è—Ç–∫—ñ–≤
        if file_path.name in include_exceptions:
            return False
            
        file_str = str(file_path)
        for pattern in exclude_patterns:
            if pattern in file_str or file_path.name.startswith(pattern.replace("*", "")):
                return True
        return False
    
    print(f"üöÄ –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä—Ö√≠v: {archive_name}")
    
    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        files_added = 0
        
        for item in files_to_include:
            item_path = root_dir / item
            
            if item_path.is_file():
                # –î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª
                if not should_exclude(item_path):
                    zipf.write(item_path, item)
                    files_added += 1
                    print(f"‚úÖ –î–æ–¥–∞–Ω–æ —Ñ–∞–π–ª: {item}")
                else:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª: {item} (–≤–∏–∫–ª—é—á–µ–Ω–æ)")
                    
            elif item_path.is_dir():
                # –î–æ–¥–∞—Ç–∏ –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                for root, dirs, files in os.walk(item_path):
                    # –í–∏–∫–ª—é—á–∏—Ç–∏ –Ω–µ–±–∞–∂–∞–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                    dirs[:] = [d for d in dirs if not should_exclude(Path(root) / d)]
                    
                    for file in files:
                        file_path = Path(root) / file
                        if not should_exclude(file_path):
                            # –í—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –≤ –∞—Ä—Ö—ñ–≤—ñ
                            arcname = file_path.relative_to(root_dir)
                            zipf.write(file_path, arcname)
                            files_added += 1
                            print(f"‚úÖ –î–æ–¥–∞–Ω–æ: {arcname}")
                        else:
                            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {file_path} (–≤–∏–∫–ª—é—á–µ–Ω–æ)")
            else:
                print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {item}")
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∞—Ä—Ö—ñ–≤
    archive_size = archive_path.stat().st_size
    print(f"\nüéâ –ê—Ä—Ö—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    print(f"üìÅ –§–∞–π–ª: {archive_path}")
    print(f"üìä –†–æ–∑–º—ñ—Ä: {archive_size / 1024:.1f} KB")
    print(f"üìã –§–∞–π–ª—ñ–≤ –¥–æ–¥–∞–Ω–æ: {files_added}")
    
    return archive_path

if __name__ == "__main__":
    try:
        archive = create_bot_archive()
        print(f"\n‚ú® –ì–æ—Ç–æ–≤–æ! –ê—Ä—Ö—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {archive}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞—Ä—Ö—ñ–≤—É: {e}")
        exit(1)
