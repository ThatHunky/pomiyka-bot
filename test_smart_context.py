#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —á–∞—Ç—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Å–ø–∞–º—É
"""

import sys
import os
import time
import random

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'bot'))

def test_smart_context_processing():
    """–¢–µ—Å—Ç—É—î —Ä–æ–∑—É–º–Ω—É –æ–±—Ä–æ–±–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    
    try:
        from bot.modules.enhanced_behavior import (
            process_message_with_smart_context,
            analyze_chat_spam_level,
            compress_context_smartly,
            get_anti_spam_message,
            log_context_processing,
            get_processing_statistics
        )
        
        print("‚úÖ –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É")
        
        # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è
        print("\nüîÑ –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        
        normal_context = [
            {"text": "–ü—Ä–∏–≤—ñ—Ç –≤—Å—ñ–º!", "timestamp": time.time() - 300},
            {"text": "–Ø–∫ —Å–ø—Ä–∞–≤–∏?", "timestamp": time.time() - 250},
            {"text": "–í—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ", "timestamp": time.time() - 200},
        ]
        
        result = process_message_with_smart_context(
            "–ì—Ä—è–≥, —â–æ –¥—É–º–∞—î—à –ø—Ä–æ —Ü–µ?",
            chat_id=123,
            context=normal_context
        )
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: shouldRespond={result['should_respond']}")
        print(f"   –¢–æ–Ω: {result['response_tone']}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: {result.get('recommendations', {})}")
        
        # –¢–µ—Å—Ç 2: –°–∏—Ç—É–∞—Ü—ñ—è –∑—ñ —Å–ø–∞–º–æ–º
        print("\nüîÑ –¢–µ—Å—Ç 2: –û–±—Ä–æ–±–∫–∞ —Å–ø–∞–º—É")
        
        spam_messages = []
        current_time = time.time()
        
        for i in range(35):  # –°—Ç–≤–æ—Ä—é—î–º–æ 35 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω (—Å–ø–∞–º)
            spam_messages.append({
                "text": f"—Å–ø–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {i}",
                "timestamp": current_time - (300 - i * 8)  # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø–æ 5 —Ö–≤–∏–ª–∏–Ω–∞–º
            })
        
        spam_analysis = analyze_chat_spam_level(456, spam_messages)
        print(f"   –†—ñ–≤–µ–Ω—å —Å–ø–∞–º—É: {spam_analysis['spam_level']}")
        print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {spam_analysis['message_frequency']}")
        print(f"   –°–∫–æ—Ä–µ–≥–æ–≤–∞–Ω–∏–π —à–∞–Ω—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {spam_analysis['suggested_reply_chance']:.3f}")
        
        anti_spam_msg = get_anti_spam_message(spam_analysis['spam_level'])
        print(f"   –ê–Ω—Ç–∏-—Å–ø–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {anti_spam_msg}")
        
        # –¢–µ—Å—Ç 3: –°—Ç–∏—Å–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        print("\nüîÑ –¢–µ—Å—Ç 3: –°—Ç–∏—Å–Ω–µ–Ω–Ω—è –≤–µ–ª–∏–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É")
        
        large_context = []
        for i in range(150):  # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–ª–∏–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            text = f"–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {i}"
            if i % 10 == 0:  # –ö–æ–∂–Ω–µ 10-—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∞–∂–ª–∏–≤–µ
                text = f"–ì—Ä—è–≥, –≤–∞–∂–ª–∏–≤–µ –ø–∏—Ç–∞–Ω–Ω—è {i}?"
            
            large_context.append({
                "text": text,
                "timestamp": current_time - (1000 - i * 6)
            })
        
        compressed = compress_context_smartly(large_context, max_context_size=50)
        print(f"   –°—Ç–∏—Å–Ω—É—Ç–æ –∑ {len(large_context)} –¥–æ {len(compressed)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        
        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∫—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ
        important_saved = sum(1 for msg in compressed if "–≤–∞–∂–ª–∏–≤–µ –ø–∏—Ç–∞–Ω–Ω—è" in msg['text'])
        print(f"   –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤–∞–∂–ª–∏–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {important_saved}")
        
        # –¢–µ—Å—Ç 4: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑—ñ —Å–ø–∞–º–æ–º
        print("\nüîÑ –¢–µ—Å—Ç 4: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∞–º–æ–º")
        
        spam_result = process_message_with_smart_context(
            "–ü—Ä–æ—Å—Ç–æ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            chat_id=456,
            context=spam_messages,
            recent_messages=spam_messages[-10:]
        )
        
        print(f"   –ß–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏: {spam_result['should_respond']}")
        print(f"   –†—ñ–≤–µ–Ω—å —Å–ø–∞–º—É: {spam_result['spam_analysis']['spam_level']}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {spam_result['recommendations']['max_response_length']}")
        print(f"   –°—Ç–∏–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {spam_result['recommendations']['response_style']}")
        
        # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüîÑ –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–æ–±–∫–∏")
        
        stats = get_processing_statistics(456)
        print(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É: {stats['messages_last_hour']}")
        print(f"   –ó–∞–ø–∏—Å—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É: {stats['analysis_records']}")
        
        print("\n‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("\nüìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
        print("   1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ process_message_with_smart_context() —è–∫ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é")
        print("   2. –§—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏—è–≤–ª—è—î —Å–ø–∞–º —Ç–∞ –∫–æ—Ä–µ–≥—É—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É")
        print("   3. –í–µ–ª–∏–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∏—Å–∫–∞—î—Ç—å—Å—è")
        print("   4. –í —É–º–æ–≤–∞—Ö —Å–ø–∞–º—É –±–æ—Ç —Å—Ç–∞—î –º–µ–Ω—à –∞–∫—Ç–∏–≤–Ω–∏–º")
        print("   5. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

def test_context_compression_edge_cases():
    """–¢–µ—Å—Ç–∏ –≥—Ä–∞–Ω–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    
    try:
        from bot.modules.enhanced_behavior import compress_context_smartly
        
        print("\nüîÑ –¢–µ—Å—Ç–∏ –≥—Ä–∞–Ω–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤:")
        
        # –¢–µ—Å—Ç –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        empty_result = compress_context_smartly([], 10)
        print(f"   –ü–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(empty_result)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –º–µ–Ω—à–æ–≥–æ –∑–∞ –ª—ñ–º—ñ—Ç
        small_context = [{"text": "test", "timestamp": time.time()}]
        small_result = compress_context_smartly(small_context, 10)
        print(f"   –ú–∞–ª–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(small_result)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç—ñ–ª—å–∫–∏ –∑ –≤–∞–∂–ª–∏–≤–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        important_only = [
            {"text": "–ì—Ä—è–≥, –ø–∏—Ç–∞–Ω–Ω—è 1?", "timestamp": time.time() - 100},
            {"text": "–ì—Ä—è–≥, –ø–∏—Ç–∞–Ω–Ω—è 2?", "timestamp": time.time() - 50},
            {"text": "–ì—Ä—è–≥, –ø–∏—Ç–∞–Ω–Ω—è 3?", "timestamp": time.time()},
        ]
        important_result = compress_context_smartly(important_only, 2)
        print(f"   –¢—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤—ñ (3->2): {len(important_result)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        
        print("   ‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ñ –≤–∏–ø–∞–¥–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –≥—Ä–∞–Ω–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
    
    success = test_smart_context_processing()
    test_context_compression_edge_cases()
    
    if success:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        print("\nüìù –î–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:")
        print("   from bot.modules.enhanced_behavior import process_message_with_smart_context")
        print("   result = process_message_with_smart_context(message, chat_id, context)")
    else:
        print("\n‚ùå –Ñ –ø—Ä–æ–±–ª–µ–º–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏")
        exit(1)
