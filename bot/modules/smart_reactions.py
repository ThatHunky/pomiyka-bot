"""
–ú–æ–¥—É–ª—å —Ä–æ–∑—É–º–Ω–∏—Ö —Ä–µ–∞–∫—Ü—ñ–π –±–æ—Ç–∞.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î –µ–º–æ–¥–∑—ñ-—Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
"""

import random
import logging
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime, timedelta

from aiogram.types import Message, ReactionTypeEmoji
from aiogram import Bot

logger = logging.getLogger(__name__)


@dataclass
class ReactionConfig:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä–µ–∞–∫—Ü—ñ–π"""
    mention_chance: float = 0.7  # 70% —à–∞–Ω—Å —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –∑–≥–∞–¥–∫–∏
    question_chance: float = 0.3  # 30% —à–∞–Ω—Å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è
    regular_chance: float = 0.05  # 5% —à–∞–Ω—Å –Ω–∞ –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    max_reactions_per_minute: int = 5
    min_pause_between_reactions: int = 3  # —Å–µ–∫—É–Ω–¥–∏


class SmartReactions:
    """–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—É–º–Ω–∏—Ö —Ä–µ–∞–∫—Ü—ñ–π"""
    
    def __init__(self, bot: Bot, config: Optional[ReactionConfig] = None):
        self.bot = bot
        self.config = config or ReactionConfig()
        self.last_reactions: Dict[int, datetime] = {}
        self.reaction_count: Dict[int, List[datetime]] = {}
        
        # –û—Å–Ω–æ–≤–Ω—ñ –µ–º–æ–¥–∑—ñ –¥–ª—è —Ä–µ–∞–∫—Ü—ñ–π
        self.positive_emojis = ["üëç", "‚ù§Ô∏è", "üî•", "ü•∞", "üëè", "üòÅ", "üôè", "üëå", "‚ö°Ô∏è"]
        self.neutral_emojis = ["ü§î", "ü§Ø", "üåö", "ü§°", "üå≠", "üçå"]
        self.thoughtful_emojis = ["ü§î", "üí≠", "üßê", "üí°", "üéØ"]
        self.absurd_emojis = ["ü§°", "üåö", "üå≠", "üçå", "ü¶Ñ", "üöÄ"]
        
        # –¢—Ä–∏–≥–µ—Ä–∏ –¥–ª—è –∑–≥–∞–¥–æ–∫ –±–æ—Ç–∞
        self.triggers = [
            "–≥—Ä—è–≥", "–≥—Ä—è–≥—ñ–∫", "–≥—Ä—è–≥—É", "–≥—Ä—è–≥–∞", "–≥—Ä—è–≥–æ–º",
            "–±–æ—Ç", "–±–æ—Ç–µ", "@gryag_bot", "gryag"
        ]
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ —Å–ª–æ–≤–∞
        self.positive_words = [
            "–¥—è–∫—É—é", "—Å–ø–∞—Å–∏–±—ñ", "–∫—Ä—É—Ç–æ", "–∫–ª–∞—Å–Ω–æ", "—Å—É–ø–µ—Ä", "—á—É–¥–æ–≤–æ",
            "–≤—ñ–¥–º—ñ–Ω–Ω–æ", "–º–æ–ª–æ–¥–µ—Ü—å", "–∫—Ä–∞—Å–∏–≤–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–ª—é–±–æ–≤"
        ]
        
        # –°–ª–æ–≤–∞-–ø–∏—Ç–∞–Ω–Ω—è
        self.question_words = ["—â–æ", "–¥–µ", "–∫–æ–ª–∏", "—è–∫", "—á–æ–º—É", "—Ö—Ç–æ", "—á–∏", "—Å–∫—ñ–ª—å–∫–∏"]

    async def should_react(self, message: Message) -> Tuple[bool, str]:
        """–í–∏–∑–Ω–∞—á–∞—î, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            chat_id = message.chat.id
            current_time = datetime.now()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É —Ä–µ–∞–∫—Ü—ñ–π
            if not self._check_rate_limit(chat_id, current_time):
                return False, "rate_limit"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –ø–∞—É–∑–∏
            if chat_id in self.last_reactions:
                time_diff = (current_time - self.last_reactions[chat_id]).total_seconds()
                if time_diff < self.config.min_pause_between_reactions:
                    return False, "min_pause"
            
            text = message.text or message.caption or ""
            text_lower = text.lower()
            
            # –ó–≥–∞–¥–∫–∏ –±–æ—Ç–∞ - 70% —à–∞–Ω—Å
            if any(trigger in text_lower for trigger in self.triggers):
                if random.random() < self.config.mention_chance:
                    return True, "mention"
            
            # –ü–∏—Ç–∞–Ω–Ω—è - 30% —à–∞–Ω—Å
            if self._is_question(text):
                if random.random() < self.config.question_chance:
                    return True, "question"
            
            # –ó–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - 5% —à–∞–Ω—Å
            if random.random() < self.config.regular_chance:
                return True, "regular"
            
            return False, "no_trigger"
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó: {e}")
            return False, "error"

    def _check_rate_limit(self, chat_id: int, current_time: datetime) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É —Ä–µ–∞–∫—Ü—ñ–π –∑–∞ —Ö–≤–∏–ª–∏–Ω—É"""
        if chat_id not in self.reaction_count:
            self.reaction_count[chat_id] = []
        
        # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        minute_ago = current_time - timedelta(minutes=1)
        self.reaction_count[chat_id] = [
            time for time in self.reaction_count[chat_id] 
            if time > minute_ago
        ]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É
        return len(self.reaction_count[chat_id]) < self.config.max_reactions_per_minute

    def _is_question(self, text: str) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î, —á–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è–º"""
        if not text:
            return False
        
        text_lower = text.lower().strip()
        
        # –ü—Ä—è–º–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–Ω–∞–∫—É –ø–∏—Ç–∞–Ω–Ω—è
        if text.endswith("?"):
            return True
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ª—ñ–≤-–ø–∏—Ç–∞–Ω—å
        words = text_lower.split()
        if words and words[0] in self.question_words:
            return True
        
        return False

    async def get_reaction_emoji(self, message: Message, reaction_type: str) -> str:
        """–í–∏–±–∏—Ä–∞—î –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –µ–º–æ–¥–∑—ñ –¥–ª—è —Ä–µ–∞–∫—Ü—ñ—ó"""
        try:
            text = message.text or message.caption or ""
            text_lower = text.lower()
            
            # –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ —Å–ª–æ–≤–∞ - –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –µ–º–æ–¥–∑—ñ
            if any(word in text_lower for word in self.positive_words):
                return random.choice(self.positive_emojis)
            
            # –ü–∏—Ç–∞–Ω–Ω—è - –∑–∞–¥—É–º–ª–∏–≤—ñ –µ–º–æ–¥–∑—ñ
            if reaction_type == "question":
                return random.choice(self.thoughtful_emojis)
            
            # –ó–≥–∞–¥–∫–∏ –±–æ—Ç–∞ - —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ –µ–º–æ–¥–∑—ñ
            if reaction_type == "mention":
                all_emojis = self.positive_emojis + self.neutral_emojis
                return random.choice(all_emojis)
            
            # –ó–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ/–∞–±—Å—É—Ä–¥–Ω—ñ
            return random.choice(self.neutral_emojis + self.absurd_emojis)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –µ–º–æ–¥–∑—ñ: {e}")
            return random.choice(self.positive_emojis)

    async def add_reaction(self, message: Message) -> bool:
        """–î–æ–¥–∞—î —Ä–µ–∞–∫—Ü—ñ—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            should_react, reaction_type = await self.should_react(message)
            
            if not should_react:
                logger.debug(f"–ù–µ —Ä–µ–∞–≥—É—î–º–æ: {reaction_type}")
                return False
            
            emoji = await self.get_reaction_emoji(message, reaction_type)
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∞–∫—Ü—ñ—ó —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–∏–π API
            try:
                await self.bot.set_message_reaction(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    reaction=[ReactionTypeEmoji(emoji=emoji)]
                )
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–∫—Ü—ñ—é {emoji}: {e}")
                return False
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            chat_id = message.chat.id
            current_time = datetime.now()
            self.last_reactions[chat_id] = current_time
            
            if chat_id not in self.reaction_count:
                self.reaction_count[chat_id] = []
            self.reaction_count[chat_id].append(current_time)
            
            logger.info(f"–î–æ–¥–∞–Ω–æ —Ä–µ–∞–∫—Ü—ñ—é {emoji} –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ {chat_id} (—Ç–∏–ø: {reaction_type})")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó: {e}")
            return False

    async def process_message(self, message: Message) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –º–æ–∂–ª–∏–≤–æ—ó —Ä–µ–∞–∫—Ü—ñ—ó"""
        try:
            # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
            if message.from_user and message.from_user.is_bot:
                return None
            
            # –î–æ–¥–∞—î–º–æ —Ä–µ–∞–∫—Ü—ñ—é
            reaction_added = await self.add_reaction(message)
            
            return {
                "reaction_added": reaction_added,
                "chat_id": message.chat.id,
                "message_id": message.message_id,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–∞–∫—Ü—ñ—ó: {e}")
            return None

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∞–∫—Ü—ñ–π"""
        try:
            current_time = datetime.now()
            total_reactions = 0
            active_chats = 0
            
            for reactions in self.reaction_count.values():
                # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∞–∫—Ü—ñ–π –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É
                hour_ago = current_time - timedelta(hours=1)
                recent_reactions = [r for r in reactions if r > hour_ago]
                
                if recent_reactions:
                    active_chats += 1
                    total_reactions += len(recent_reactions)
            
            return {
                "total_reactions_last_hour": total_reactions,
                "active_chats": active_chats,
                "total_tracked_chats": len(self.reaction_count),
                "config": {
                    "mention_chance": self.config.mention_chance,
                    "question_chance": self.config.question_chance,
                    "regular_chance": self.config.regular_chance,
                    "max_reactions_per_minute": self.config.max_reactions_per_minute
                }
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∞–∫—Ü—ñ–π: {e}")
            return {"error": str(e)}

    async def cleanup_old_data(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            current_time = datetime.now()
            hour_ago = current_time - timedelta(hours=1)
            
            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∞–∫—Ü—ñ–π
            for chat_id in list(self.reaction_count.keys()):
                self.reaction_count[chat_id] = [
                    time for time in self.reaction_count[chat_id] 
                    if time > hour_ago
                ]
                
                # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Å–ø–∏—Å–∫—ñ–≤
                if not self.reaction_count[chat_id]:
                    del self.reaction_count[chat_id]
            
            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ last_reactions
            for chat_id in list(self.last_reactions.keys()):
                if current_time - self.last_reactions[chat_id] > timedelta(hours=24):
                    del self.last_reactions[chat_id]
            
            logger.debug("–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö —Ä–µ–∞–∫—Ü—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö —Ä–µ–∞–∫—Ü—ñ–π: {e}")


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É
def create_smart_reactions(bot: Bot, config: Optional[Dict[str, Any]] = None) -> SmartReactions:
    """–°—Ç–≤–æ—Ä—é—î –µ–∫–∑–µ–º–ø–ª—è—Ä SmartReactions –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é"""
    reaction_config = ReactionConfig()
    
    if config:
        reaction_config.mention_chance = config.get("mention_chance", 0.7)
        reaction_config.question_chance = config.get("question_chance", 0.3)
        reaction_config.regular_chance = config.get("regular_chance", 0.05)
        reaction_config.max_reactions_per_minute = config.get("max_reactions_per_minute", 5)
        reaction_config.min_pause_between_reactions = config.get("min_pause_between_reactions", 3)
    
    return SmartReactions(bot, reaction_config)
