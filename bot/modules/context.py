# –ú–æ–¥—É–ª—å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —á–∞—Ç—É (—Ç—ñ–ª—å–∫–∏ SQLite)
from aiogram.types import Message
from .media_map import get_or_add_media
from bot.modules.context_sqlite import save_message as save_message_sqlite, get_context as get_context_sqlite

def save_message(message: Message):
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ–¥—ñ–∞ –¥–ª—è SQLite
    media_id = None
    media_type = None
    text_for_context = message.text
    
    if message.sticker:
        media_id = message.sticker.file_unique_id
        media_type = "sticker"
        text_for_context = get_or_add_media(media_id, "sticker", f"–°—Ç—ñ–∫–µ—Ä: {message.sticker.emoji or ''}")
    elif message.photo:
        media_id = message.photo[-1].file_unique_id
        media_type = "photo"
        text_for_context = get_or_add_media(media_id, "photo", "–§–æ—Ç–æ")
    elif message.audio:
        media_id = message.audio.file_unique_id
        media_type = "audio"
        text_for_context = get_or_add_media(media_id, "audio", f"–ê—É–¥—ñ–æ: {message.audio.title or ''}")
    elif message.voice:
        media_id = message.voice.file_unique_id
        media_type = "voice"
        text_for_context = get_or_add_media(media_id, "voice", "–ì–æ–ª–æ—Å–æ–≤–µ")
    elif message.video:
        media_id = message.video.file_unique_id
        media_type = "video"
        text_for_context = get_or_add_media(media_id, "video", "–í—ñ–¥–µ–æ")
    elif not text_for_context:
        text_for_context = "[–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π Message –¥–ª—è SQLite
    class SQLiteMessage:
        def __init__(self, original_msg, text_override):
            self.chat = original_msg.chat
            self.from_user = original_msg.from_user
            self.text = text_override
    
    sqlite_msg = SQLiteMessage(message, text_for_context)
    save_message_sqlite(sqlite_msg, media_id, media_type)

def get_context(chat_id):
    from bot.bot_config import PERSONA
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ SQLite
    context_list = get_context_sqlite(chat_id, limit=PERSONA["context_limit"]*10)
    
    # –î–æ–¥–∞—î–º–æ mood analysis —Ç–∞ summary
    if context_list:
        moods = []
        for m in context_list[-10:]:
            text = m.get("text", "").lower()
            if any(word in text for word in ["–∂–∞—Ä—Ç", "–∞—Ö–∞—Ö", "–ª–æ–ª", "üòÇ", "—Ö–∞—Ö–∞"]):
                moods.append("–∂–∞—Ä—Ç")
            elif any(word in text for word in ["—Å–≤–∞—Ä", "–ª–∞–π–∫", "–≥–Ω—ñ–≤", "–∑–ª—ñ—Å—Ç—å"]):
                moods.append("—Å–≤–∞—Ä–∫–∞")
            elif len(text.strip()) < 2:
                moods.append("—Ç–∏—à–∞")
            else:
                moods.append("–∑–≤–∏—á–∞–π–Ω–∏–π")
        
        from collections import Counter
        mood_summary = Counter(moods).most_common(1)[0][0] if moods else "–∑–≤–∏—á–∞–π–Ω–∏–π"
        context_list.insert(0, {"user": "–ì—Ä—è–≥", "text": f"–û–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —á–∞—Ç—ñ: {mood_summary}"})
    
    return context_list

def get_active_chats():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤"""
    from bot.modules.context_sqlite import get_active_chats as get_active_chats_sqlite
    return get_active_chats_sqlite()
