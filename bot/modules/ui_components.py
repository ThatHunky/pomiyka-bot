"""
–ú–æ–¥—É–ª—å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –¥–ª—è Telegram –±–æ—Ç–∞
–°—Ç–≤–æ—Ä—é—î –∫—Ä–∞—Å–∏–≤—ñ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏, –∫–Ω–æ–ø–∫–∏, –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
"""

import logging
from typing import Dict, List, Optional, Any, Union, Callable
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum

try:
    from aiogram.types import (
        InlineKeyboardMarkup, InlineKeyboardButton,
        ReplyKeyboardMarkup, KeyboardButton,
        ReplyKeyboardRemove, ForceReply
    )
    from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
    from aiogram.utils.formatting import Text, Bold, Italic, Code, Pre
    aiogram_available = True
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    aiogram_available = False
    
    class InlineKeyboardMarkup:
        def __init__(self, **kwargs: Any): pass
    
    class InlineKeyboardButton:
        def __init__(self, **kwargs: Any): pass
    
    class ReplyKeyboardMarkup:
        def __init__(self, **kwargs: Any): pass
    
    class KeyboardButton:
        def __init__(self, **kwargs: Any): pass
    
    class ReplyKeyboardRemove:
        pass
    
    class ForceReply:
        pass
    
    class InlineKeyboardBuilder:
        def __init__(self): pass
        def button(self, *args: Any, **kwargs: Any) -> 'InlineKeyboardBuilder': return self
        def adjust(self, *args: Any) -> 'InlineKeyboardBuilder': return self
        def as_markup(self) -> InlineKeyboardMarkup: return InlineKeyboardMarkup()
    
    class ReplyKeyboardBuilder:
        def __init__(self): pass
        def button(self, *args: Any, **kwargs: Any) -> 'ReplyKeyboardBuilder': return self
        def adjust(self, *args: Any) -> 'ReplyKeyboardBuilder': return self
        def as_markup(self, **kwargs: Any) -> ReplyKeyboardMarkup: return ReplyKeyboardMarkup()
    
    class Text:
        def __init__(self, *args: Any, **kwargs: Any): pass
    
    Bold = Italic = Code = Pre = Text

logger = logging.getLogger(__name__)


class ButtonStyle(Enum):
    """–°—Ç–∏–ª—ñ –∫–Ω–æ–ø–æ–∫"""
    PRIMARY = "üîµ"
    SUCCESS = "üü¢"
    WARNING = "üü°" 
    DANGER = "üî¥"
    INFO = "‚ÑπÔ∏è"
    SETTINGS = "‚öôÔ∏è"
    BACK = "‚óÄÔ∏è"
    FORWARD = "‚ñ∂Ô∏è"
    UP = "üîº"
    DOWN = "üîΩ"
    HOME = "üè†"
    REFRESH = "üîÑ"
    CLOSE = "‚ùå"


class MessageType(Enum):
    """–¢–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    INFO = "‚ÑπÔ∏è"
    SUCCESS = "‚úÖ"
    WARNING = "‚ö†Ô∏è"
    ERROR = "‚ùå"
    LOADING = "‚è≥"
    QUESTION = "‚ùì"


@dataclass
class UIButton:
    """–ö–Ω–æ–ø–∫–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    text: str
    callback_data: str = ""
    url: Optional[str] = None
    style: ButtonStyle = ButtonStyle.PRIMARY
    enabled: bool = True
    row: int = 0


@dataclass
class UIKeyboard:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    buttons: List[UIButton] = field(default_factory=list)
    inline: bool = True
    one_time: bool = False
    resize: bool = True
    selective: bool = False


@dataclass
class UIMessage:
    """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    text: str
    message_type: MessageType = MessageType.INFO
    keyboard: Optional[UIKeyboard] = None
    parse_mode: str = "HTML"
    disable_preview: bool = True


class UIComponentsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ UI"""
        self.templates = {}
        self.default_styles = {
            'emoji_map': {
                ButtonStyle.PRIMARY: "üîµ",
                ButtonStyle.SUCCESS: "‚úÖ", 
                ButtonStyle.WARNING: "‚ö†Ô∏è",
                ButtonStyle.DANGER: "‚ùå",
                ButtonStyle.INFO: "‚ÑπÔ∏è",
                ButtonStyle.SETTINGS: "‚öôÔ∏è",
                ButtonStyle.BACK: "‚óÄÔ∏è",
                ButtonStyle.FORWARD: "‚ñ∂Ô∏è",
                ButtonStyle.HOME: "üè†",
                ButtonStyle.REFRESH: "üîÑ",
                ButtonStyle.CLOSE: "‚ùå"
            },
            'message_icons': {
                MessageType.INFO: "‚ÑπÔ∏è",
                MessageType.SUCCESS: "‚úÖ",
                MessageType.WARNING: "‚ö†Ô∏è", 
                MessageType.ERROR: "‚ùå",
                MessageType.LOADING: "‚è≥",
                MessageType.QUESTION: "‚ùì"
            }
        }

    def create_button(self, 
                     text: str,
                     callback_data: str = "",
                     url: Optional[str] = None,
                     style: ButtonStyle = ButtonStyle.PRIMARY,
                     enabled: bool = True) -> UIButton:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            callback_data: –î–∞–Ω—ñ –¥–ª—è callback
            url: URL –¥–ª—è –∫–Ω–æ–ø–∫–∏-–ø–æ—Å–∏–ª–∞–Ω–Ω—è
            style: –°—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
            enabled: –ß–∏ –∞–∫—Ç–∏–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞
            
        Returns:
            UIButton: –°—Ç–≤–æ—Ä–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
        """
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ –¥–æ —Ç–µ–∫—Å—Ç—É
        emoji = self.default_styles['emoji_map'].get(style, "")
        if emoji and not text.startswith(emoji):
            text = f"{emoji} {text}"
            
        return UIButton(
            text=text,
            callback_data=callback_data,
            url=url,
            style=style,
            enabled=enabled
        )

    def create_keyboard(self, 
                       buttons: List[UIButton],
                       inline: bool = True,
                       columns: int = 2,
                       one_time: bool = False) -> UIKeyboard:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
            inline: –Ü–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
            columns: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫
            one_time: –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
            
        Returns:
            UIKeyboard: –°—Ç–≤–æ—Ä–µ–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        """
        # –†–æ–∑–ø–æ–¥—ñ–ª –∫–Ω–æ–ø–æ–∫ –ø–æ —Ä—è–¥–∫–∞—Ö
        for i, button in enumerate(buttons):
            button.row = i // columns
            
        return UIKeyboard(
            buttons=buttons,
            inline=inline,
            one_time=one_time
        )

    def create_pagination_keyboard(self,
                                 current_page: int,
                                 total_pages: int,
                                 callback_prefix: str = "page",
                                 additional_buttons: List[UIButton] = None) -> UIKeyboard:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
        
        Args:
            current_page: –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            total_pages: –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
            callback_prefix: –ü—Ä–µ—Ñ—ñ–∫—Å –¥–ª—è callback –¥–∞–Ω–∏—Ö
            additional_buttons: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
            
        Returns:
            UIKeyboard: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
        """
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if current_page > 1:
            buttons.append(self.create_button(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                f"{callback_prefix}_{current_page - 1}",
                style=ButtonStyle.BACK
            ))
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        page_info = f"{current_page}/{total_pages}"
        buttons.append(self.create_button(
            page_info,
            f"{callback_prefix}_info",
            style=ButtonStyle.INFO,
            enabled=False
        ))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if current_page < total_pages:
            buttons.append(self.create_button(
                "–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
                f"{callback_prefix}_{current_page + 1}",
                style=ButtonStyle.FORWARD
            ))
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
        if additional_buttons:
            buttons.extend(additional_buttons)
            
        return self.create_keyboard(buttons, columns=3)

    def create_confirmation_keyboard(self,
                                   confirm_callback: str,
                                   cancel_callback: str = "cancel",
                                   confirm_text: str = "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
                                   cancel_text: str = "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏") -> UIKeyboard:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        
        Args:
            confirm_callback: Callback –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            cancel_callback: Callback –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
            confirm_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            cancel_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
            
        Returns:
            UIKeyboard: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        """
        buttons = [
            self.create_button(confirm_text, confirm_callback, style=ButtonStyle.SUCCESS),
            self.create_button(cancel_text, cancel_callback, style=ButtonStyle.DANGER)
        ]
        
        return self.create_keyboard(buttons, columns=2)

    def create_menu_keyboard(self, 
                           menu_items: Dict[str, str],
                           back_callback: str = "back",
                           columns: int = 2) -> UIKeyboard:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é
        
        Args:
            menu_items: –°–ª–æ–≤–Ω–∏–∫ –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é {–Ω–∞–∑–≤–∞: callback}
            back_callback: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            columns: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫
            
        Returns:
            UIKeyboard: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–µ–Ω—é
        """
        buttons = []
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é
        for name, callback in menu_items.items():
            buttons.append(self.create_button(name, callback))
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if back_callback:
            buttons.append(self.create_button(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                back_callback,
                style=ButtonStyle.BACK
            ))
        
        return self.create_keyboard(buttons, columns=columns)

    def format_message(self,
                      text: str,
                      message_type: MessageType = MessageType.INFO,
                      title: Optional[str] = None,
                      data: Optional[Dict[str, Any]] = None,
                      footer: Optional[str] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        
        Args:
            text: –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
            message_type: –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
            data: –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            footer: –ù–∏–∂–Ω—ñ–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
            
        Returns:
            str: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        """
        # –Ü–∫–æ–Ω–∫–∞ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        icon = self.default_styles['message_icons'].get(message_type, "")
        
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if title:
            parts.append(f"<b>{icon} {title}</b>\n")
        elif icon:
            parts.append(f"{icon} ")
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
        parts.append(text)
        
        # –î–∞–Ω—ñ
        if data:
            parts.append("\n\nüìä <b>–î–∞–Ω—ñ:</b>")
            for key, value in data.items():
                parts.append(f"‚Ä¢ <b>{key}:</b> {value}")
        
        # –ù–∏–∂–Ω—ñ–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
        if footer:
            parts.append(f"\n\n<i>{footer}</i>")
        
        return "".join(parts)

    def format_list(self,
                   items: List[Any],
                   title: str = "–°–ø–∏—Å–æ–∫",
                   item_formatter: Callable[[Any], str] = str,
                   max_items: int = 10,
                   numbered: bool = True) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
        
        Args:
            items: –ï–ª–µ–º–µ–Ω—Ç–∏ —Å–ø–∏—Å–∫—É
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫—É
            item_formatter: –§—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            max_items: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            numbered: –ù—É–º–µ—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
            
        Returns:
            str: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫
        """
        if not items:
            return f"<b>{title}</b>\n\n<i>–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</i>"
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        display_items = items[:max_items]
        
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
        lines = [f"<b>{title}</b> ({len(items)} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)\n"]
        
        for i, item in enumerate(display_items, 1):
            formatted_item = item_formatter(item)
            if numbered:
                lines.append(f"{i}. {formatted_item}")
            else:
                lines.append(f"‚Ä¢ {formatted_item}")
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–±—Ä—ñ–∑–∞–Ω–Ω—è
        if len(items) > max_items:
            lines.append(f"\n<i>... —Ç–∞ —â–µ {len(items) - max_items} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤</i>")
        
        return "\n".join(lines)

    def format_stats(self, 
                    stats: Dict[str, Any],
                    title: str = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") -> str:
        """
        –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            stats: –°–ª–æ–≤–Ω–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
            
        Returns:
            str: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        if not stats:
            return f"<b>{title}</b>\n\n<i>–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö</i>"
        
        lines = [f"üìä <b>{title}</b>\n"]
        
        for key, value in stats.items():
            # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è
            if isinstance(value, (int, float)):
                if value >= 1000000:
                    formatted_value = f"{value/1000000:.1f}M"
                elif value >= 1000:
                    formatted_value = f"{value/1000:.1f}K"
                else:
                    formatted_value = str(value)
            else:
                formatted_value = str(value)
            
            lines.append(f"‚Ä¢ <b>{key}:</b> {formatted_value}")
        
        return "\n".join(lines)

    def format_progress_bar(self,
                          current: int,
                          total: int,
                          width: int = 10,
                          filled_char: str = "‚ñà",
                          empty_char: str = "‚ñë") -> str:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É
        
        Args:
            current: –ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            total: –ó–∞–≥–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            width: –®–∏—Ä–∏–Ω–∞ –±–∞—Ä—É
            filled_char: –°–∏–º–≤–æ–ª –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
            empty_char: –°–∏–º–≤–æ–ª –ø–æ—Ä–æ–∂–Ω–µ—á—ñ
            
        Returns:
            str: –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        """
        if total == 0:
            return f"{empty_char * width} 0%"
        
        percentage = min(100, (current / total) * 100)
        filled_width = int((percentage / 100) * width)
        empty_width = width - filled_width
        
        bar = filled_char * filled_width + empty_char * empty_width
        return f"{bar} {percentage:.1f}%"

    def build_aiogram_keyboard(self, ui_keyboard: UIKeyboard) -> Union[InlineKeyboardMarkup, ReplyKeyboardMarkup]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è UIKeyboard –≤ aiogram –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        
        Args:
            ui_keyboard: UI –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
            
        Returns:
            Aiogram –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        """
        try:
            if ui_keyboard.inline:
                builder = InlineKeyboardBuilder()
                
                for button in ui_keyboard.buttons:
                    if not button.enabled:
                        continue
                        
                    if button.url:
                        builder.button(text=button.text, url=button.url)
                    else:
                        builder.button(text=button.text, callback_data=button.callback_data)
                
                # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ —Ä—è–¥–∫–∞—Ö
                rows = {}
                for button in ui_keyboard.buttons:
                    if button.enabled:
                        row = button.row
                        if row not in rows:
                            rows[row] = 0
                        rows[row] += 1
                
                if rows:
                    builder.adjust(*rows.values())
                
                return builder.as_markup()
            else:
                builder = ReplyKeyboardBuilder()
                
                for button in ui_keyboard.buttons:
                    if button.enabled:
                        builder.button(text=button.text)
                
                return builder.as_markup(
                    one_time_keyboard=ui_keyboard.one_time,
                    resize_keyboard=ui_keyboard.resize,
                    selective=ui_keyboard.selective
                )
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è aiogram –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏: {e}")
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
            return InlineKeyboardMarkup(inline_keyboard=[])

    def create_admin_keyboard(self, user_is_admin: bool = False) -> UIKeyboard:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        
        Args:
            user_is_admin: –ß–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            
        Returns:
            UIKeyboard: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        """
        if not user_is_admin:
            return self.create_keyboard([])
        
        buttons = [
            self.create_button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats", ButtonStyle.INFO),
            self.create_button("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", "admin_users", ButtonStyle.INFO),
            self.create_button("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "admin_settings", ButtonStyle.SETTINGS),
            self.create_button("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", "admin_reload", ButtonStyle.WARNING),
            self.create_button("üíæ –ë–µ–∫–∞–ø", "admin_backup", ButtonStyle.SUCCESS),
            self.create_button("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main_menu", ButtonStyle.HOME)
        ]
        
        return self.create_keyboard(buttons, columns=2)

    async def get_health_status(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–¥–æ—Ä–æ–≤'—è –º–æ–¥—É–ª—è"""
        return {
            'status': 'healthy',
            'templates_count': len(self.templates),
            'last_check': datetime.now().isoformat()
        }
