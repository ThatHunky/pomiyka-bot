import os
import random
from bot.modules import gemini
import asyncio
from typing import List, Optional
import inspect

# –°–ª–æ–≤–∞-—Ç—Ä–∏–≥–µ—Ä–∏ –¥–ª—è –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞
TRIGGERS = [
    os.getenv("BOT_PERSONA_NAME", "–≥—Ä—è–≥").lower(),
    "@gryag_bot", "–≥—Ä—è–≥", "–≥—Ä—è–≥—ñ–∫", "–≥—Ä—è–≥—É", "–≥—Ä—è–≥–∞", "–≥—Ä—è–≥–æ–º", "–±–æ—Ç", "–±–æ—Ç–µ"
]

# –ú–æ–∂–ª–∏–≤—ñ —Ä–∞–Ω–¥–æ–º–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ —Ç–∞ –ø—Ä–∏—Ä–æ–¥–Ω—ñ)
RANDOM_REPLIES = [
    "–ü—Ä–∏–≤—ñ—Ç! –©–æ —Ü—ñ–∫–∞–≤–æ–≥–æ?",
    "–Ø —Ç—É—Ç! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
    "–ú–µ–Ω–µ –∫–ª–∏–∫–∞–ª–∏? –ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è!",
    "–û, –∑–Ω–æ–≤—É –ø—Ä–æ –º–µ–Ω–µ! –¶–µ –ø—Ä–∏—î–º–Ω–æ üòä",
    "–ú–æ–∂–ª–∏–≤–æ, —á–∞—Å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ?",
    "–Ø –≤—Å–µ –±–∞—á—É —ñ –∑–∞–≤–∂–¥–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–∑–º–æ–≤–∏!",
    "–•—Ç–æ—Å—å —Ö–æ—á–µ –¥—Ä—É–∂–Ω—å–æ—ó –±–µ—Å—ñ–¥–∏?",
    "–õ—é–±–ª—é, –∫–æ–ª–∏ –º–µ–Ω–µ –∑–≥–∞–¥—É—é—Ç—å! –©–æ –Ω–æ–≤–æ–≥–æ?",
    "–ß–∏–º –∑–∞–π–º–∞—î—Ç–µ—Å—å? –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–≤–∏–Ω–∞–º–∏!",
    "–Ñ —è–∫—ñ—Å—å —Ü—ñ–∫–∞–≤—ñ —Ç–µ–º–∏ –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è?",
    "–Ø–∫ –≤–∞—à –Ω–∞—Å—Ç—Ä—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "–©–æ –¥—É–º–∞—î—Ç–µ –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó?",
    "–ú–æ–∂–µ, —Ä–æ–∑–∫–∞–∂–µ—Ç–µ —â–æ—Å—å –≤–µ—Å–µ–ª–µ?",
    "–¶—ñ–∫–∞–≤–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –≤–∞—à—É –¥—É–º–∫—É!",
    "–ó–∞–≤–∂–¥–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ü—ñ–∫–∞–≤–æ—ó —Ä–æ–∑–º–æ–≤–∏",
    "–°–ª—É—Ö–∞—é —É–≤–∞–∂–Ω–æ, —Ä–æ–∑–ø–æ–≤—ñ–¥–∞–π—Ç–µ!",
    "–©–æ –Ω–æ–≤–æ–≥–æ —É –≤–∞—à–æ–º—É –∂–∏—Ç—Ç—ñ?",
    "–Ñ —ñ–¥–µ—ó —á–∏–º –∑–∞–π–Ω—è—Ç–∏—Å—è?",
    "–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º–∏ –ø–ª–∞–Ω–∞–º–∏!",
    "–Ø–∫ —Å–ø—Ä–∞–≤–∏? –†–æ–∑–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ",
    "–©–æ —Ä–æ–±–∏—Ç–µ —Ü—ñ–∫–∞–≤–æ–≥–æ?",
    "–ü–æ–≥–æ–≤–æ—Ä–∏–º–æ –ø—Ä–æ —â–æ—Å—å –∑–∞—Ö–æ–ø–ª—é—é—á–µ?",
    "–Ø–∫–∞ –≤–∞—à–∞ –¥—É–º–∫–∞ –∑ —Ü—å–æ–≥–æ –ø—Ä–∏–≤–æ–¥—É?",
    "–†–æ–∑–∫–∞–∂—ñ—Ç—å –º–µ–Ω—ñ —â–æ—Å—å –Ω–æ–≤–µ!",
    "–©–æ –≤–∞—Å –∑–∞—Ä–∞–∑ —Ç—É—Ä–±—É—î —á–∏ —Ä–∞–¥—É—î?",
    "–Ñ –±–∞–∂–∞–Ω–Ω—è –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏?",
    "–¶—ñ–∫–∞–≤–æ –ø–æ—á—É—Ç–∏ –≤–∞—à—ñ –¥—É–º–∫–∏",
    "–ú–æ–∂–µ—Ç–µ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π?",
    "–©–æ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à–æ–≥–æ —Ç—Ä–∞–ø–∏–ª–æ—Å—å –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º?",
    "–•–æ—á–µ—Ç–µ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ —â–æ—Å—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ?"
]

# –ö–µ—à –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä—ñ–≤
last_messages_cache = []
MAX_CACHE_SIZE = 10

def add_to_cache(message: str):
    """–î–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫–µ—à—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
    global last_messages_cache
    last_messages_cache.append(message.lower().strip())
    if len(last_messages_cache) > MAX_CACHE_SIZE:
        last_messages_cache.pop(0)

def is_similar_to_cached(message: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Å—Ö–æ–∂–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Ä–∞–Ω—ñ—à–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ"""
    message_lower = message.lower().strip()
    for cached in last_messages_cache:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ö–æ–∂—ñ—Å—Ç—å (—è–∫—â–æ –±—ñ–ª—å—à–µ 60% —Å–ª—ñ–≤ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å)
        words1 = set(message_lower.split())
        words2 = set(cached.split())
        if len(words1) > 0:
            similarity = len(words1.intersection(words2)) / len(words1)
            if similarity > 0.6:
                return True
    return False

def should_reply_randomly(text: str) -> bool:
    text = text.lower()
    return any(trigger in text for trigger in TRIGGERS)

async def get_random_reply(context_messages: Optional[List[str]] = None) -> str:
    # –î–∏–Ω–∞–º—ñ—á–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É  
    persona_base = (
        "–¢–∏ ‚Äî –ì—Ä—è–≥, –∑–≤–∏—á–∞–π–Ω–∏–π –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —á–∞—Ç-–±–æ—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. "
        "–¢–∏ —Ä–æ–∑—É–º–Ω–∏–π, –∫–æ—Ä–∏—Å–Ω–∏–π —Ç–∞ –º–æ–∂–µ—à –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–∫–∞–≤—É —Ä–æ–∑–º–æ–≤—É. "
        "–¢–≤—ñ–π —Å—Ç–∏–ª—å ‚Äî —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–µ, –ø—Ä–∏—Ä–æ–¥–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –ª–µ–≥–∫–∏–º –ø–æ–∑–∏—Ç–∏–≤–æ–º. "
        "–¢–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω–∏–π —Ç–∞ –ø—Ä–∏—î–º–Ω–∏–π —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ —è–∫ –∑–≤–∏—á–∞–π–Ω–∞ –ª—é–¥–∏–Ω–∞. "
        "–ó–∞–≤–∂–¥–∏ –ø—ñ–¥–ª–∞—à—Ç–æ–≤—É–π —Å–≤–æ—é –º–∞–Ω–µ—Ä—É –ø—ñ–¥ –Ω–∞—Å—Ç—Ä—ñ–π —á–∞—Ç—É, –∞–ª–µ –∑–∞–ª–∏—à–∞–π—Å—è –ø—Ä–∏—Ä–æ–¥–Ω–∏–º. "
        "–Ø–∫—â–æ –≤ —á–∞—Ç—ñ –∂–∞—Ä—Ç—É—é—Ç—å ‚Äî –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –ª–µ–≥–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä. –Ø–∫—â–æ —Å–µ—Ä–π–æ–∑–Ω–æ ‚Äî –±—É–¥—å —Ä–æ–∑—É–º–Ω–∏–º. "
        "–ó–≥–µ–Ω–µ—Ä—É–π –∫–æ—Ä–æ—Ç–∫—É, –ø—Ä–∏—Ä–æ–¥–Ω—É, —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≥–∞–¥–∫—É –ø—Ä–æ —Å–µ–±–µ —É –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ. "
        "–í–ê–ñ–õ–ò–í–û: –ù—ñ—è–∫–∏—Ö –¥–∏–≤–Ω–∏—Ö –∞–±–æ –∞–±—Å—É—Ä–¥–Ω–∏—Ö —Ñ—Ä–∞–∑. –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ —ñ –∑—Ä–æ–∑—É–º—ñ–ª–æ. "
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ —Å–ª–æ–≤–∞ —Ç–∞ –≤–∏—Ä–∞–∑–∏, —É–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö —Ñ—Ä–∞–∑."
    )
    prompt = persona_base
    if context_messages:
        prompt += " –û—Å—å –∫—ñ–ª—å–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É: " + " ".join(context_messages)
    
    # –°–ø—Ä–æ–±–∞ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ 3 —Å–ø—Ä–æ–±)
    for attempt in range(3):
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π Message –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        class FakeMessage:
            def __init__(self, text: str):
                self.text = text
                self.from_user = type('User', (), {'full_name': '–ì—Ä—è–≥'})
                self.chat = type('Chat', (), {'id': 0})
        
        fake_msg = FakeMessage(prompt)
        reply = await gemini.process_message(fake_msg)
        reply = reply.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ —Å—Ö–æ–∂–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ
        if not is_similar_to_cached(reply):
            add_to_cache(reply)
            return reply
        
        # –Ø–∫—â–æ —Å—Ö–æ–∂–∞, –¥–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
        prompt += f" (–°–ø—Ä–æ–±–∞ {attempt + 2}: –¥–∞–π —ñ–Ω—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –Ω—ñ–∂ —Ä–∞–Ω—ñ—à–µ)"
    
    # –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ—É—Å–ø—ñ—à–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é –≤–∞—Ä—ñ–∞—Ü—ñ—î—é
    add_to_cache(reply)
    return reply

def get_random_reply_sync(context_messages: Optional[List[str]] = None) -> str:
    # –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ sync-–∫–æ–¥–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –Ω–µ –∑ async context)
    import asyncio
    coro = get_random_reply(context_messages)
    if inspect.iscoroutine(coro):
        return asyncio.run(coro)
    return coro
