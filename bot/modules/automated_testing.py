"""
–§–∞–∑–∞ 2: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ CI/CD
"""

import os
import asyncio
import logging
import json
from typing import Dict, List, Any, Optional
from datetime import datetime
import subprocess
import sys

logger = logging.getLogger(__name__)

class AutomatedTester:
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self):
        self.test_results: List[Dict[str, Any]] = []
        self.test_summary = {
            'total': 0,
            'passed': 0,
            'failed': 0,
            'skipped': 0
        }
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤...")
        
        # –¢–µ—Å—Ç–∏ –º–æ–¥—É–ª—ñ–≤
        await self._test_modules()
        await self._test_database_connections()
        await self._test_api_integrations()
        await self._test_security()
        await self._test_performance()
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        self._generate_report()
        return self.test_summary
    
    async def _test_modules(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤ –±–æ—Ç–∞"""
        print("üì¶ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤...")
        
        modules_to_test = [
            'bot.modules.context_adapter',
            'bot.modules.gemini_cache',
            'bot.modules.config_validator',
            'bot.modules.performance_monitor',
            'bot.modules.security_manager',
            'bot.modules.web_dashboard'
        ]
        
        for module_name in modules_to_test:
            try:
                __import__(module_name)
                self._add_test_result(f"Import {module_name}", True, "Module imported successfully")
            except Exception as e:
                self._add_test_result(f"Import {module_name}", False, str(e))
    
    async def _test_database_connections(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –¥–æ –ë–î"""
        print("üíæ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ë–î...")
        
        # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î
        try:
            from bot.modules.context_adapter import get_context_adapter
            adapter = get_context_adapter()
            adapter.init_db()
            self._add_test_result("SQLite DB Connection", True, "Connected")
        except Exception as e:
            self._add_test_result("SQLite DB Connection", False, str(e))
        
        # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î
        try:
            from bot.modules.context_async import AsyncContextManager
            manager = AsyncContextManager()
            await manager.initialize()
            connection_ok = await manager.test_connection()
            self._add_test_result("Async DB Connection", connection_ok, 
                                "Connected" if connection_ok else "Failed to connect")
        except Exception as e:
            self._add_test_result("Async DB Connection", False, str(e))
    
    async def _test_api_integrations(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π"""
        print("üåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API...")
        
        # –¢–µ—Å—Ç Gemini API (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É)
        try:
            api_key = os.getenv('GEMINI_API_KEY')
            if api_key and len(api_key) > 20:
                self._add_test_result("Gemini API Key", True, "Key configured")
            else:
                self._add_test_result("Gemini API Key", False, "Key not configured or too short")
        except Exception as e:
            self._add_test_result("Gemini API Key", False, str(e))
        
        # –¢–µ—Å—Ç Telegram Bot API
        try:
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            if bot_token and ':' in bot_token and len(bot_token) > 30:
                self._add_test_result("Telegram Bot Token", True, "Token configured")
            else:
                self._add_test_result("Telegram Bot Token", False, "Token not configured or invalid format")
        except Exception as e:
            self._add_test_result("Telegram Bot Token", False, str(e))
    
    async def _test_security(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏"""
        print("üîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏...")
        
        try:
            from bot.modules.security_manager import security_manager, validate_message_security
            
            # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            safe_message = "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?"
            is_safe = validate_message_security(safe_message, 12345)
            self._add_test_result("Safe Message Validation", is_safe, "Safe message passed")
            
            # –¢–µ—Å—Ç –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            dangerous_message = "<script>alert('hack')</script>"
            is_dangerous = not validate_message_security(dangerous_message, 12345)
            self._add_test_result("Dangerous Message Detection", is_dangerous, 
                                "Dangerous message blocked" if is_dangerous else "Failed to block")
            
            # –¢–µ—Å—Ç rate limiting
            rate_ok = security_manager.rate_limit_check(12345)
            self._add_test_result("Rate Limiting", True, f"Rate limit check: {rate_ok}")
            
        except Exception as e:
            self._add_test_result("Security Tests", False, str(e))
    
    async def _test_performance(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        print("‚ö° –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")
        
        try:
            from bot.modules.performance_monitor import PerformanceMonitor
            
            monitor = PerformanceMonitor()
            
            # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
            stats = monitor.get_system_stats()
            self._add_test_result("System Metrics", True, f"CPU/Memory metrics available")
            
            # –¢–µ—Å—Ç health check
            health = monitor.health_check()
            is_healthy = health.get('status') == 'healthy'
            self._add_test_result("Health Check", is_healthy, f"Status: {health.get('status')}")
            
        except Exception as e:
            self._add_test_result("Performance Tests", False, str(e))
    
    def _add_test_result(self, test_name: str, passed: bool, details: str):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–µ—Å—Ç—É"""
        self.test_results.append({
            'name': test_name,
            'passed': passed,
            'details': details,
            'timestamp': datetime.now().isoformat()
        })
        
        self.test_summary['total'] += 1
        if passed:
            self.test_summary['passed'] += 1
            print(f"‚úÖ {test_name}")
        else:
            self.test_summary['failed'] += 1
            print(f"‚ùå {test_name}: {details}")
    
    def _generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
        print(f"   –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: {self.test_summary['total']}")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {self.test_summary['passed']}")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.test_summary['failed']}")
        print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.test_summary['skipped']}")
        
        success_rate = (self.test_summary['passed'] / self.test_summary['total']) * 100 if self.test_summary['total'] > 0 else 0
        print(f"   –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
        report_data = {
            'summary': self.test_summary,
            'results': self.test_results,
            'timestamp': datetime.now().isoformat()
        }
        
        os.makedirs('reports', exist_ok=True)
        report_file = f"reports/test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            print(f"üìÑ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {report_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç: {e}")

class CIPipeline:
    """Continuous Integration –ø–∞–π–ø–ª–∞–π–Ω"""
    
    def __init__(self):
        self.pipeline_steps = [
            'lint_check',
            'type_check',
            'security_scan',
            'unit_tests',
            'integration_tests',
            'performance_tests'
        ]
    
    async def run_pipeline(self) -> bool:
        """–ó–∞–ø—É—Å–∫ CI –ø–∞–π–ø–ª–∞–π–Ω—É"""
        print("üîÑ –ó–∞–ø—É—Å–∫ CI –ø–∞–π–ø–ª–∞–π–Ω—É...")
        
        results = {}
        overall_success = True
        
        for step in self.pipeline_steps:
            try:
                step_result = await self._run_step(step)
                results[step] = step_result
                if not step_result:
                    overall_success = False
                    print(f"‚ùå –ö—Ä–æ–∫ {step} –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è")
                else:
                    print(f"‚úÖ –ö—Ä–æ–∫ {step} –ø—Ä–æ–π—à–æ–≤")
            except Exception as e:
                print(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤ –∫—Ä–æ—Ü—ñ {step}: {e}")
                results[step] = False
                overall_success = False
        
        print(f"\nüéØ CI –ø–∞–π–ø–ª–∞–π–Ω {'–£–°–ü–Ü–®–ù–ò–ô' if overall_success else '–ü–†–û–í–ê–õ–ï–ù–ò–ô'}")
        return overall_success
    
    async def _run_step(self, step: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ–∫—Ä–µ–º–æ–≥–æ –∫—Ä–æ–∫—É –ø–∞–π–ø–ª–∞–π–Ω—É"""
        if step == 'lint_check':
            return self._run_flake8()
        elif step == 'type_check':
            return self._run_mypy()
        elif step == 'security_scan':
            return await self._run_security_scan()
        elif step == 'unit_tests':
            return self._run_pytest()
        elif step == 'integration_tests':
            return await self._run_integration_tests()
        elif step == 'performance_tests':
            return await self._run_performance_tests()
        
        return True
    
    def _run_flake8(self) -> bool:
        """–ó–∞–ø—É—Å–∫ flake8 –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∏–ª—é –∫–æ–¥—É"""
        try:
            result = subprocess.run(['flake8', 'bot/'], capture_output=True, text=True)
            return result.returncode == 0
        except FileNotFoundError:
            print("‚ö†Ô∏è  flake8 –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True  # –ù–µ –ø—Ä–æ–≤–∞–ª—é—î–º–æ, —è–∫—â–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    
    def _run_mypy(self) -> bool:
        """–ó–∞–ø—É—Å–∫ mypy –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∏–ø—ñ–≤"""
        try:
            result = subprocess.run(['mypy', 'bot/'], capture_output=True, text=True)
            return result.returncode == 0
        except FileNotFoundError:
            print("‚ö†Ô∏è  mypy –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
    
    async def _run_security_scan(self) -> bool:
        """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏"""
        try:
            from bot.modules.security_manager import security_manager
            
            # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –±–µ–∑–ø–µ–∫–∏
            test_messages = [
                "–ù–æ—Ä–º–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                "<script>alert('xss')</script>",
                "exec('malicious code')",
                "import os; os.system('rm -rf /')"
            ]
            
            dangerous_detected = 0
            for msg in test_messages[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–æ—Ä–º–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                is_safe, _ = security_manager.validate_message(msg, 12345)
                if not is_safe:
                    dangerous_detected += 1
            
            return dangerous_detected >= 2  # –ú–∞—î –≤–∏—è–≤–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        except Exception:
            return False
    
    def _run_pytest(self) -> bool:
        """–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç—ñ–≤"""
        try:
            result = subprocess.run(['python', '-m', 'pytest', 'tests/', '-v'], 
                                  capture_output=True, text=True)
            return result.returncode == 0
        except FileNotFoundError:
            print("‚ö†Ô∏è  pytest –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
    
    async def _run_integration_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤"""
        try:
            tester = AutomatedTester()
            result = await tester.run_all_tests()
            return result['failed'] == 0
        except Exception:
            return False
    
    async def _run_performance_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        try:
            from bot.modules.performance_monitor import PerformanceMonitor
            
            monitor = PerformanceMonitor()
            stats = monitor.get_system_stats()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞
            cpu_usage = stats.get('cpu_percent', 0)
            memory_usage = stats.get('memory_percent', 0)
            
            return cpu_usage < 90 and memory_usage < 90
        except Exception:
            return False

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
async def run_tests():
    """–®–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤"""
    tester = AutomatedTester()
    return await tester.run_all_tests()

async def run_ci():
    """–®–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ CI –ø–∞–π–ø–ª–∞–π–Ω—É"""
    pipeline = CIPipeline()
    return await pipeline.run_pipeline()

if __name__ == "__main__":
    # –ú–æ–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
    asyncio.run(run_tests())
