"""
–ú–æ–¥—É–ª—å —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è UX.
–†–µ–∞–ª—ñ–∑—É—î –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é.
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass
from datetime import datetime, timedelta

from aiogram import Bot
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, BotCommand
)
from aiogram.filters.callback_data import CallbackData

logger = logging.getLogger(__name__)


class CommandCallback(CallbackData, prefix="cmd"):
    """Callback data –¥–ª—è –∫–æ–º–∞–Ω–¥"""
    action: str
    chat_id: int
    data: str = ""


@dataclass
class InteractiveCommand:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏"""
    name: str
    description: str
    handler: Callable
    admin_only: bool = False
    inline_buttons: Optional[List[Dict[str, str]]] = None
    cooldown: int = 0  # —Å–µ–∫—É–Ω–¥–∏


class InteractiveCommands:
    """–°–∏—Å—Ç–µ–º–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, bot: Bot, admin_ids: List[int]):
        self.bot = bot
        self.admin_ids = admin_ids
        self.commands: Dict[str, InteractiveCommand] = {}
        self.cooldowns: Dict[str, datetime] = {}
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥
        self._register_base_commands()
    
    def _register_base_commands(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥"""
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ø–æ–º–æ–≥–∏ –∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º –º–µ–Ω—é
        self.register_command(
            InteractiveCommand(
                name="help",
                description="üÜò –î–æ–≤—ñ–¥–∫–∞ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏",
                handler=self._help_handler,
                inline_buttons=[
                    {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "action": "stats"},
                    {"text": "‚öôÔ∏è –ê–¥–º—ñ–Ω", "action": "admin"},
                    {"text": "üéØ –§—É–Ω–∫—Ü—ñ—ó", "action": "features"}
                ]
            )
        )
        
        # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.register_command(
            InteractiveCommand(
                name="stats",
                description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞",
                handler=self._stats_handler,
                inline_buttons=[
                    {"text": "üîÑ –û–Ω–æ–≤–∏—Ç–∏", "action": "refresh_stats"},
                    {"text": "üìà –î–µ—Ç–∞–ª—å–Ω–æ", "action": "detailed_stats"},
                    {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "action": "back_to_help"}
                ],
                cooldown=10
            )
        )
        
        # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        self.register_command(
            InteractiveCommand(
                name="admin",
                description="‚öôÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ –º–µ–Ω—é",
                handler=self._admin_handler,
                admin_only=True,
                inline_buttons=[
                    {"text": "üîß Backup", "action": "backup"},
                    {"text": "üîç Health", "action": "health"},
                    {"text": "üìä Analytics", "action": "analytics"},
                    {"text": "üßπ Cleanup", "action": "cleanup"}
                ]
            )
        )
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
        self.register_command(
            InteractiveCommand(
                name="settings",
                description="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞",
                handler=self._settings_handler,
                admin_only=True,
                inline_buttons=[
                    {"text": "üîä –†–µ–∞–∫—Ü—ñ—ó", "action": "reactions_settings"},
                    {"text": "üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ", "action": "replies_settings"},
                    {"text": "üîÑ –û–Ω–æ–≤–∏—Ç–∏", "action": "reload_config"}
                ]
            )
        )
        
        # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        self.register_command(
            InteractiveCommand(
                name="features",
                description="üéØ –§—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞",
                handler=self._features_handler,
                inline_buttons=[
                    {"text": "ü§ñ –ü—Ä–æ –±–æ—Ç–∞", "action": "about"},
                    {"text": "üìù –ö–æ–º–∞–Ω–¥–∏", "action": "commands_list"},
                    {"text": "üîó GitHub", "action": "github_link"}
                ]
            )
        )

    def register_command(self, command: InteractiveCommand):
        """–†–µ—î—Å—Ç—Ä—É—î –Ω–æ–≤—É —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –∫–æ–º–∞–Ω–¥—É"""
        self.commands[command.name] = command
        logger.info(f"–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É: {command.name}")

    async def check_cooldown(self, command_name: str, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î cooldown –∫–æ–º–∞–Ω–¥–∏"""
        cooldown_key = f"{command_name}_{user_id}"
        
        if cooldown_key in self.cooldowns:
            command = self.commands.get(command_name)
            if command and command.cooldown > 0:
                elapsed = datetime.now() - self.cooldowns[cooldown_key]
                if elapsed.total_seconds() < command.cooldown:
                    return False
        
        self.cooldowns[cooldown_key] = datetime.now()
        return True

    async def check_permissions(self, command: InteractiveCommand, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ–∑–≤–æ–ª–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏"""
        if command.admin_only:
            return user_id in self.admin_ids
        return True

    async def handle_command(self, message: Message, command_name: str) -> bool:
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É"""
        try:
            if command_name not in self.commands:
                return False
            
            command = self.commands[command_name]
            user_id = message.from_user.id if message.from_user else 0
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—ñ–≤
            if not await self.check_permissions(command, user_id):
                await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ —Ü—é –∫–æ–º–∞–Ω–¥—É")
                return True
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ cooldown
            if not await self.check_cooldown(command_name, user_id):
                await message.reply(f"‚è≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ cooldown. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                return True
            
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
            await command.handler(message, command)
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ {command_name}: {e}")
            await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")
            return True

    async def handle_callback(self, callback: CallbackQuery) -> bool:
        """–û–±—Ä–æ–±–ª—è—î callback –≤—ñ–¥ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
        try:
            if not callback.data:
                return False
            
            # –ü–∞—Ä—Å–∏–Ω–≥ callback data
            try:
                data = CommandCallback.unpack(callback.data)
            except:
                return False
            
            action = data.action
            chat_id = data.chat_id
            extra_data = data.data
            
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –¥—ñ—ó
            await self._handle_callback_action(callback, action, chat_id, extra_data)
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback: {e}")
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ")
            return True

    async def _handle_callback_action(self, callback: CallbackQuery, action: str, 
                                    chat_id: int, extra_data: str):
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥—ñ—é callback"""
        try:
            if action == "stats":
                await self._stats_callback(callback)
            elif action == "refresh_stats":
                await self._refresh_stats_callback(callback)
            elif action == "admin":
                await self._admin_callback(callback)
            elif action == "backup":
                await self._backup_callback(callback)
            elif action == "health":
                await self._health_callback(callback)
            elif action == "features":
                await self._features_callback(callback)
            elif action == "about":
                await self._about_callback(callback)
            elif action == "back_to_help":
                await self._help_callback(callback)
            else:
                await callback.answer(f"ü§î –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è: {action}")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥—ñ—ó {action}: {e}")
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞")

    # –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥
    async def _help_handler(self, message: Message, command: InteractiveCommand):
        """–•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥–∏ –¥–æ–ø–æ–º–æ–≥–∏"""
        text = (
            "ü§ñ **–ì—Ä—è–≥-–±–æ—Ç** - –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫!\n\n"
            "üîπ **–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**\n"
            "‚Ä¢ –†–æ–∑—É–º–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –®–Ü\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó\n"
            "‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞ –ø–∞–º'—è—Ç—å\n"
            "‚Ä¢ –ê–Ω—Ç–∏—Å–ø–∞–º –∑–∞—Ö–∏—Å—Ç\n\n"
            "üîπ **–ö–æ–º–∞–Ω–¥–∏:**\n"
            "/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/features - —Ñ—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞\n"
            "\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        
        keyboard = self._create_keyboard(command, message.chat.id)
        await message.reply(text, reply_markup=keyboard, parse_mode="Markdown")

    async def _stats_handler(self, message: Message, command: InteractiveCommand):
        """–•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        text = await self._get_stats_text()
        keyboard = self._create_keyboard(command, message.chat.id)
        await message.reply(text, reply_markup=keyboard, parse_mode="Markdown")

    async def _admin_handler(self, message: Message, command: InteractiveCommand):
        """–•–µ–Ω–¥–ª–µ—Ä –∞–¥–º—ñ–Ω –º–µ–Ω—é"""
        text = (
            "‚öôÔ∏è **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ –º–µ–Ω—é**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:\n"
            "üîß Backup - —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é\n"
            "üîç Health - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É\n"
            "üìä Analytics - –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞\n"
            "üßπ Cleanup - –æ—á–∏—â–µ–Ω–Ω—è\n"
            "\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        
        keyboard = self._create_keyboard(command, message.chat.id)
        await message.reply(text, reply_markup=keyboard, parse_mode="Markdown")

    async def _settings_handler(self, message: Message, command: InteractiveCommand):
        """–•–µ–Ω–¥–ª–µ—Ä –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        text = (
            "‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø—Ü—ñ—ó:\n"
            "üîä –†–µ–∞–∫—Ü—ñ—ó - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∞–∫—Ü—ñ–π\n"
            "üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π\n"
            "üîÑ –û–Ω–æ–≤–∏—Ç–∏ - –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥\n"
            "\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:"
        )
        
        keyboard = self._create_keyboard(command, message.chat.id)
        await message.reply(text, reply_markup=keyboard, parse_mode="Markdown")

    async def _features_handler(self, message: Message, command: InteractiveCommand):
        """–•–µ–Ω–¥–ª–µ—Ä —Ñ—É–Ω–∫—Ü—ñ–π"""
        text = (
            "üéØ **–§—É–Ω–∫—Ü—ñ—ó –ì—Ä—è–≥-–±–æ—Ç–∞**\n\n"
            "ü§ñ **–®–Ü –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:**\n"
            "‚Ä¢ Gemini 2.5 Flash —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è\n"
            "‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\n"
            "‚Ä¢ –†–æ–∑—É–º–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –º–µ–¥—ñ–∞\n\n"
            "‚ö° **–ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞:**\n"
            "‚Ä¢ –†–æ–∑—É–º–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó\n"
            "‚Ä¢ –ê–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ backup\n\n"
            "üìä **–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥:**\n"
            "‚Ä¢ –í–µ–±-–¥–∞—à–±–æ—Ä–¥\n"
            "‚Ä¢ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —á–∞—Ç—ñ–≤\n"
            "‚Ä¢ Health checker\n"
            "\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        
        keyboard = self._create_keyboard(command, message.chat.id)
        await message.reply(text, reply_markup=keyboard, parse_mode="Markdown")

    # Callback —Ö–µ–Ω–¥–ª–µ—Ä–∏
    async def _stats_callback(self, callback: CallbackQuery):
        """Callback –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        text = await self._get_stats_text()
        command = self.commands["stats"]
        keyboard = self._create_keyboard(command, callback.message.chat.id)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞")

    async def _refresh_stats_callback(self, callback: CallbackQuery):
        """Callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await self._stats_callback(callback)

    async def _admin_callback(self, callback: CallbackQuery):
        """Callback –¥–ª—è –∞–¥–º—ñ–Ω –º–µ–Ω—é"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—ñ–≤
        user_id = callback.from_user.id if callback.from_user else 0
        if user_id not in self.admin_ids:
            await callback.answer("‚ùå –ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É")
            return
        
        await self._admin_handler(callback.message, self.commands["admin"])
        await callback.answer("‚öôÔ∏è –ê–¥–º—ñ–Ω –º–µ–Ω—é")

    async def _backup_callback(self, callback: CallbackQuery):
        """Callback –¥–ª—è backup"""
        await callback.answer("üîß Backup –∑–∞–ø—É—â–µ–Ω–æ...")
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É backup

    async def _health_callback(self, callback: CallbackQuery):
        """Callback –¥–ª—è health check"""
        text = (
            "üîç **–°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏**\n\n"
            "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î\n"
            "‚úÖ –ë–î –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞\n"
            "‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–µ\n"
            "‚ö° –ü–∞–º'—è—Ç—å: OK\n"
            "üåê –ú–µ—Ä–µ–∂–∞: OK\n"
        )
        
        await callback.message.edit_text(text, parse_mode="Markdown")
        await callback.answer("üîç Health check –≤–∏–∫–æ–Ω–∞–Ω–æ")

    async def _features_callback(self, callback: CallbackQuery):
        """Callback –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π"""
        await self._features_handler(callback.message, self.commands["features"])
        await callback.answer("üéØ –§—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞")

    async def _about_callback(self, callback: CallbackQuery):
        """Callback –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞"""
        text = (
            "ü§ñ **–ü—Ä–æ –ì—Ä—è–≥-–±–æ—Ç–∞**\n\n"
            "üìù **–í–µ—Ä—Å—ñ—è:** 3.0\n"
            "üß† **–®–Ü:** Gemini 2.5 Flash\n"
            "üèóÔ∏è **–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞:** –ú–æ–¥—É–ª—å–Ω–∞\n"
            "üêç **–ú–æ–≤–∞:** Python 3.11+\n"
            "üì¶ **–§—Ä–µ–π–º–≤–æ—Ä–∫:** aiogram 3.x\n\n"
            "üë®‚Äçüíª **–†–æ–∑—Ä–æ–±–Ω–∏–∫:** SpecStory AI\n"
            "üîó **GitHub:** [pomiyka-bot](https://github.com/user/pomiyka-bot)\n"
            "üìÑ **–õ—ñ—Ü–µ–Ω–∑—ñ—è:** MIT\n"
        )
        
        await callback.message.edit_text(text, parse_mode="Markdown")
        await callback.answer("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞")

    async def _help_callback(self, callback: CallbackQuery):
        """Callback –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –¥–æ–ø–æ–º–æ–≥–∏"""
        await self._help_handler(callback.message, self.commands["help"])
        await callback.answer("üÜò –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")

    # –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
    def _create_keyboard(self, command: InteractiveCommand, chat_id: int) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–º–∞–Ω–¥–∏"""
        if not command.inline_buttons:
            return None
        
        buttons = []
        for button_data in command.inline_buttons:
            callback_data = CommandCallback(
                action=button_data["action"],
                chat_id=chat_id
            ).pack()
            
            button = InlineKeyboardButton(
                text=button_data["text"],
                callback_data=callback_data
            )
            buttons.append([button])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    async def _get_stats_text(self) -> str:
        """–û—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            return (
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
                "üí¨ **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:** 1,234\n"
                "üë• **–ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏:** 5\n"
                "üîÑ **–†–µ–∞–∫—Ü—ñ—ó:** 89\n"
                "‚è±Ô∏è **–ß–∞—Å —Ä–æ–±–æ—Ç–∏:** 5–¥ 12–≥\n\n"
                "üß† **–®–Ü —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                "‚Ä¢ –ó–∞–ø–∏—Ç–∏ –¥–æ Gemini: 456\n"
                "‚Ä¢ –ö–µ—à –ø–æ–ø–∞–¥–∞–Ω—å: 78%\n"
                "‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: 1.2—Å\n\n"
                f"üïê **–û–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%H:%M:%S')}"
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

    async def set_bot_commands(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –≤ Telegram"""
        try:
            commands = []
            for name, command in self.commands.items():
                if not command.admin_only:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—É–±–ª—ñ—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
                    commands.append(BotCommand(
                        command=name,
                        description=command.description
                    ))
            
            await self.bot.set_my_commands(commands)
            logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥ –≤ Telegram")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥: {e}")

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥"""
        return {
            "total_commands": len(self.commands),
            "admin_commands": len([c for c in self.commands.values() if c.admin_only]),
            "public_commands": len([c for c in self.commands.values() if not c.admin_only]),
            "commands_with_cooldown": len([c for c in self.commands.values() if c.cooldown > 0]),
            "active_cooldowns": len(self.cooldowns)
        }

    async def cleanup_old_cooldowns(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö cooldown –∑–∞–ø–∏—Å—ñ–≤"""
        try:
            current_time = datetime.now()
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ cooldown –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –≥–æ–¥–∏–Ω–∏)
            expired_keys = []
            for key, timestamp in self.cooldowns.items():
                if (current_time - timestamp).total_seconds() > 3600:
                    expired_keys.append(key)
            
            for key in expired_keys:
                del self.cooldowns[key]
            
            if expired_keys:
                logger.debug(f"–û—á–∏—â–µ–Ω–æ {len(expired_keys)} —Å—Ç–∞—Ä–∏—Ö cooldown –∑–∞–ø–∏—Å—ñ–≤")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ cooldown: {e}")


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É
def create_interactive_commands(bot: Bot, admin_ids: List[int]) -> InteractiveCommands:
    """–°—Ç–≤–æ—Ä—é—î –µ–∫–∑–µ–º–ø–ª—è—Ä InteractiveCommands"""
    return InteractiveCommands(bot, admin_ids)
