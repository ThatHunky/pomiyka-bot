"""
–§–∞–∑–∞ 2: –ë–µ–∑–ø–µ–∫–∞ —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
"""

# üîê –ú–û–î–£–õ–¨ –ë–ï–ó–ü–ï–ö–ò –¢–ê –í–ê–õ–Ü–î–ê–¶–Ü–á
import os
import re
import hashlib
import logging
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timedelta
import json

logger = logging.getLogger(__name__)

class SecurityManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–ø–µ–∫–∏ –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self):
        self.failed_attempts: Dict[int, List[datetime]] = {}
        self.blocked_users: Dict[int, datetime] = {}
        self.suspicious_patterns = [
            r'<script',
            r'javascript:',
            r'eval\(',
            r'exec\(',
            r'import\s+os',
            r'subprocess',
            r'__import__'
        ]
        
    def validate_message(self, message_text: str, user_id: int) -> Tuple[bool, str]:
        """
        –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –±–µ–∑–ø–µ–∫—É
        
        Returns:
            (is_safe, reason)
        """
        if not message_text:
            return True, "Empty message"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏
        for pattern in self.suspicious_patterns:
            if re.search(pattern, message_text, re.IGNORECASE):
                self._log_security_event(user_id, "suspicious_pattern", pattern)
                return False, f"–ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if len(message_text) > 10000:
            self._log_security_event(user_id, "message_too_long", len(message_text))
            return False, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–ø–æ–≤—Ç–æ—Ä–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
        if self._is_spam(message_text, user_id):
            return False, "–ü—ñ–¥–æ–∑—Ä–∞ –Ω–∞ —Å–ø–∞–º"
        
        return True, "Safe"
    
    def _log_security_event(self, user_id: int, event_type: str, details: Any):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –±–µ–∑–ø–µ–∫–∏"""
        logger.warning(f"Security event: {event_type} from user {user_id}: {details}")
        
    def _is_spam(self, message_text: str, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
        # –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ—Ç–µ–∫—Ü—ñ—ó —Å–ø–∞–º—É
        message_hash = hashlib.md5(message_text.encode()).hexdigest()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ç–∞–∫–µ –∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–∞–Ω—ñ—à–µ
        # (—Ç—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –∑ –ë–î, –ø–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞)
        return False
    
    def rate_limit_check(self, user_id: int, action_type: str = "message") -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ rate limiting
        
        Returns:
            True if action is allowed, False if rate limited
        """
        now = datetime.now()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
        if user_id in self.blocked_users:
            if now < self.blocked_users[user_id]:
                return False
            else:
                del self.blocked_users[user_id]
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å–ø—Ä–æ–±
        if user_id not in self.failed_attempts:
            self.failed_attempts[user_id] = []
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ —Å–ø—Ä–æ–±–∏ (—Å—Ç–∞—Ä—ñ—à—ñ –∑–∞ 1 —Ö–≤–∏–ª–∏–Ω—É)
        cutoff_time = now - timedelta(minutes=1)
        self.failed_attempts[user_id] = [
            attempt for attempt in self.failed_attempts[user_id] 
            if attempt > cutoff_time
        ]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
        if len(self.failed_attempts[user_id]) >= 10:  # 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ —Ö–≤–∏–ª–∏–Ω—É
            # –ë–ª–æ–∫—É—î–º–æ –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
            self.blocked_users[user_id] = now + timedelta(minutes=5)
            self._log_security_event(user_id, "rate_limited", len(self.failed_attempts[user_id]))
            return False
        
        # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å–ø—Ä–æ–±—É
        self.failed_attempts[user_id].append(now)
        return True
    
    def validate_admin_command(self, user_id: int, command: str) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            admin_id = int(os.getenv('ADMIN_ID', '0'))
            if admin_id == 0:
                logger.warning("ADMIN_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
                return False
            
            if user_id != admin_id:
                self._log_security_event(user_id, "unauthorized_admin_command", command)
                return False
            
            return True
        except ValueError:
            logger.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ADMIN_ID")
            return False
    
    def sanitize_input(self, text: str) -> str:
        """–°–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –≤–≤–æ–¥—É"""
        if not text:
            return ""
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        sanitized = re.sub(r'[<>"\']', '', text)
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
        if len(sanitized) > 1000:
            sanitized = sanitized[:1000] + "..."
        
        return sanitized.strip()
    
    def get_security_stats(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–ø–µ–∫–∏"""
        now = datetime.now()
        active_blocks = sum(
            1 for block_until in self.blocked_users.values() 
            if block_until > now
        )
        
        return {
            'blocked_users_count': active_blocks,
            'total_users_monitored': len(self.failed_attempts),
            'security_events_today': self._count_todays_events()
        }
    
    def _count_todays_events(self) -> int:
        """–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–¥—ñ–π –±–µ–∑–ø–µ–∫–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"""
        # –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∑ –ª–æ–≥—ñ–≤
        return 0

class InputValidator:
    """–í–∞–ª—ñ–¥–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –≤–≤–æ–¥—É"""
    
    @staticmethod
    def validate_chat_id(chat_id: Any) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è ID —á–∞—Ç—É"""
        try:
            chat_id_int = int(chat_id)
            return -1000000000000 <= chat_id_int <= 1000000000000
        except (ValueError, TypeError):
            return False
    
    @staticmethod
    def validate_user_id(user_id: Any) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user_id_int = int(user_id)
            return 1 <= user_id_int <= 10000000000
        except (ValueError, TypeError):
            return False
    
    @staticmethod
    def validate_filename(filename: str) -> bool:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É"""
        if not filename or len(filename) > 255:
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        dangerous_chars = ['..', '/', '\\', ':', '*', '?', '"', '<', '>', '|']
        return not any(char in filename for char in dangerous_chars)
    
    @staticmethod
    def validate_json_data(data: str, max_size: int = 10000) -> Tuple[bool, Optional[Dict]]:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è JSON –¥–∞–Ω–∏—Ö"""
        if len(data) > max_size:
            return False, None
        
        try:
            parsed = json.loads(data)
            return True, parsed
        except json.JSONDecodeError:
            return False, None

class ErrorHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    
    def __init__(self):
        self.error_counts: Dict[str, int] = {}
        self.last_errors: List[Tuple[datetime, str, str]] = []
    
    def handle_error(self, error: Exception, context: str = "") -> str:
        """
        –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º —Ç–∞ –∑–±–æ—Ä–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Returns:
            User-friendly error message
        """
        error_type = type(error).__name__
        error_message = str(error)
        
        # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        self.error_counts[error_type] = self.error_counts.get(error_type, 0) + 1
        
        # –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–º–∏–ª–æ–∫
        self.last_errors.append((datetime.now(), error_type, error_message))
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100 –ø–æ–º–∏–ª–æ–∫
        if len(self.last_errors) > 100:
            self.last_errors = self.last_errors[-100:]
        
        # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É
        logger.error(f"Error in {context}: {error_type}: {error_message}", exc_info=True)
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_messages = {
            'ConnectionError': '–¢–∏–º—á–∞—Å–æ–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
            'TimeoutError': '–û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–π–Ω—è–ª–∞ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
            'ValueError': '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.',
            'PermissionError': '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó.',
            'FileNotFoundError': '–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.',
            'KeyError': '–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ.',
        }
        
        return user_messages.get(error_type, '–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
    
    def get_error_stats(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫"""
        recent_errors = [
            error for timestamp, _, _ in self.last_errors
            if timestamp > datetime.now() - timedelta(hours=24)
        ]
        
        return {
            'total_errors': sum(self.error_counts.values()),
            'error_types': dict(self.error_counts),
            'recent_errors_24h': len(recent_errors),
            'last_error': self.last_errors[-1] if self.last_errors else None
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏
security_manager = SecurityManager()
input_validator = InputValidator()
error_handler = ErrorHandler()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
def validate_message_security(message_text: str, user_id: int) -> bool:
    """–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    is_safe, _ = security_manager.validate_message(message_text, user_id)
    return is_safe

def check_rate_limit(user_id: int) -> bool:
    """–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ rate limiting"""
    return security_manager.rate_limit_check(user_id)

def handle_bot_error(error: Exception, context: str = "") -> str:
    """–®–≤–∏–¥–∫–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏"""
    return error_handler.handle_error(error, context)
