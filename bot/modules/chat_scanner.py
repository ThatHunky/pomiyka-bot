# –ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
import json
import os
from aiogram import Bot
from aiogram.types import Message, Chat
from datetime import datetime
from bot.bot_config import CHAT_STATE_PATH, PERSONA, DB_PATH
from bot.modules.context_sqlite import save_message_obj
import asyncio
import logging

# –°—Ç–∞–Ω —Å–∫–∞–Ω–æ–≤–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤
def load_chat_states():
    if os.path.exists(CHAT_STATE_PATH):
        with open(CHAT_STATE_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_chat_states(states):
    os.makedirs(os.path.dirname(CHAT_STATE_PATH), exist_ok=True)
    with open(CHAT_STATE_PATH, "w", encoding="utf-8") as f:
        json.dump(states, f, ensure_ascii=False, indent=2)

def mark_chat_scanned(chat_id: int):
    states = load_chat_states()
    states[str(chat_id)] = {
        "scanned": True,
        "scan_date": datetime.now().isoformat(),
        "last_message_id": None
    }
    save_chat_states(states)

def is_chat_scanned(chat_id: int) -> bool:
    states = load_chat_states()
    return states.get(str(chat_id), {}).get("scanned", False)

def reset_chat_scan_state(chat_id: int):
    """–°–∫–∏–¥–∞—î —Å—Ç–∞–Ω —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —á–∞—Ç—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è"""
    states = load_chat_states()
    if str(chat_id) in states:
        del states[str(chat_id)]
        save_chat_states(states)
        logging.info(f"–°–∫–∏–Ω—É—Ç–æ —Å—Ç–∞–Ω —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è —á–∞—Ç—É {chat_id}")

async def auto_scan_chat_history(bot: Bot, chat_id: int):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫–∞–Ω—É—î —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É —Ç–∞ –¥–æ–¥–∞—î –≤ –±–∞–∑—É"""
    if not PERSONA["auto_scan_history"]:
        return
    
    if is_chat_scanned(chat_id):
        logging.info(f"–ß–∞—Ç {chat_id} –≤–∂–µ —Å–∫–∞–Ω–æ–≤–∞–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
        return
    
    try:
        logging.info(f"üîç –ü–æ—á–∏–Ω–∞—é —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É {chat_id}...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç
        chat = await bot.get_chat(chat_id)
        
        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —á–∞—Ç —è–∫ —Å–∫–∞–Ω–æ–≤–∞–Ω–∏–π –æ–¥—Ä–∞–∑—É (—â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏)
        mark_chat_scanned(chat_id)
        
        # –û—Å–∫—ñ–ª—å–∫–∏ Telegram API –æ–±–º–µ–∂—É—î –¥–æ—Å—Ç—É–ø –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó,
        # –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ —â–æ —á–∞—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏
        logging.info(f"‚úÖ –ß–∞—Ç {chat_id} ({chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∏'}) –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        logging.info(f"‚ÑπÔ∏è –ù–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞–≤–∞—Ç–∏—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —á–∞—Ç—É {chat_id}: {e}")

async def scan_on_join(bot: Bot, message: Message):
    """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏ –±–æ—Ç –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –Ω–æ–≤–æ–≥–æ —á–∞—Ç—É"""
    if message.chat.type in ["group", "supergroup"]:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤ —Ñ–æ–Ω—ñ
        asyncio.create_task(auto_scan_chat_history(bot, message.chat.id))

def import_telegram_history(json_path: str, chat_id: int):
    """–Ü–º–ø–æ—Ä—Ç—É—î —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –∑ JSON —Ñ–∞–π–ª—É Telegram Desktop"""
    try:
        with open(json_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        
        messages_imported = 0
        
        # –ü–∞—Ä—Å–∏–º–æ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É Telegram Desktop
        if "messages" in data:
            for msg in data["messages"]:
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                    text = ""
                    user = "Unknown"
                    timestamp = datetime.now().isoformat()
                    
                    # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    if isinstance(msg.get("text"), str):
                        text = msg["text"]
                    elif isinstance(msg.get("text"), list):
                        # –°–∫–ª–∞–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
                        text_parts = []
                        for part in msg["text"]:
                            if isinstance(part, str):
                                text_parts.append(part)
                            elif isinstance(part, dict) and "text" in part:
                                text_parts.append(part["text"])
                        text = "".join(text_parts)
                    
                    # –ú–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏
                    if msg.get("photo"):
                        text += " [—Ñ–æ—Ç–æ]"
                    if msg.get("sticker_emoji"):
                        text += f" [—Å—Ç—ñ–∫–µ—Ä: {msg['sticker_emoji']}]"
                    if msg.get("file"):
                        text += " [—Ñ–∞–π–ª]"
                    if msg.get("voice_message"):
                        text += " [–≥–æ–ª–æ—Å–æ–≤–µ]"
                    
                    # –ê–≤—Ç–æ—Ä
                    if "from" in msg:
                        user = msg["from"]
                    elif "actor" in msg:
                        user = msg["actor"]
                    
                    # –ß–∞—Å
                    if "date" in msg:
                        timestamp = msg["date"]
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
                    if text.strip():
                        save_message_obj(
                            chat_id=chat_id,
                            user=user,
                            text=text.strip(),
                            timestamp=timestamp
                        )
                        messages_imported += 1
                        
                except Exception as msg_error:
                    logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {msg_error}")
                    continue
        
        logging.info(f"‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {messages_imported} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ {json_path}")
        return messages_imported
        
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
        raise e

def get_chat_context_summary(chat_id: int) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–æ—Ç–∫–∏–π summary –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —á–∞—Ç—É"""
    from bot.modules.context_sqlite import get_context
    context = get_context(chat_id, limit=10)
    
    if not context:
        return "–ù–æ–≤–∏–π —á–∞—Ç –±–µ–∑ —ñ—Å—Ç–æ—Ä—ñ—ó"
    
    total_messages = len(context)
    recent_users = list(set([m.get("user", "Unknown") for m in context[-5:]]))
    
    return f"–Ü—Å—Ç–æ—Ä—ñ—è: {total_messages} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –∞–∫—Ç–∏–≤–Ω—ñ: {', '.join(recent_users[:3])}"
