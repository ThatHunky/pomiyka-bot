# –ú–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É —Å–∏—Ç—É–∞—Ü—ñ–π –≤ —á–∞—Ç—ñ
import re
import random
from datetime import datetime, timedelta
from collections import defaultdict
from bot.bot_config import PERSONA

# –ü–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–∏–ø—ñ–≤ —Ä–æ–∑–º–æ–≤
CONVERSATION_PATTERNS = {
    "—Ç–µ—Ö–Ω—ñ—á–Ω–∞_–¥–∏—Å–∫—É—Å—ñ—è": [
        r"(\w+)\s+(–∫–æ–¥|–ø—Ä–æ–≥—Ä–∞–º–∞|–∞–ª–≥–æ—Ä–∏—Ç–º|—Ñ—É–Ω–∫—Ü—ñ—è|–º–µ—Ç–æ–¥|–∫–ª–∞—Å|–∑–º—ñ–Ω–Ω–∞)",
        r"(–ø–æ–º–∏–ª–∫–∞|–±–∞–≥|–¥–µ–±–∞–≥|–ª–æ–≥–∏|–∫–æ–Ω—Å–æ–ª—å|—Ç–µ—Ä–º—ñ–Ω–∞–ª)",
        r"(—Å–µ—Ä–≤–µ—Ä|–±–∞–∑–∞\s+–¥–∞–Ω–∏—Ö|API|JSON|XML|HTTP)",
        r"(React|Python|JavaScript|Java|C\+\+|Node\.js|Django)",
        r"(git|github|–∫–æ–º–º—ñ—Ç|–ø—É—à|–º–µ—Ä–¥–∂|–±—Ä–∞–Ω—á)"
    ],
    "—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∞_—Ä–æ–∑–º–æ–≤–∞": [
        r"(—â–æ\s+—Ç–∞–∫–µ|–≤\s+—á–æ–º—É\s+—Å–µ–Ω—Å|—è–∫\s+—Ç–∏\s+–¥—É–º–∞—î—à|–Ω–∞\s+–º–æ—é\s+–¥—É–º–∫—É)",
        r"(–∂–∏—Ç—Ç—è|—Å–º–µ—Ä—Ç—å|–ª—é–±–æ–≤|—â–∞—Å—Ç—è|—Å–µ–Ω—Å|–º–µ—Ç–∞|–º—Ä—ñ—è)",
        r"(—á–æ–º—É\s+–ª—é–¥–∏|—â–æ\s+–æ–∑–Ω–∞—á–∞—î|—è–∫\s+–º–æ–∂–Ω–∞|—á–∏\s+–≤–∞—Ä—Ç–æ)",
        r"(—Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è|–ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è|–º–æ—Ä–∞–ª—å|–µ—Ç–∏–∫–∞|–¥—É—à–∞|—Ä–æ–∑—É–º)"
    ],
    "–∂–∞—Ä—Ç–∏_–º–µ–º—ñ": [
        r"(—Ö–∞—Ö–∞|–ª–æ–ª|üòÇ|ü§£|–ø—Ä–∏–∫–æ–ª|–∂–∞—Ä—Ç|—Å–º—ñ—à–Ω–æ)",
        r"(–º–µ–º|–≥—ñ—Ñ|—Å—Ç—ñ–∫–µ—Ä|–∫–∞—Ä—Ç–∏–Ω–∫–∞|–≤—ñ–¥–µ–æ)",
        r"(—Ç—Ä–æ–ª—ñ–Ω–≥|—Å–∞—Ä–∫–∞–∑–º|—ñ—Ä–æ–Ω—ñ—è)",
        r"(–æ—Ä—É|–ø–ª–∞—á—É\s+–≤—ñ–¥\s+—Å–º—ñ—Ö—É|–Ω–µ\s+–º–æ–∂—É|–∫–∞–ø–µ—Ü—å)"
    ],
    "–µ–º–æ—Ü—ñ–π–Ω–∞_—Ä–æ–∑–º–æ–≤–∞": [
        r"(üò¢|üò≠|üò°|üò§|üíî|üòç|ü•∞|üòò)",
        r"(—Å—É–º–Ω–æ|–≤–µ—Å–µ–ª–æ|–∑–ª–∏–π|—â–∞—Å–ª–∏–≤–∏–π|–∑–∞–∫–æ—Ö–∞–Ω–∏–π|—Ä–æ–∑—á–∞—Ä–æ–≤–∞–Ω–∏–π)",
        r"(–ø–µ—Ä–µ–∂–∏–≤–∞—é|—Ö–≤–∏–ª—é—é—Å—å|—Ä–∞–¥—ñ—é|–∑–ª—é—Å—å|–ø–ª–∞—á—É|—Å–º—ñ—é—Å—å)",
        r"(–≤—ñ–¥—á—É–≤–∞—é|–µ–º–æ—Ü—ñ—ó|–Ω–∞—Å—Ç—Ä—ñ–π|–ø–æ—á—É—Ç—Ç—è)"
    ],
    "–ø–æ–±—É—Ç–æ–≤–∞_—Ä–æ–∑–º–æ–≤–∞": [
        r"(—ó–∂–∞|—ó—Å—Ç–∏|–≥–æ—Ç—É–≤–∞—Ç–∏|–∫—É—Ö–Ω—è|–æ–±—ñ–¥|–≤–µ—á–µ—Ä—è|—Å–Ω—ñ–¥–∞–Ω–æ–∫)",
        r"(—Ä–æ–±–æ—Ç–∞|–Ω–∞–≤—á–∞–Ω–Ω—è|—É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç|—à–∫–æ–ª–∞|–∑–∞–≤–¥–∞–Ω–Ω—è|–ø—Ä–æ–µ–∫—Ç)",
        r"(–ø–æ–≥–æ–¥–∞|–¥–æ—â|—Å–æ–Ω—Ü–µ|—Å–Ω—ñ–≥|—Ç–µ–ø–ª–æ|—Ö–æ–ª–æ–¥–Ω–æ)",
        r"(–¥—ñ–º|–∫–≤–∞—Ä—Ç–∏—Ä–∞|—Å—ñ–º'—è|–¥—Ä—É–∑—ñ|–≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫|–ø–ª–∞–Ω–∏)"
    ],
    "–∫–æ–Ω—Ñ–ª—ñ–∫—Ç": [
        r"(–¥—É—Ä–µ–Ω—å|—ñ–¥—ñ–æ—Ç|–∫—Ä–µ—Ç–∏–Ω|–¥–µ–±—ñ–ª|–º—É–¥–∞–∫)",
        r"(–Ω–µ\s+–∑–≥–æ–¥–µ–Ω|—Ç–∏\s+–Ω–µ–ø—Ä–∞–≤–∏–π|—Ü–µ\s+—Ñ—ñ–≥–Ω—è|–ª–∞–π–Ω–æ)",
        r"(—Å–≤–∞—Ä–∫–∞|–∫–æ–Ω—Ñ–ª—ñ–∫—Ç|—Å—É–ø–µ—Ä–µ—á–∫–∞|–Ω–µ\s+—Ä–æ–∑—É–º—ñ—î—à)",
        r"(üò°|ü§¨|üëé|üí©|üñï)"
    ]
}

# –Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞—Å—Ç—Ä–æ—ó–≤ —á–∞—Ç—ñ–≤
chat_moods = defaultdict(list)
chat_topics = defaultdict(list)
user_patterns = defaultdict(lambda: defaultdict(int))

def analyze_message_context(message_text, chat_history):
    """–ê–Ω–∞–ª—ñ–∑—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –ø–æ–¥–∞–ª—å—à–∏–π —Ä–æ–∑–≤–∏—Ç–æ–∫ —Ä–æ–∑–º–æ–≤–∏"""
    if not message_text:
        return {"type": "unknown", "mood": "neutral", "prediction": "continue"}
    
    text = message_text.lower()
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ä–æ–∑–º–æ–≤–∏
    conversation_type = detect_conversation_type(text)
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –Ω–∞—Å—Ç—Ä—ñ–π
    mood = analyze_emotional_tone(text)
    
    # –ü–µ—Ä–µ–¥–±–∞—á–∞—î–º–æ —Ä–æ–∑–≤–∏—Ç–æ–∫ —Ä–æ–∑–º–æ–≤–∏
    prediction = predict_conversation_flow(text, chat_history, conversation_type)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞
    bot_engagement = calculate_bot_engagement_level(text, conversation_type, mood)
    
    return {
        "type": conversation_type,
        "mood": mood,
        "prediction": prediction,
        "engagement_level": bot_engagement,
        "should_intervene": should_bot_intervene(text, conversation_type, mood, chat_history),
        "suggested_tone": get_suggested_response_tone(conversation_type, mood),
        "context_keywords": extract_context_keywords(text)
    }

def detect_conversation_type(text: str) -> str:
    """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø —Ä–æ–∑–º–æ–≤–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–∞—Ç–µ—Ä–Ω—ñ–≤"""
    scores = {}
    
    for conv_type, patterns in CONVERSATION_PATTERNS.items():
        score = 0
        for pattern in patterns:
            matches = len(re.findall(pattern, text, re.IGNORECASE))
            score += matches
        scores[conv_type] = score
    
    if max(scores.values()) > 0:
        return max(scores, key=scores.get)
    
    return "–∑–∞–≥–∞–ª—å–Ω–∞_—Ä–æ–∑–º–æ–≤–∞"

def analyze_emotional_tone(text: str) -> str:
    """–ê–Ω–∞–ª—ñ–∑—É—î –µ–º–æ—Ü—ñ–π–Ω–∏–π —Ç–æ–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    # –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –µ–º–æ—Ü—ñ—ó
    positive_words = ["–∫—Ä—É—Ç–æ", "–∫–ª–∞—Å–Ω–æ", "—Å—É–ø–µ—Ä", "—á—É–¥–æ–≤–æ", "–≤–µ—Å–µ–ª–æ", "—Ä–∞–¥–∏–π", "—â–∞—Å–ª–∏–≤–∏–π", "‚ù§Ô∏è", "üòç", "üòä", "üëç", "üî•"]
    positive_score = sum(1 for word in positive_words if word in text.lower())
    
    # –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –µ–º–æ—Ü—ñ—ó
    negative_words = ["–ø–æ–≥–∞–Ω–æ", "—Å—É–º–Ω–æ", "–∑–ª–∏–π", "—Ä–æ–∑—á–∞—Ä–æ–≤–∞–Ω–∏–π", "–≥—ñ—Ä–∫–æ", "–ª–∞–π–Ω–æ", "üò¢", "üò≠", "üò°", "üëé", "üí©"]
    negative_score = sum(1 for word in negative_words if word in text.lower())
    
    # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ñ/–∑–∞–¥—É–º–ª–∏–≤—ñ
    thoughtful_words = ["–¥—É–º–∞—é", "–º–∞–±—É—Ç—å", "–º–æ–∂–ª–∏–≤–æ", "—Ü—ñ–∫–∞–≤–æ", "ü§î", "üßê"]
    thoughtful_score = sum(1 for word in thoughtful_words if word in text.lower())
    
    # –ó–±—É–¥–∂–µ–Ω—ñ/–µ–Ω–µ—Ä–≥—ñ–π–Ω—ñ
    excited_words = ["–æ–≥–æ", "–≤–∞—É", "–∫–∞–ø–µ—Ü—å", "–Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ", "ü§Ø", "‚ö°", "üéâ"]
    excited_score = sum(1 for word in excited_words if word in text.lower())
    
    scores = {
        "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π": positive_score,
        "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π": negative_score,
        "–∑–∞–¥—É–º–ª–∏–≤–∏–π": thoughtful_score,
        "–∑–±—É–¥–∂–µ–Ω–∏–π": excited_score
    }
    
    if max(scores.values()) > 0:
        return max(scores, key=scores.get)
    
    return "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"

def predict_conversation_flow(text: str, chat_history: List[Dict], conv_type: str) -> str:
    """–ü–µ—Ä–µ–¥–±–∞—á–∞—î –ø–æ–¥–∞–ª—å—à–∏–π —Ä–æ–∑–≤–∏—Ç–æ–∫ —Ä–æ–∑–º–æ–≤–∏"""
    text_lower = text.lower()
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    recent_messages = chat_history[-5:] if chat_history else []
    recent_text = " ".join([msg.get("text", "") for msg in recent_messages]).lower()
    
    # –Ø–∫—â–æ –±–∞–≥–∞—Ç–æ –ø–∏—Ç–∞–Ω—å - –æ—á—ñ–∫—É—î–º–æ –¥–∏—Å–∫—É—Å—ñ—é
    question_count = text_lower.count("?") + recent_text.count("?")
    if question_count > 2:
        return "–∞–∫—Ç–∏–≤–Ω–∞_–¥–∏—Å–∫—É—Å—ñ—è"
    
    # –Ø–∫—â–æ –∑–≥–∞–¥—É—î—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ —Ç–µ–º–∞ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ - —Ç–µ–º–∞ —Ä–æ–∑–≤–∏–≤–∞—î—Ç—å—Å—è
    if conv_type != "–∑–∞–≥–∞–ª—å–Ω–∞_—Ä–æ–∑–º–æ–≤–∞":
        return "—Ä–æ–∑–≤–∏—Ç–æ–∫_—Ç–µ–º–∏"
    
    # –ï–º–æ—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–ª–∏–∫–∞—é—Ç—å —Ä–µ–∞–∫—Ü—ñ—ó
    emotional_indicators = ["!", "üòÇ", "üò¢", "üò°", "–≤–∞—É", "–æ–≥–æ", "–∫–∞–ø–µ—Ü—å"]
    if any(indicator in text_lower for indicator in emotional_indicators):
        return "–µ–º–æ—Ü—ñ–π–Ω–∞_—Ä–µ–∞–∫—Ü—ñ—è"
    
    # –î–æ–≤–≥—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–ª–∏–∫–∞—é—Ç—å –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è
    if len(text) > 200:
        return "–¥–µ—Ç–∞–ª—å–Ω–µ_–æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è"
    
    # –ö–æ—Ä–æ—Ç–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - —Ä–æ–∑–º–æ–≤–∞ –∑–≥–∞—Å–∞—î
    if len(text) < 20 and not any(emoji in text for emoji in ["üòÇ", "‚ù§Ô∏è", "üëç"]):
        return "–∑–≥–∞—Å–∞–Ω–Ω—è"
    
    return "–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è"

def calculate_bot_engagement_level(text: str, conv_type: str, mood: str) -> int:
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ä—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞ (1-10)"""
    base_level = 3  # –ë–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å
    
    # –ó–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    bot_mentions = sum(1 for trigger in PERSONA["trigger_keywords"] if trigger.strip() in text.lower())
    base_level += bot_mentions * 3
    
    # –¢–∏–ø —Ä–æ–∑–º–æ–≤–∏
    type_multipliers = {
        "—Ç–µ—Ö–Ω—ñ—á–Ω–∞_–¥–∏—Å–∫—É—Å—ñ—è": 2,
        "—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∞_—Ä–æ–∑–º–æ–≤–∞": 2,
        "–∂–∞—Ä—Ç–∏_–º–µ–º—ñ": 1,
        "–µ–º–æ—Ü—ñ–π–Ω–∞_—Ä–æ–∑–º–æ–≤–∞": 1,
        "–ø–æ–±—É—Ç–æ–≤–∞_—Ä–æ–∑–º–æ–≤–∞": 0,
        "–∫–æ–Ω—Ñ–ª—ñ–∫—Ç": -1,
        "–∑–∞–≥–∞–ª—å–Ω–∞_—Ä–æ–∑–º–æ–≤–∞": 0
    }
    base_level += type_multipliers.get(conv_type, 0)
    
    # –ù–∞—Å—Ç—Ä—ñ–π
    mood_multipliers = {
        "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π": 1,
        "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π": -1,
        "–∑–∞–¥—É–º–ª–∏–≤–∏–π": 2,
        "–∑–±—É–¥–∂–µ–Ω–∏–π": 1,
        "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π": 0
    }
    base_level += mood_multipliers.get(mood, 0)
    
    # –ü–∏—Ç–∞–Ω–Ω—è –ø—ñ–¥–≤–∏—â—É—é—Ç—å –∑–∞–ª—É—á–µ–Ω—ñ—Å—Ç—å
    if "?" in text:
        base_level += 2
    
    return max(1, min(10, base_level))

def should_bot_intervene(text: str, conv_type: str, mood: str, chat_history: List[Dict]) -> bool:
    """–í–∏–∑–Ω–∞—á–∞—î, —á–∏ –≤–∞—Ä—Ç–æ –±–æ—Ç—É –≤—Ç—Ä—É—Ç–∏—Ç–∏—Å—è –≤ —Ä–æ–∑–º–æ–≤—É"""
    text_lower = text.lower()
    
    # –ó–∞–≤–∂–¥–∏ –≤—Ç—Ä—É—á–∞—î–º–æ—Å—è –ø—Ä–∏ –∑–≥–∞–¥–∫–∞—Ö
    if any(trigger.strip() in text_lower for trigger in PERSONA["trigger_keywords"]):
        return True
    
    # –í—Ç—Ä—É—á–∞—î–º–æ—Å—è –≤ —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫—ñ —Ç–∞ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –¥–∏—Å–∫—É—Å—ñ—ó
    if conv_type in ["—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∞_—Ä–æ–∑–º–æ–≤–∞", "—Ç–µ—Ö–Ω—ñ—á–Ω–∞_–¥–∏—Å–∫—É—Å—ñ—è"]:
        return random.random() < 0.4
    
    # –í—Ç—Ä—É—á–∞—î–º–æ—Å—è –≤ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –¥–ª—è —Ä–æ–∑—Ä—è–¥–∫–∏
    if conv_type == "–∫–æ–Ω—Ñ–ª—ñ–∫—Ç":
        return random.random() < 0.6
    
    # –í—Ç—Ä—É—á–∞—î–º–æ—Å—è –ø—Ä–∏ –¥–æ–≤–≥—ñ–π —Ç–∏—à—ñ (–∞–Ω–∞–ª—ñ–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    if chat_history:
        last_messages_time = [msg.get("timestamp", 0) for msg in chat_history[-3:]]
        current_time = datetime.now().timestamp()
        if last_messages_time and current_time - max(last_messages_time) > 3600:  # 1 –≥–æ–¥–∏–Ω–∞ —Ç–∏—à—ñ
            return random.random() < 0.3
    
    # –í—Ç—Ä—É—á–∞—î–º–æ—Å—è –ø—Ä–∏ –ø—Ä—è–º–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è—Ö
    question_words = ["—â–æ", "—è–∫", "–∫–æ–ª–∏", "–¥–µ", "—á–æ–º—É", "—Ö—Ç–æ", "—á–∏"]
    if any(word in text_lower for word in question_words) and "?" in text:
        return random.random() < 0.3
    
    return False

def get_suggested_response_tone(conv_type: str, mood: str) -> str:
    """–ü—Ä–æ–ø–æ–Ω—É—î —Ç–æ–Ω –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–æ—Ç–∞"""
    tone_mapping = {
        ("—Ç–µ—Ö–Ω—ñ—á–Ω–∞_–¥–∏—Å–∫—É—Å—ñ—è", "–∑–∞–¥—É–º–ª–∏–≤–∏–π"): "—Ä–æ–∑—É–º–Ω–∏–π_–∞–±—Å—É—Ä–¥",
        ("—Ç–µ—Ö–Ω—ñ—á–Ω–∞_–¥–∏—Å–∫—É—Å—ñ—è", "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π"): "–ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–π_–∂–∞—Ä—Ç",
        ("—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∞_—Ä–æ–∑–º–æ–≤–∞", "–∑–∞–¥—É–º–ª–∏–≤–∏–π"): "–≥–ª–∏–±–æ–∫–∏–π_–∞–±—Å—É—Ä–¥",
        ("—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∞_—Ä–æ–∑–º–æ–≤–∞", "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π"): "–º—É–¥—Ä–∏–π_–≥—É–º–æ—Ä",
        ("–∂–∞—Ä—Ç–∏_–º–µ–º—ñ", "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π"): "–≤–µ—Å–µ–ª–∏–π_–∞–±—Å—É—Ä–¥",
        ("–∂–∞—Ä—Ç–∏_–º–µ–º—ñ", "–∑–±—É–¥–∂–µ–Ω–∏–π"): "–µ–Ω–µ—Ä–≥—ñ–π–Ω–∏–π_–≥—É–º–æ—Ä",
        ("–µ–º–æ—Ü—ñ–π–Ω–∞_—Ä–æ–∑–º–æ–≤–∞", "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π"): "–ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–π_–∞–±—Å—É—Ä–¥",
        ("–µ–º–æ—Ü—ñ–π–Ω–∞_—Ä–æ–∑–º–æ–≤–∞", "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π"): "—Ä–∞–¥—ñ—Å–Ω–∏–π_–≥—É–º–æ—Ä",
        ("–∫–æ–Ω—Ñ–ª—ñ–∫—Ç", "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π"): "—Ä–æ–∑—Ä—è–¥–∂–∞—é—á–∏–π_–∞–±—Å—É—Ä–¥",
        ("–ø–æ–±—É—Ç–æ–≤–∞_—Ä–æ–∑–º–æ–≤–∞", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"): "–ª–µ–≥–∫–∏–π_–≥—É–º–æ—Ä"
    }
    
    return tone_mapping.get((conv_type, mood), "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π_–∞–±—Å—É—Ä–¥")

def extract_context_keywords(text: str) -> List[str]:
    """–í–∏—Ç—è–≥—É—î –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è"""
    # –ü—Ä–æ—Å—Ç—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
    words = re.findall(r'\b\w{4,}\b', text.lower())
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    stop_words = {"—è–∫–∏–π", "—è–∫–∞", "—è–∫–µ", "—è–∫–∏–π", "—Ü–µ–π", "—Ü—è", "—Ü–µ", "—Ç–æ–π", "—Ç–∞", "—Ç–µ", "–º–µ–Ω–µ", "—Ç–µ–±–µ", "–π–æ–≥–æ", "–Ω–µ—ó", "–Ω–∞—Å", "–≤–∞—Å", "–Ω–∏—Ö"}
    keywords = [word for word in words if word not in stop_words]
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–ø-5 –Ω–∞–π–¥–æ–≤—à–∏—Ö —Å–ª—ñ–≤ —è–∫ –∫–ª—é—á–æ–≤—ñ
    return sorted(set(keywords), key=len, reverse=True)[:5]

def update_chat_mood_history(chat_id: int, mood: str, conversation_type: str):
    """–û–Ω–æ–≤–ª—é—î —ñ—Å—Ç–æ—Ä—ñ—é –Ω–∞—Å—Ç—Ä–æ—ó–≤ —á–∞—Ç—É"""
    timestamp = datetime.now().timestamp()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –∑–∞–ø–∏—Å—ñ–≤
    chat_moods[chat_id].append((timestamp, mood))
    chat_moods[chat_id] = chat_moods[chat_id][-50:]
    
    chat_topics[chat_id].append((timestamp, conversation_type))
    chat_topics[chat_id] = chat_topics[chat_id][-50:]

def get_chat_mood_trend(chat_id: int, hours: int = 24) -> Dict:
    """–ê–Ω–∞–ª—ñ–∑—É—î —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó –Ω–∞—Å—Ç—Ä–æ—é —á–∞—Ç—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –≥–æ–¥–∏–Ω–∏"""
    current_time = datetime.now().timestamp()
    cutoff_time = current_time - (hours * 3600)
    
    recent_moods = [mood for timestamp, mood in chat_moods[chat_id] if timestamp > cutoff_time]
    recent_topics = [topic for timestamp, topic in chat_topics[chat_id] if timestamp > cutoff_time]
    
    if not recent_moods:
        return {"dominant_mood": "–Ω–µ–≤—ñ–¥–æ–º–∏–π", "dominant_topic": "–Ω–µ–≤—ñ–¥–æ–º–∏–π", "trend": "—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π"}
    
    # –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –Ω–∞—Å—Ç—Ä—ñ–π
    mood_counts = defaultdict(int)
    for mood in recent_moods:
        mood_counts[mood] += 1
    dominant_mood = max(mood_counts, key=mood_counts.get)
    
    # –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∞ —Ç–µ–º–∞
    topic_counts = defaultdict(int)
    for topic in recent_topics:
        topic_counts[topic] += 1
    dominant_topic = max(topic_counts, key=topic_counts.get)
    
    # –¢–µ–Ω–¥–µ–Ω—Ü—ñ—è (–ø–æ—Ä—ñ–≤–Ω—é—î–º–æ –ø–µ—Ä—à—É —Ç–∞ –¥—Ä—É–≥—É –ø–æ–ª–æ–≤–∏–Ω—É –ø–µ—Ä—ñ–æ–¥—É)
    mid_point = len(recent_moods) // 2
    if mid_point > 0:
        first_half = recent_moods[:mid_point]
        second_half = recent_moods[mid_point:]
        
        positive_moods = {"–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π", "–∑–±—É–¥–∂–µ–Ω–∏–π"}
        first_half_positive = sum(1 for mood in first_half if mood in positive_moods)
        second_half_positive = sum(1 for mood in second_half if mood in positive_moods)
        
        if second_half_positive > first_half_positive:
            trend = "–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"
        elif second_half_positive < first_half_positive:
            trend = "–ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è"
        else:
            trend = "—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π"
    else:
        trend = "—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π"
    
    return {
        "dominant_mood": dominant_mood,
        "dominant_topic": dominant_topic,
        "trend": trend,
        "activity_level": len(recent_moods)
    }

def generate_context_aware_prompt(message_text: str, chat_analysis: Dict, chat_trend: Dict) -> str:
    """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ–º—Ç –¥–ª—è Gemini –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É"""
    base_prompt = f"–¢–∏ ‚Äî –ì—Ä—è–≥, –∞–±—Å—É—Ä–¥–Ω–∏–π –¥—É—Ö —á–∞—Ç—É –∑ –¥–æ—Ç–µ–ø–Ω–∏–º –≥—É–º–æ—Ä–æ–º."
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–∑–º–æ–≤–∏
    context_info = f"""
–ü–æ—Ç–æ—á–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è:
- –¢–∏–ø —Ä–æ–∑–º–æ–≤–∏: {chat_analysis.get('type', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')}
- –ù–∞—Å—Ç—Ä—ñ–π: {chat_analysis.get('mood', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π')}
- –†—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ (1-10): {chat_analysis.get('engagement_level', 5)}
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ç–æ–Ω: {chat_analysis.get('suggested_tone', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π_–∞–±—Å—É—Ä–¥')}

–¢–µ–Ω–¥–µ–Ω—Ü—ñ—ó —á–∞—Ç—É:
- –î–æ–º—ñ–Ω—É—é—á–∏–π –Ω–∞—Å—Ç—Ä—ñ–π: {chat_trend.get('dominant_mood', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')}
- –û—Å–Ω–æ–≤–Ω–∞ —Ç–µ–º–∞: {chat_trend.get('dominant_topic', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')}
- –¢–µ–Ω–¥–µ–Ω—Ü—ñ—è: {chat_trend.get('trend', '—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π')}
- –†—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {chat_trend.get('activity_level', 0)}

–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{message_text}"
"""
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å—Ç–∏–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    tone_instructions = {
        "—Ä–æ–∑—É–º–Ω–∏–π_–∞–±—Å—É—Ä–¥": "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ä–æ–∑—É–º–Ω–æ, –∞–ª–µ –∑ –∞–±—Å—É—Ä–¥–Ω–∏–º–∏ –∞–Ω–∞–ª–æ–≥—ñ—è–º–∏ —Ç–∞ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∏–º–∏ –≤–∏—Å–Ω–æ–≤–∫–∞–º–∏.",
        "–ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–π_–∂–∞—Ä—Ç": "–ü—ñ–¥—Ç—Ä–∏–º–∞–π —Ä–æ–∑–º–æ–≤—É –ª–µ–≥–∫–∏–º –≥—É–º–æ—Ä–æ–º —Ç–∞ –¥–æ—Ç–µ–ø–Ω–∏–º–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏.",
        "–≥–ª–∏–±–æ–∫–∏–π_–∞–±—Å—É—Ä–¥": "–§—ñ–ª–æ—Å–æ—Ñ—Å—Ç–≤—É–π –∞–±—Å—É—Ä–¥–Ω–æ, —Å—Ç–∞–≤—å –¥–∏–≤–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ —Ä–æ–±–∏ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—ñ –∑–≤'—è–∑–∫–∏.",
        "–≤–µ—Å–µ–ª–∏–π_–∞–±—Å—É—Ä–¥": "–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–º—ñ—à–Ω–∏–º —Ç–∞ –∞–±—Å—É—Ä–¥–Ω–∏–º, –ø—ñ–¥—Ç—Ä–∏–º–∞–π –≤–µ—Å–µ–ª–æ—â—ñ.",
        "–ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–π_–∞–±—Å—É—Ä–¥": "–ü—ñ–¥—Ç—Ä–∏–º–∞–π, –∞–ª–µ –∞–±—Å—É—Ä–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º, —Ä–æ–∑–≤–µ—Å–µ–ª–∏ —Å–∏—Ç—É–∞—Ü—ñ—é.",
        "—Ä–æ–∑—Ä—è–¥–∂–∞—é—á–∏–π_–∞–±—Å—É—Ä–¥": "–†–æ–∑—Ä—è–¥—å –Ω–∞–ø—Ä—É–≥—É –∞–±—Å—É—Ä–¥–Ω–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –∞–±–æ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ—é —Ç–µ–º–æ—é."
    }
    
    tone_instruction = tone_instructions.get(
        chat_analysis.get('suggested_tone', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π_–∞–±—Å—É—Ä–¥'),
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É —Å–≤–æ—î–º—É –∑–≤–∏—á–Ω–æ–º—É –∞–±—Å—É—Ä–¥–Ω–æ–º—É —Å—Ç–∏–ª—ñ."
    )
    
    return f"{base_prompt}\n{context_info}\n\n–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: {tone_instruction}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ (1-2 —Ä–µ—á–µ–Ω–Ω—è), –¥–æ—Ç–µ–ø–Ω–æ —Ç–∞ –ø–æ-—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏."
