"""
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–æ—Å—Ç—É–ø–æ–≤–æ—ó –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
–¶–µ–π –º–æ–¥—É–ª—å –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ —Å—Ç–∞—Ä—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É, —Ç–∞–∫ —ñ –Ω–æ–≤—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –ë–î
"""
import asyncio
import logging
from typing import List, Dict, Any, Optional, Union
from aiogram.types import Message
import os

# –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏
try:
    from .context_async import AsyncContextManager
    ASYNC_AVAILABLE = True
except ImportError:
    ASYNC_AVAILABLE = False
    
from .context_sqlite import (
    init_db as sync_init_db,
    save_message as sync_save_message,
    get_recent_messages as sync_get_recent_messages,
    get_context as sync_get_context,
    get_chat_stats as sync_get_chat_stats,
    get_global_stats as sync_get_global_stats
)

logger = logging.getLogger(__name__)

class ContextAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, —è–∫–∏–π –ø—ñ–¥—Ç—Ä–∏–º—É—î –æ–±–∏–¥–≤–∞ —Ç–∏–ø–∏ –ë–î"""
    
    def __init__(self, use_async: Optional[bool] = None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        
        Args:
            use_async: –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –ë–î. –Ø–∫—â–æ None, —Ç–æ –∞–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        """
        if use_async is None:
            # –ê–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ async —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–∞ —î –∑–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
            self.use_async = ASYNC_AVAILABLE and os.getenv('USE_ASYNC_DB', 'false').lower() == 'true'
        else:
            self.use_async = use_async and ASYNC_AVAILABLE
            
        self._async_manager = None
        
        if self.use_async:
            logger.info("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö")
        else:
            logger.info("üìÇ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö")
    
    async def _get_async_manager(self) -> 'AsyncContextManager':
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î"""
        if self._async_manager is None:
            from .context_async import AsyncContextManager
            self._async_manager = AsyncContextManager()
            await self._async_manager.initialize()
        return self._async_manager
    
    def init_db(self) -> None:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        if self.use_async:
            # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ
            pass
        else:
            sync_init_db()
    
    def save_message(self, message: Message, media_id: Optional[str] = None, media_type: Optional[str] = None) -> None:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if self.use_async:
            # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–æ–Ω–æ–≤—É –∑–∞–¥–∞—á—É
            asyncio.create_task(self._async_save_message(message, media_id, media_type))
        else:
            sync_save_message(message, media_id, media_type)
    
    async def _async_save_message(self, message: Message, media_id: Optional[str] = None, media_type: Optional[str] = None) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            manager = await self._get_async_manager()
            await manager.save_message(message, media_id, media_type)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {e}")
            # Fallback –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î
            sync_save_message(message, media_id, media_type)
    
    async def get_recent_messages(self, chat_id: int, limit: int = 50) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        if self.use_async:
            try:
                manager = await self._get_async_manager()
                return await manager.get_recent_messages(chat_id, limit)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {e}")
                # Fallback –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î
                return sync_get_recent_messages(chat_id, limit)
        else:
            return sync_get_recent_messages(chat_id, limit)
    
    def get_recent_messages_sync(self, chat_id: int, limit: int = 50) -> List[Dict[str, Any]]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        if self.use_async:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            try:
                loop = asyncio.get_event_loop()
                if loop.is_running():
                    # –Ø–∫—â–æ loop –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∑–∞–¥–∞—á—É
                    return asyncio.run_coroutine_threadsafe(
                        self.get_recent_messages(chat_id, limit), loop
                    ).result(timeout=10.0)
                else:
                    return asyncio.run(self.get_recent_messages(chat_id, limit))
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó: {e}")
                return sync_get_recent_messages(chat_id, limit)
        else:
            return sync_get_recent_messages(chat_id, limit)
    
    async def get_messages_by_chat(self, chat_id: int, limit: int = 1000) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É"""
        if self.use_async:
            try:
                manager = await self._get_async_manager()
                return await manager.get_recent_messages(chat_id, limit)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {e}")
                return sync_get_recent_messages(chat_id, limit)
        else:
            return sync_get_recent_messages(chat_id, limit)
    
    async def clear_context(self, chat_id: int) -> None:
        """–û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —á–∞—Ç—É"""
        if self.use_async:
            try:
                manager = await self._get_async_manager()
                # –ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –≤–µ—Ä—Å—ñ—é
                logger.info(f"–û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è —á–∞—Ç—É {chat_id} (–ø–æ–∫–∏ —â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {e}")
        else:
            logger.info(f"–û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è —á–∞—Ç—É {chat_id} (—Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó)")
    
    def get_stats(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = {
            "adapter_type": "async" if self.use_async else "sync",
            "async_available": ASYNC_AVAILABLE
        }
        
        if self.use_async and self._async_manager:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                loop = asyncio.get_event_loop()
                if loop.is_running():
                    stats["async_stats"] = "Available in async context"
                else:
                    async_stats = asyncio.run(self._get_async_stats())
                    stats.update(async_stats)
            except Exception as e:
                stats["async_stats_error"] = str(e)
        
        return stats
    
    async def _get_async_stats(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î"""
        if self._async_manager:
            return await self._async_manager.get_stats()
        return {}
    
    async def migrate_to_async(self) -> bool:
        """–ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î"""
        if not ASYNC_AVAILABLE:
            logger.error("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó")
            return False
        
        try:
            manager = await self._get_async_manager()
            success = await manager.migrate_from_sqlite()
            if success:
                self.use_async = True
                logger.info("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            return success
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
_context_adapter = None

def get_context_adapter() -> ContextAdapter:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    global _context_adapter
    if _context_adapter is None:
        _context_adapter = ContextAdapter()
    return _context_adapter

# –§—É–Ω–∫—Ü—ñ—ó-–æ–±–≥–æ—Ä—Ç–∫–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
def init_db() -> None:
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    adapter = get_context_adapter()
    adapter.init_db()

def save_message(message: Message, media_id: Optional[str] = None, media_type: Optional[str] = None) -> None:
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    adapter = get_context_adapter()
    adapter.save_message(message, media_id, media_type)

def get_recent_messages(chat_id: int, limit: int = 50) -> List[Dict[str, Any]]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
    adapter = get_context_adapter()
    return adapter.get_recent_messages_sync(chat_id, limit)

def get_messages_by_chat(chat_id: int, limit: int = 1000) -> List[Dict[str, Any]]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É"""
    adapter = get_context_adapter()
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –≤–µ—Ä—Å—ñ—é —è–∫ fallback
            return sync_get_recent_messages(chat_id, limit)
        else:
            return asyncio.run(adapter.get_messages_by_chat(chat_id, limit))
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É: {e}")
        return sync_get_recent_messages(chat_id, limit)

def clear_context(chat_id: int) -> None:
    """–û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —á–∞—Ç—É"""
    adapter = get_context_adapter()
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            asyncio.create_task(adapter.clear_context(chat_id))
        else:
            asyncio.run(adapter.clear_context(chat_id))
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {e}")
