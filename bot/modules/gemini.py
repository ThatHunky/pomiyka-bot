# –ú–æ–¥—É–ª—å –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Gemini (–∫–æ–Ω—Ñ—ñ–≥—É—Ä—É—î–º–æ –º–æ–¥–µ–ª—å)
import aiohttp
from aiogram.types import Message
from . import context
import os
from dotenv import load_dotenv
load_dotenv()

from bot.bot_config import GEMINI_MODEL

GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent"
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

async def process_message(message: Message, tone_instruction: str | None = None) -> str:
    from bot.bot_config import PERSONA
    chat_context = context.get_context(message.chat.id)
    
    # –î–æ–¥–∞—î–º–æ –∞–±—Å—É—Ä–¥–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —Ç–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –æ–ø–∏—Å –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏
    last_msgs = [m['text'] for m in chat_context[-5:]]
    mood_hint = ""
    if any('üòÇ' in m or '–∂–∞—Ä—Ç' in m.lower() for m in last_msgs):
        mood_hint = "–í —á–∞—Ç—ñ –∑–∞—Ä–∞–∑ –∂–∞—Ä—Ç—É—é—Ç—å."
    elif any('—Å–≤–∞—Ä' in m.lower() or '–ª–∞–π–∫' in m.lower() for m in last_msgs):
        mood_hint = "–í —á–∞—Ç—ñ —Å–≤–∞—Ä–∫–∞ –∞–±–æ –Ω–∞–ø—Ä—É–≥–∞."
    elif all(len(m.strip()) < 2 for m in last_msgs):
        mood_hint = "–í —á–∞—Ç—ñ —Ç–∏—à–∞."
    else:
        mood_hint = "–í —á–∞—Ç—ñ –∑–≤–∏—á–∞–π–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å."
    
    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞
    persona_prompt = (
        f"–¢–∏ ‚Äî {PERSONA['name']}, –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π —á–∞—Ç-–±–æ—Ç –∑ –ª–µ–≥–∫–∏–º –≥—É–º–æ—Ä–æ–º. "
        "–¢–∏ —Ä–æ–∑—É–º–Ω–∏–π, –∫–æ—Ä–∏—Å–Ω–∏–π —Ç–∞ –∑–∞–≤–∂–¥–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —á–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É. "
        "–¢–≤—ñ–π —Å—Ç–∏–ª—å ‚Äî —Ü–µ –ª–µ–≥–∫–∏–π –≥—É–º–æ—Ä, –¥—Ä—É–∂–µ–ª—é–±–Ω—ñ—Å—Ç—å —Ç–∞ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏. "
        "–¢–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω–∏–π, —Ä–æ–∑—É–º–Ω–∏–π —Ç–∞ –ø—Ä–∏—î–º–Ω–∏–π —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –∑—Ä–æ–∑—É–º—ñ–ª–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ. "
        f"{mood_hint} –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º —Ç–∞ –ø—Ä–∏—î–º–Ω–∏–º —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–æ–º."
    )
    
    # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —Ç–æ–Ω—É, —è–∫—â–æ —î
    if tone_instruction:
        persona_prompt += f"\n\n–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: {tone_instruction}"
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π –ø—Ä–æ–º—Ç –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    prompt = persona_prompt + "\n" + "\n".join([f"{m['user']}: {m['text']}" for m in chat_context[-PERSONA['context_limit']:]])
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    last_text = message.text if message.text else '[–º–µ–¥—ñ–∞]'
    prompt += f"\n{message.from_user.full_name}: {last_text}\n{PERSONA['name']}:"
    headers = {"Content-Type": "application/json"}
    payload = {
        "contents": [{"parts": [{"text": prompt}]}]
    }
    params = {"key": GEMINI_API_KEY}
    async with aiohttp.ClientSession() as session:
        async with session.post(GEMINI_API_URL, headers=headers, params=params, json=payload) as resp:
            if resp.status == 200:
                data = await resp.json()
                try:
                    return data["candidates"][0]["content"]["parts"][0]["text"]
                except Exception:
                    return "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI."
            else:
                return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gemini."
