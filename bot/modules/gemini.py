# –ú–æ–¥—É–ª—å –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Gemini (–∫–æ–Ω—Ñ—ñ–≥—É—Ä—É—î–º–æ –º–æ–¥–µ–ª—å)
import aiohttp
from aiogram.types import Message
from . import context
import os
from dotenv import load_dotenv
load_dotenv()

from bot.bot_config import GEMINI_MODEL

GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent"
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

async def process_message(message: Message) -> str:
    from bot.bot_config import PERSONA
    chat_context = context.get_context(message.chat.id)
    # –î–æ–¥–∞—î–º–æ –∞–±—Å—É—Ä–¥–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —Ç–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –æ–ø–∏—Å –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏
    last_msgs = [m['text'] for m in chat_context[-5:]]
    mood_hint = ""
    if any('üòÇ' in m or '–∂–∞—Ä—Ç' in m.lower() for m in last_msgs):
        mood_hint = "–í —á–∞—Ç—ñ –∑–∞—Ä–∞–∑ –∂–∞—Ä—Ç—É—é—Ç—å."
    elif any('—Å–≤–∞—Ä' in m.lower() or '–ª–∞–π–∫' in m.lower() for m in last_msgs):
        mood_hint = "–í —á–∞—Ç—ñ —Å–≤–∞—Ä–∫–∞ –∞–±–æ –Ω–∞–ø—Ä—É–≥–∞."
    elif all(len(m.strip()) < 2 for m in last_msgs):
        mood_hint = "–í —á–∞—Ç—ñ —Ç–∏—à–∞."
    else:
        mood_hint = "–í —á–∞—Ç—ñ –∑–≤–∏—á–∞–π–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å."
    persona_prompt = (
        f"–¢–∏ ‚Äî {PERSONA['name']}, –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π —á–∞—Ç-–±–æ—Ç –∑ –ª–µ–≥–∫–∏–º –∞–±—Å—É—Ä–¥–Ω–∏–º –≥—É–º–æ—Ä–æ–º. "
        "–¢–∏ —Ä–æ–∑—É–º–Ω–∏–π, –∫–º—ñ—Ç–ª–∏–≤–∏–π —Ç–∞ –∑–∞–≤–∂–¥–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —á–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É. "
        "–¢–≤—ñ–π –≥—É–º–æ—Ä ‚Äî —Ü–µ –ª–µ–≥–∫–∞ —ñ—Ä–æ–Ω—ñ—è, –∫–∞–ª–∞–º–±—É—Ä–∏ —Ç–∞ –Ω–µ–∑–≤–∏—á–∞–π–Ω—ñ –∞—Å–æ—Ü—ñ–∞—Ü—ñ—ó, –∞–ª–µ —Ç–∏ –∑–∞–ª–∏—à–∞—î—à—Å—è –∑—Ä–æ–∑—É–º—ñ–ª–∏–º. "
        "–¢–∏ –Ω–µ –±–æ–∂–µ–≤—ñ–ª—å–Ω–∏–π, –∞ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–æ—Ö–∏ –µ–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–Ω–∏–π —Ç–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π —É —Å–≤–æ—ó—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ, –∞–ª–µ –∑ –≤–ª–∞—Å–Ω–∏–º —Å—Ç–∏–ª–µ–º. "
        f"{mood_hint} –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –∑—Ä–æ–±–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –ø—Ä–∏—î–º–Ω—ñ—à–∏–º —Ç–∞ —Ü—ñ–∫–∞–≤—ñ—à–∏–º."
    )
    # –§–æ—Ä–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥—ñ–∞–ª–æ–≥—É
    history = [f"{m['user']}: {m['text']}" for m in chat_context[-PERSONA['context_limit']:]]

    # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
    last_text = message.text if message.text else '[–º–µ–¥—ñ–∞]'
    suffix = f"\n{message.from_user.full_name}: {last_text}\n{PERSONA['name']}:"
    prompt = persona_prompt + "\n" + "\n".join(history) + suffix
    while len(prompt) > PERSONA['max_context_size'] and history:
        history.pop(0)
        prompt = persona_prompt + "\n" + "\n".join(history) + suffix
    headers = {"Content-Type": "application/json"}
    payload = {
        "contents": [{"parts": [{"text": prompt}]}]
    }
    params = {"key": GEMINI_API_KEY}
    async with aiohttp.ClientSession() as session:
        async with session.post(GEMINI_API_URL, headers=headers, params=params, json=payload) as resp:
            if resp.status == 200:
                data = await resp.json()
                try:
                    return data["candidates"][0]["content"]["parts"][0]["text"]
                except Exception:
                    return "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI."
            else:
                return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gemini."
