# –ú–æ–¥—É–ª—å –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Gemini (–∫–æ–Ω—Ñ—ñ–≥—É—Ä—É—î–º–æ –º–æ–¥–µ–ª—å)
import aiohttp
import asyncio
import logging
from aiogram.types import Message
from . import context
import os
from dotenv import load_dotenv
from typing import Optional, Callable, Any, List
from bot.bot_config import GEMINI_MODEL

load_dotenv()

GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent"
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    raise ValueError("GEMINI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

async def process_message(message: Message, tone_instruction: Optional[str] = None) -> str:
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Gemini API –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ —Ç–æ–Ω—É.
    
    Args:
        message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        tone_instruction: –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è —Ç–æ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        
    Returns:
        –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini
    """
    try:
        from bot.bot_config import PERSONA
        chat_context = context.get_context(message.chat.id)
        
        # –î–æ–¥–∞—î–º–æ –¥—Ä—É–∂–Ω—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —Ç–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –æ–ø–∏—Å –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏
        last_msgs = [m.get('text', '') for m in chat_context[-5:] if m.get('text')]
        mood_hint = _analyze_chat_mood(last_msgs)
        
        # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞
        persona_prompt = _build_persona_prompt(mood_hint, tone_instruction)
        
        # –§–æ—Ä–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥—ñ–∞–ª–æ–≥—É
        history = [f"{m['user']}: {m['text']}" for m in chat_context[-PERSONA['context_limit']:] if m.get('text')]
        
        # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
        last_text = message.text if message.text else '[–º–µ–¥—ñ–∞]'
        user_name = getattr(message.from_user, 'full_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π') if message.from_user else '–ù–µ–≤—ñ–¥–æ–º–∏–π'
        suffix = f"\n{user_name}: {last_text}\n{PERSONA['name']}:"
        prompt = persona_prompt + "\n" + "\n".join(history) + suffix
        
        # –ö–æ–º–ø—Ä–µ—Å—ñ—è –ø—Ä–æ–º–ø—Ç—É —è–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
        while len(prompt) > PERSONA['max_context_size'] and history:
            history.pop(0)
            prompt = persona_prompt + "\n" + "\n".join(history) + suffix
        
        return await safe_api_call(_make_gemini_request, prompt)
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ process_message: {e}")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."

def _analyze_chat_mood(last_msgs: List[str]) -> str:
    """–ê–Ω–∞–ª—ñ–∑—É—î –Ω–∞—Å—Ç—Ä—ñ–π —á–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
    if any('üòÇ' in m or '–∂–∞—Ä—Ç' in m.lower() for m in last_msgs):
        return "–í —á–∞—Ç—ñ –∑–∞—Ä–∞–∑ –∂–∞—Ä—Ç—É—é—Ç—å."
    elif any('—Å–≤–∞—Ä' in m.lower() or '–ª–∞–π–∫' in m.lower() for m in last_msgs):
        return "–í —á–∞—Ç—ñ —Å–≤–∞—Ä–∫–∞ –∞–±–æ –Ω–∞–ø—Ä—É–≥–∞."
    elif all(len(m.strip()) < 2 for m in last_msgs):
        return "–í —á–∞—Ç—ñ —Ç–∏—à–∞."
    else:
        return "–í —á–∞—Ç—ñ –∑–≤–∏—á–∞–π–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å."

def _build_persona_prompt(mood_hint: str, tone_instruction: Optional[str] = None) -> str:
    """–ë—É–¥—É—î –±–∞–∑–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∏ –±–æ—Ç–∞."""
    from bot.bot_config import PERSONA
    
    persona_prompt = (
        f"–¢–∏ ‚Äî {PERSONA['name']}, –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π —á–∞—Ç-–±–æ—Ç –∑ –ª–µ–≥–∫–∏–º –≥—É–º–æ—Ä–æ–º. "
        "–¢–∏ —Ä–æ–∑—É–º–Ω–∏–π, –∫–æ—Ä–∏—Å–Ω–∏–π —Ç–∞ –∑–∞–≤–∂–¥–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ —á–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É. "
        "–¢–≤—ñ–π —Å—Ç–∏–ª—å ‚Äî —Ü–µ –ª–µ–≥–∫–∏–π –≥—É–º–æ—Ä, –¥—Ä—É–∂–µ–ª—é–±–Ω—ñ—Å—Ç—å —Ç–∞ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏. "
        "–¢–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω–∏–π, —Ä–æ–∑—É–º–Ω–∏–π —Ç–∞ –ø—Ä–∏—î–º–Ω–∏–π —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –∑—Ä–æ–∑—É–º—ñ–ª–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ. "
        f"{mood_hint} –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º —Ç–∞ –ø—Ä–∏—î–º–Ω–∏–º —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–æ–º."
    )
    
    if tone_instruction:
        persona_prompt += f"\n\n–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: {tone_instruction}"
    
    return persona_prompt

async def _make_gemini_request(prompt: str) -> str:
    """–í–∏–∫–æ–Ω—É—î –∑–∞–ø–∏—Ç –¥–æ Gemini API."""
    if not GEMINI_API_KEY:
        raise ValueError("GEMINI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        
    headers = {"Content-Type": "application/json"}
    payload = {
        "contents": [{"parts": [{"text": prompt}]}]
    }
    params = {"key": GEMINI_API_KEY}
    
    async with aiohttp.ClientSession() as session:
        async with session.post(GEMINI_API_URL, headers=headers, params=params, json=payload) as resp:
            if resp.status == 200:
                data = await resp.json()
                try:
                    return data["candidates"][0]["content"]["parts"][0]["text"]
                except (KeyError, IndexError) as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Gemini: {e}")
                    return "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI."
            else:
                error_text = await resp.text()
                logging.error(f"Gemini API –ø–æ–º–∏–ª–∫–∞ {resp.status}: {error_text}")
                return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gemini."

async def safe_api_call(func: Callable, *args: Any, **kwargs: Any) -> Any:
    """–ë–µ–∑–ø–µ—á–Ω–∏–π –≤–∏–∫–ª–∏–∫ API –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏"""
    max_retries = 3
    base_delay = 1
    
    for attempt in range(max_retries):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            if attempt == max_retries - 1:
                logging.error(f"API –≤–∏–∫–ª–∏–∫ –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {e}")
                raise
            
            delay = base_delay * (2 ** attempt)  # Exponential backoff
            logging.warning(f"API –ø–æ–º–∏–ª–∫–∞ (—Å–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries}): {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å")
            await asyncio.sleep(delay)
