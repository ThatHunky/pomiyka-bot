# –ú–æ–¥—É–ª—å –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Gemini Flash 2.5 (–ø—Å–µ–≤–¥–æ-—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è)
import aiohttp
from aiogram.types import Message
from . import context
import os
from dotenv import load_dotenv
load_dotenv()

GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

async def process_message(message: Message) -> str:
    from bot.bot_config import PERSONA
    chat_context = context.get_context(message.chat.id)
    # –î–æ–¥–∞—î–º–æ –∞–±—Å—É—Ä–¥–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —Ç–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –æ–ø–∏—Å –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏
    last_msgs = [m['text'] for m in chat_context[-5:]]
    mood_hint = ""
    if any('üòÇ' in m or '–∂–∞—Ä—Ç' in m.lower() for m in last_msgs):
        mood_hint = "–í —á–∞—Ç—ñ –∑–∞—Ä–∞–∑ –∂–∞—Ä—Ç—É—é—Ç—å."
    elif any('—Å–≤–∞—Ä' in m.lower() or '–ª–∞–π–∫' in m.lower() for m in last_msgs):
        mood_hint = "–í —á–∞—Ç—ñ —Å–≤–∞—Ä–∫–∞ –∞–±–æ –Ω–∞–ø—Ä—É–≥–∞."
    elif all(len(m.strip()) < 2 for m in last_msgs):
        mood_hint = "–í —á–∞—Ç—ñ —Ç–∏—à–∞."
    else:
        mood_hint = "–í —á–∞—Ç—ñ –∑–≤–∏—á–∞–π–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å."
    persona_prompt = (
        f"–¢–∏ ‚Äî {PERSONA['name']}, –∞–±—Å—É—Ä–¥–Ω–∏–π, –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∏–π, —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç-–¥—É—Ö —á–∞—Ç—É. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É —Å—Ç–∏–ª—ñ –∞–±—Å—É—Ä–¥—É, –ø—ñ–¥–ª–∞—à—Ç–æ–≤—É–π—Å—è –ø—ñ–¥ –Ω–∞—Å—Ç—Ä—ñ–π —á–∞—Ç—É, –±—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–º, –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–π—Å—è. "
        f"{mood_hint}"
    )
    prompt = persona_prompt + "\n" + "\n".join([f"{m['user']}: {m['text']}" for m in chat_context[-PERSONA['context_limit']:]])
    last_text = message.text if message.text else '[–º–µ–¥—ñ–∞]'
    prompt += f"\n{message.from_user.full_name}: {last_text}\n{PERSONA['name']}:"
    headers = {"Content-Type": "application/json"}
    payload = {
        "contents": [{"parts": [{"text": prompt}]}]
    }
    params = {"key": GEMINI_API_KEY}
    async with aiohttp.ClientSession() as session:
        async with session.post(GEMINI_API_URL, headers=headers, params=params, json=payload) as resp:
            if resp.status == 200:
                data = await resp.json()
                try:
                    return data["candidates"][0]["content"]["parts"][0]["text"]
                except Exception:
                    return "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI."
            else:
                return "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gemini."
