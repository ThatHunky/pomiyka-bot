# –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–∑—É–º–Ω–æ—ó –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—ñ —Ç–∞ –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—Ö–∏—Å—Ç—É
import time
import random
from datetime import datetime, timedelta
from collections import defaultdict
from bot.bot_config import PERSONA

# –¢—Ä–µ–∫—ñ–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞
bot_activity = defaultdict(list)  # chat_id -> [timestamps]
last_spontaneous = defaultdict(float)  # chat_id -> timestamp

def should_reply_smart(chat_id: int, message_text: str = "") -> bool:
    """–†–æ–∑—É–º–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î, —á–∏ –≤–∞—Ä—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏"""
    now = time.time()
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ –≥–æ–¥–∏–Ω–∏)
    hour_ago = now - 3600
    bot_activity[chat_id] = [ts for ts in bot_activity[chat_id] if ts > hour_ago]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –≥–æ–¥–∏–Ω—É
    if len(bot_activity[chat_id]) >= PERSONA["max_replies_per_hour"]:
        return False
    
    # –Ø–∫—â–æ –∑–≥–∞–¥–∞–Ω–æ —Ç—Ä–∏–≥–µ—Ä–∏ - –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–∞–ª–µ –∑ –ª—ñ–º—ñ—Ç–æ–º)
    message_lower = message_text.lower()
    if any(trigger.strip() in message_lower for trigger in PERSONA["trigger_keywords"]):
        return True
    
    # –Ü–Ω–∞–∫—à–µ - –≤–∏–ø–∞–¥–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –Ω–∏–∑—å–∫–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é
    return random.random() < PERSONA["smart_reply_chance"]

def should_be_spontaneous(chat_id: int) -> bool:
    """–í–∏–∑–Ω–∞—á–∞—î, —á–∏ —á–∞—Å –¥–ª—è —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    if not PERSONA["autonomous_mode"]:
        return False
    
    now = time.time()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –ø–∞—É–∑—É –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    min_silence = PERSONA["min_silence_minutes"] * 60
    if now - last_spontaneous[chat_id] < min_silence:
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –Ω–∞ –≥–æ–¥–∏–Ω—É
    hour_ago = now - 3600
    bot_activity[chat_id] = [ts for ts in bot_activity[chat_id] if ts > hour_ago]
    if len(bot_activity[chat_id]) >= PERSONA["max_replies_per_hour"]:
        return False
    
    # –°–ø–æ–Ω—Ç–∞–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑ –Ω–∏–∑—å–∫–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é
    return random.random() < PERSONA["spontaneous_chance"]

def mark_bot_activity(chat_id: int, is_spontaneous: bool = False):
    """–ü–æ–∑–Ω–∞—á–∞—î –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–æ—Ç–∞"""
    now = time.time()
    bot_activity[chat_id].append(now)
    if is_spontaneous:
        last_spontaneous[chat_id] = now

def get_spontaneous_prompt(recent_messages: list) -> str:
    """–ì–µ–Ω–µ—Ä—É—î prompt –¥–ª—è —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    if not recent_messages:
        return (
            "–¢–∏ ‚Äî –ì—Ä—è–≥, –∞–±—Å—É—Ä–¥–Ω–∏–π –¥—É—Ö —á–∞—Ç—É. –í —á–∞—Ç—ñ –¥–æ–≤–≥–æ —Ç–∏—à–∞. "
            "–ù–∞–ø–∏—à–∏ —â–æ—Å—å –∫–æ—Ä–æ—Ç–∫–µ, –¥–∏–≤–Ω–µ, —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –∞–±—Å—É—Ä–¥–Ω–µ, —â–æ–± –Ω–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ —Å–µ–±–µ. "
            "–ù–µ –ø–∏—Ç–∞–π –Ω—ñ—á–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –±—É–¥—å –∑–∞–≥–∞–¥–∫–æ–≤–∏–º."
        )
    
    context = " ".join(recent_messages[-3:])
    return (
        f"–¢–∏ ‚Äî –ì—Ä—è–≥, –∞–±—Å—É—Ä–¥–Ω–∏–π –¥—É—Ö —á–∞—Ç—É. –û—Å—å –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {context}. "
        "–ù–∞–ø–∏—à–∏ —â–æ—Å—å –∫–æ—Ä–æ—Ç–∫–µ, –¥–æ—Ç–µ–ø–Ω–µ, —â–æ –≤—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, –∞–ª–µ –≤ –∞–±—Å—É—Ä–¥–Ω–æ–º—É —Å—Ç–∏–ª—ñ. "
        "–ù–µ –ø–∏—Ç–∞–π –Ω—ñ—á–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–π —Å–≤—ñ–π –∞–±—Å—É—Ä–¥–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä."
    )

def analyze_chat_mood(messages: list) -> str:
    """–ê–Ω–∞–ª—ñ–∑—É—î –Ω–∞—Å—Ç—Ä—ñ–π —á–∞—Ç—É –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    if not messages:
        return "—Ç–∏—à–∞"
    
    text_combined = " ".join([m.get("text", "") for m in messages[-5:]]).lower()
    
    # –ê–Ω–∞–ª—ñ–∑ –µ–º–æ—Ü—ñ–π
    if any(word in text_combined for word in ["üòÇ", "—Ö–∞—Ö–∞", "–ª–æ–ª", "–∂–∞—Ä—Ç", "–ø—Ä–∏–∫–æ–ª"]):
        return "–≤–µ—Å–µ–ª–∏–π"
    elif any(word in text_combined for word in ["üò¢", "—Å—É–º–Ω–æ", "–±—ñ–¥–∞", "–ø—Ä–æ–±–ª–µ–º–∞"]):
        return "—Å—É–º–Ω–∏–π" 
    elif any(word in text_combined for word in ["üò°", "–∑–ª—ñ—Å—Ç—å", "—Å–≤–∞—Ä–∫–∞", "–ª–∞–π–Ω–æ"]):
        return "–∑–ª–∏–π"
    elif any(word in text_combined for word in ["ü§î", "–¥—É–º–∞—é", "–ø–∏—Ç–∞–Ω–Ω—è", "?"]):
        return "—Ä–æ–∑–¥—É–º–ª–∏–≤–∏–π"
    elif len(text_combined.strip()) < 10:
        return "—Ç–∏—Ö–∏–π"
    else:
        return "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"
