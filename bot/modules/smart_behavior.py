# –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–∑—É–º–Ω–æ—ó –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—ñ —Ç–∞ –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—Ö–∏—Å—Ç—É
import time
import random
from datetime import datetime, timedelta
from collections import defaultdict
from bot.bot_config import PERSONA

# –¢—Ä–µ–∫—ñ–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
bot_activity = defaultdict(list)  # chat_id -> [timestamps]
user_activity = defaultdict(lambda: defaultdict(list))  # chat_id -> user_id -> [timestamps]
last_spontaneous = defaultdict(float)  # chat_id -> timestamp
spam_timeouts = defaultdict(float)  # chat_id -> end_timeout_timestamp

def track_user_activity(chat_id: int, user_id: int):
    """–í—ñ–¥—Å—Ç–µ–∂—É—î –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∏"""
    now = time.time()
    user_activity[chat_id][user_id].append(now)
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ —Ö–≤–∏–ª–∏–Ω–∏)
    minute_ago = now - 60
    user_activity[chat_id][user_id] = [ts for ts in user_activity[chat_id][user_id] if ts > minute_ago]

def is_spam_detected(chat_id: int, user_id: int = None) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤–∏—è–≤–ª–µ–Ω–æ —Å–ø–∞–º —É —á–∞—Ç—ñ - –ó–ú–ï–ù–®–ï–ù–û —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å"""
    now = time.time()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —á–∞—Ç –≤—Å–µ —â–µ –≤ —Ç–∞–π–º–∞—É—Ç—ñ
    if now < spam_timeouts[chat_id]:
        return True
    
    if user_id:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        recent_messages = len(user_activity[chat_id][user_id])
        if recent_messages >= PERSONA["spam_threshold"]:  # –¢–µ–ø–µ—Ä 8 –∑–∞–º—ñ—Å—Ç—å 6
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º'—è–∫—à–∏–π —Ç–∞–π–º–∞—É—Ç
            spam_timeouts[chat_id] = now + PERSONA["spam_timeout"]  # –¢–µ–ø–µ—Ä 120 —Å–µ–∫—É–Ω–¥
            return True
    
    return False

def get_spam_reply() -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–∞–¥–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å–ø–∞–º"""
    return random.choice(PERSONA["spam_replies"])

def should_reply_smart(chat_id: int, message_text: str = "") -> bool:
    """–†–æ–∑—É–º–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î, —á–∏ –≤–∞—Ä—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏"""
    now = time.time()
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ –≥–æ–¥–∏–Ω–∏)
    hour_ago = now - 3600
    bot_activity[chat_id] = [ts for ts in bot_activity[chat_id] if ts > hour_ago]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –≥–æ–¥–∏–Ω—É
    if len(bot_activity[chat_id]) >= PERSONA["max_replies_per_hour"]:
        return False
    
    # –Ø–∫—â–æ –∑–≥–∞–¥–∞–Ω–æ —Ç—Ä–∏–≥–µ—Ä–∏ - –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–∞–ª–µ –∑ –ª—ñ–º—ñ—Ç–æ–º)
    message_lower = message_text.lower()
    if any(trigger.strip() in message_lower for trigger in PERSONA["trigger_keywords"]):
        return True
    
    # –Ü–Ω–∞–∫—à–µ - –≤–∏–ø–∞–¥–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –Ω–∏–∑—å–∫–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é
    return random.random() < PERSONA["smart_reply_chance"]

def should_be_spontaneous(chat_id: int) -> bool:
    """–í–∏–∑–Ω–∞—á–∞—î, —á–∏ —á–∞—Å –¥–ª—è —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    if not PERSONA["autonomous_mode"]:
        return False
    
    now = time.time()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –ø–∞—É–∑—É –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    min_silence = PERSONA["spontaneous_min_pause"] * 60
    if now - last_spontaneous[chat_id] < min_silence:
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –Ω–∞ –≥–æ–¥–∏–Ω—É
    hour_ago = now - 3600
    bot_activity[chat_id] = [ts for ts in bot_activity[chat_id] if ts > hour_ago]
    if len(bot_activity[chat_id]) >= PERSONA["max_replies_per_hour"]:
        return False
    
    # –°–ø–æ–Ω—Ç–∞–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑ –Ω–∏–∑—å–∫–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é, –∞–ª–µ –≤–∏—â–∞ –ø—ñ—Å–ª—è –¥–æ–≤–≥–æ—ó —Ç–∏—à—ñ
    base_chance = PERSONA["spontaneous_chance"]
    
    # –ó–±—ñ–ª—å—à—É—î–º–æ —à–∞–Ω—Å, —è–∫—â–æ –¥–æ–≤–≥–æ –Ω–µ –±—É–ª–æ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    time_since_last = now - last_spontaneous[chat_id]
    if time_since_last > 7200:  # 2 –≥–æ–¥–∏–Ω–∏
        base_chance *= 3
    elif time_since_last > 3600:  # 1 –≥–æ–¥–∏–Ω–∞
        base_chance *= 2
    
    return random.random() < base_chance

def mark_bot_activity(chat_id: int, is_spontaneous: bool = False):
    """–ü–æ–∑–Ω–∞—á–∞—î –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–æ—Ç–∞"""
    now = time.time()
    bot_activity[chat_id].append(now)
    if is_spontaneous:
        last_spontaneous[chat_id] = now

def get_spontaneous_prompt(recent_messages: list) -> str:
    """–ì–µ–Ω–µ—Ä—É—î prompt –¥–ª—è —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    mood = analyze_chat_mood(recent_messages) if recent_messages else "—Ç–∏—à–∞"
    
    if not recent_messages:
        prompts = [
            "–¢–∏ ‚Äî –ì—Ä—è–≥, –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —á–∞—Ç-–±–æ—Ç. –í —á–∞—Ç—ñ –¥–æ–≤–≥–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –ù–∞–ø–∏—à–∏ —â–æ—Å—å –∫–æ—Ä–æ—Ç–∫–µ, —Ü—ñ–∫–∞–≤–µ –∞–±–æ –∫–æ—Ä–∏—Å–Ω–µ.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ß–∞—Ç –∑–∞–º–æ–≤–∫. –ù–∞–≥–∞–¥–∞–π –ø—Ä–æ —Å–µ–±–µ —è–∫–∏–º—Å—å –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –∞–±–æ –¥—É–º–∫–æ—é.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –°–ø–æ–∫—ñ–π —É —á–∞—Ç—ñ. –°–∫–∞–∂–∏ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ, —â–æ–± —Ä–æ–∑–±–∞–≤–∏—Ç–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ü–∞—É–∑–∞ –≤ —Ä–æ–∑–º–æ–≤—ñ. –ü–æ–¥—ñ–ª–∏—Å—è —è–∫–æ—é—Å—å –∫–æ—Ä–∏—Å–Ω–æ—é –¥—É–º–∫–æ—é –∞–±–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è–º.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –î–æ–≤–≥–∏–π –ø–µ—Ä–µ—Ä–∏–≤ —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π —Ü—ñ–∫–∞–≤—É —Ç–µ–º—É –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ó–∞—Ç–∏—à—à—è –≤ —á–∞—Ç—ñ. –†–æ–∑–∫–∞–∂–∏ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ –∞–±–æ –∫–æ—Ä–∏—Å–Ω–µ.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –°–ø–æ–∫—ñ–π–Ω–∞ —Ö–≤–∏–ª–∏–Ω–∫–∞. –ü–æ–¥—ñ–ª–∏—Å—è —Å–≤–æ—ó–º–∏ –¥—É–º–∫–∞–º–∏ –∞–±–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è–º–∏."
        ]
        return random.choice(prompts)
    
    context = " ".join(recent_messages[-3:])
    
    mood_prompts = {
        "–≤–µ—Å–µ–ª–∏–π": f"–¢–∏ ‚Äî –ì—Ä—è–≥. –í —á–∞—Ç—ñ –≤–µ—Å–µ–ª–æ: {context}. –î–æ–¥–∞–π —Å–≤—ñ–π –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –≤–µ—Å–µ–ª–æ—â—ñ–≤.",
        "—Å—É–º–Ω–∏–π": f"–¢–∏ ‚Äî –ì—Ä—è–≥. –í —á–∞—Ç—ñ —Å—É–º–Ω–æ: {context}. –°–∫–∞–∂–∏ —â–æ—Å—å –ø—ñ–¥–±–∞–¥—å–æ—Ä–ª–∏–≤–µ —Ç–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ.",
        "–∑–ª–∏–π": f"–¢–∏ ‚Äî –ì—Ä—è–≥. –í —á–∞—Ç—ñ –Ω–∞–ø—Ä—É–≥–∞: {context}. –†–æ–∑—Ä—è–¥—å —Å–∏—Ç—É–∞—Ü—ñ—é —Å–ø–æ–∫—ñ–π–Ω–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º.",
        "—Ä–æ–∑–¥—É–º–ª–∏–≤–∏–π": f"–¢–∏ ‚Äî –ì—Ä—è–≥. –í —á–∞—Ç—ñ —Ä–æ–∑–¥—É–º–∏: {context}. –î–æ–¥–∞–π —Å–≤–æ—é –∫–æ—Ä–∏—Å–Ω—É –¥—É–º–∫—É.",
        "—Å–ø–æ–∫—ñ–π–Ω–∏–π": f"–¢–∏ ‚Äî –ì—Ä—è–≥. –°–ø–æ–∫—ñ–π–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞: {context}. –°–∫–∞–∂–∏ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ, —â–æ–± –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É.",
        "–∞–∫—Ç–∏–≤–Ω–∏–π": f"–¢–∏ ‚Äî –ì—Ä—è–≥. –ß–∞—Ç –∞–∫—Ç–∏–≤–Ω–∏–π: {context}. –î–æ–ª—É—á–∏—Å—è –¥–æ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –∑ –∫–æ—Ä–∏—Å–Ω–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º."
    }
    
    default_prompt = f"–¢–∏ ‚Äî –ì—Ä—è–≥. –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {context}. –°–∫–∞–∂–∏ —â–æ—Å—å –¥—Ä—É–∂–µ–ª—é–±–Ω–µ, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."
    return mood_prompts.get(mood, default_prompt)

def analyze_chat_mood(messages: list) -> str:
    """–ê–Ω–∞–ª—ñ–∑—É—î –Ω–∞—Å—Ç—Ä—ñ–π —á–∞—Ç—É –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    if not messages:
        return "—Ç–∏—à–∞"
    
    text_combined = " ".join([m.get("text", "") for m in messages[-5:]]).lower()
    
    # –ê–Ω–∞–ª—ñ–∑ –µ–º–æ—Ü—ñ–π
    if any(word in text_combined for word in ["üòÇ", "—Ö–∞—Ö–∞", "–ª–æ–ª", "–∂–∞—Ä—Ç", "–ø—Ä–∏–∫–æ–ª"]):
        return "–≤–µ—Å–µ–ª–∏–π"
    elif any(word in text_combined for word in ["üò¢", "—Å—É–º–Ω–æ", "–±—ñ–¥–∞", "–ø—Ä–æ–±–ª–µ–º–∞"]):
        return "—Å—É–º–Ω–∏–π" 
    elif any(word in text_combined for word in ["üò°", "–∑–ª—ñ—Å—Ç—å", "—Å–≤–∞—Ä–∫–∞", "–ª–∞–π–Ω–æ"]):
        return "–∑–ª–∏–π"
    elif any(word in text_combined for word in ["ü§î", "–¥—É–º–∞—é", "–ø–∏—Ç–∞–Ω–Ω—è", "?"]):
        return "—Ä–æ–∑–¥—É–º–ª–∏–≤–∏–π"
    elif len(text_combined.strip()) < 10:
        return "—Ç–∏—Ö–∏–π"
    else:
        return "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"
