# –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import sqlite3
from bot.bot_config import DB_PATH, PERSONA
from .context_sqlite import get_recent_messages, add_message_to_context

def analyze_text_sentiment(text: str):
    """–ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞—Å—Ç—Ä–æ—é —Ç–µ–∫—Å—Ç—É —è–∫ fallback"""
    positive_words = ["–¥–æ–±—Ä–µ", "—á—É–¥–æ–≤–æ", "–∫–ª–∞—Å–Ω–æ", "—Å—É–ø–µ—Ä", "–≤—ñ–¥–º—ñ–Ω–Ω–æ"]
    negative_words = ["–ø–æ–≥–∞–Ω–æ", "–∂–∞—Ö–ª–∏–≤–æ", "—Å—É–º–Ω–æ", "–¥—Ä–∞—Ç—É—î", "–±—ñ—Å–∏—Ç—å"]
    
    text_lower = text.lower()
    positive_count = sum(1 for word in positive_words if word in text_lower)
    negative_count = sum(1 for word in negative_words if word in text_lower)
    
    if positive_count > negative_count:
        return {"sentiment": "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π", "score": 0.7}
    elif negative_count > positive_count:
        return {"sentiment": "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π", "score": 0.3}
    else:
        return {"sentiment": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π", "score": 0.5}

def build_enhanced_context(chat_id: int, recent_messages: List[Dict[str, Any]]) -> str:
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ –±–∞–≥–∞—Ç–æ—Ä—ñ–≤–Ω–µ–≤–æ—é –∞–≥—Ä–µ–≥–∞—Ü—ñ—î—é
    """
    if not recent_messages:
        return ""
    
    # 1. –§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    filtered_messages = filter_relevant_messages(recent_messages)
    
    # 2. –û—Ü—ñ–Ω–∫–∞ –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    scored_messages = score_messages(filtered_messages)
    
    # 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è summary –ø–æ –≥–æ–¥–∏–Ω–∞—Ö
    hourly_summaries = get_hourly_summaries(chat_id)
    
    # 4. –ê–Ω–∞–ª—ñ–∑ –Ω–∞—Å—Ç—Ä–æ—é —Ç–∞ —Ç–µ–º–∏
    mood_summary = analyze_chat_mood_and_topic(filtered_messages)
    
    # 5. –ó–±–∏—Ä–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    context_parts = []
    
    if mood_summary:
        context_parts.append(f"–ù–∞—Å—Ç—Ä—ñ–π —á–∞—Ç—É: {mood_summary}")
    
    if hourly_summaries:
        context_parts.append(f"–û—Å—Ç–∞–Ω–Ω—ñ —Ç–µ–º–∏: {'; '.join(hourly_summaries[-3:])}")
    
    # –î–æ–¥–∞—î–º–æ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    important_messages = [msg for msg in scored_messages if msg['score'] >= 7]
    if important_messages:
        context_parts.append("–í–∞–∂–ª–∏–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
        for msg in important_messages[-5:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 5 –≤–∞–∂–ª–∏–≤–∏—Ö
            context_parts.append(f"- {msg['text'][:100]}...")
    
    # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    recent_texts = [msg['text'] for msg in scored_messages[-10:]]
    if recent_texts:
        context_parts.append("–û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
        context_parts.extend([f"- {text[:80]}..." for text in recent_texts])
    
    final_context = "\n".join(context_parts)
    
    # –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    max_size = PERSONA.get("max_context_size", 5000)
    if len(final_context) > max_size:
        final_context = final_context[:max_size] + "...[–æ–±—Ä—ñ–∑–∞–Ω–æ]"
    
    return final_context

def build_context(chat_id: int, limit: int) -> str:
    """
    –§–æ—Ä–º—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —è–∫ –¥—ñ–∞–ª–æ–≥ –∑ —ñ–º–µ–Ω–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

    Args:
        chat_id: ID —á–∞—Ç—É.
        limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è.

    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
    """
    messages = get_recent_messages(chat_id, limit)
    if not messages:
        return "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è."

    dialogue = []
    for msg in messages:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∞–±–æ "–ù–µ–≤—ñ–¥–æ–º–∏–π", —è–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î
        user_name = msg.get('full_name') or msg.get('username') or '–ù–µ–≤—ñ–¥–æ–º–∏–π'
        text = msg.get('text', '')

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä—è–¥–æ–∫ –¥—ñ–∞–ª–æ–≥—É
        dialogue.append(f"{user_name}: {text}")

    return "\n".join(dialogue)

async def get_enhanced_context(chat_id: int, message_text: str, user_name: str, limit: int = 50) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –Ω–∞—Å—Ç—Ä–æ—é —Ç–∞ –¥—ñ–∞–ª–æ–≥–æ–º.
    """
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –¥—ñ–∞–ª–æ–≥—É
    dialogue_history = build_context(chat_id, limit)

    # –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
    final_context = (
        f"–ü–æ—Ç–æ—á–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π —É —á–∞—Ç—ñ: {mood}.\n"
        f"–û—Å—å –æ—Å—Ç–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—è –¥—ñ–∞–ª–æ–≥—É:\n"
        f"--- (–ø–æ—á–∞—Ç–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó) ---\n"
        f"{dialogue_history}\n"
        f"--- (–∫—ñ–Ω–µ—Ü—å —ñ—Å—Ç–æ—Ä—ñ—ó) ---\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á '{user_name}' —â–æ–π–Ω–æ –Ω–∞–ø–∏—Å–∞–≤: {message_text}"
    )
    return final_context

def filter_relevant_messages(messages: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """–§—ñ–ª—å—Ç—Ä—É—î —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    filtered = []
    seen_texts = set()
    
    for msg in messages:
        text = msg.get('text', '').strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ, –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–∞ —Å–ª—É–∂–±–æ–≤—ñ
        if not text or len(text) < 3:
            continue
        if text in seen_texts:
            continue
        if text.startswith('/') and len(text.split()) == 1:  # –ö–æ–º–∞–Ω–¥–∏
            continue
        
        seen_texts.add(text)
        filtered.append(msg)
    
    return filtered

def score_messages(messages: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """–û—Ü—ñ–Ω—é—î –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    for msg in messages:
        score = 5  # –ë–∞–∑–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        text = msg.get('text', '').lower()
        
        # –ë–æ–Ω—É—Å–∏ –∑–∞ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å
        if any(trigger in text for trigger in ['–≥—Ä—è–≥', '–±–æ—Ç', '@gryag_bot']):
            score += 3
        if '?' in text:
            score += 2
        if len(text) > 50:
            score += 1
        if any(word in text for word in ['–≤–∞–∂–ª–∏–≤–æ', '–¥–æ–ø–æ–º–æ–≥–∞', '–ø—Ä–æ–±–ª–µ–º–∞']):
            score += 2
        
        msg['score'] = score
    
    return messages

def get_hourly_summaries(chat_id: int) -> List[str]:
    """–û—Ç—Ä–∏–º—É—î —Ä–µ–∑—é–º–µ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –≥–æ–¥–∏–Ω–∏"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
        yesterday = datetime.now() - timedelta(hours=24)
        c.execute("""
            SELECT text, timestamp 
            FROM messages 
            WHERE chat_id = ? AND timestamp > ?
            ORDER BY timestamp DESC
            LIMIT 100
        """, (chat_id, yesterday.isoformat()))
        
        messages = c.fetchall()
        conn.close()
        
        if not messages:
            return []
        
        # –ì—Ä—É–ø—É—î–º–æ –∑–∞ –≥–æ–¥–∏–Ω–∞–º–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ summary
        hourly_groups = {}
        for text, timestamp in messages:
            try:
                hour = datetime.fromisoformat(timestamp).hour
                if hour not in hourly_groups:
                    hourly_groups[hour] = []
                hourly_groups[hour].append(text)
            except:
                continue
        
        summaries = []
        for hour in sorted(hourly_groups.keys(), reverse=True)[:6]:  # –û—Å—Ç–∞–Ω–Ω—ñ 6 –≥–æ–¥–∏–Ω
            texts = hourly_groups[hour]
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π summary
            common_words = extract_common_themes(texts)
            if common_words:
                summaries.append(f"{hour}:00 - {', '.join(common_words[:3])}")
        
        return summaries
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è hourly summaries: {e}")
        return []

def analyze_chat_mood_and_topic(messages: List[Dict[str, Any]]) -> str:
    """–ê–Ω–∞–ª—ñ–∑—É—î –Ω–∞—Å—Ç—Ä—ñ–π —Ç–∞ —Ç–µ–º—É —á–∞—Ç—É"""
    if not messages:
        return "—Å–ø–æ–∫—ñ–π–Ω–∏–π"
    
    all_text = " ".join([msg.get('text', '') for msg in messages[-10:]]).lower()
    
    # –ê–Ω–∞–ª—ñ–∑ –Ω–∞—Å—Ç—Ä–æ—é
    positive_words = ['–¥–æ–±—Ä–µ', '–∫–ª–∞—Å–Ω–æ', '—Å—É–ø–µ—Ä', '–∫—Ä—É—Ç–æ', '–≤–µ—Å–µ–ª–æ', 'üòä', 'üòÑ', 'üëç', '‚ù§Ô∏è']
    negative_words = ['–ø–æ–≥–∞–Ω–æ', '—Å—É–º–Ω–æ', '–∂–∞—Ö–ª–∏–≤–æ', '–ø—Ä–æ–±–ª–µ–º–∞', 'üò¢', 'üòû', 'üëé']
    question_words = ['—â–æ', '—è–∫', '–∫–æ–ª–∏', '–¥–µ', '—á–æ–º—É', '?']
    
    positive_count = sum(word in all_text for word in positive_words)
    negative_count = sum(word in all_text for word in negative_words)
    question_count = sum(word in all_text for word in question_words)
    
    if positive_count > negative_count + 1:
        mood = "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π"
    elif negative_count > positive_count + 1:
        mood = "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π"
    elif question_count > 2:
        mood = "–¥–æ–ø–∏—Ç–ª–∏–≤–∏–π"
    else:
        mood = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"
    
    return mood

def extract_common_themes(texts: List[str]) -> List[str]:
    """–í–∏—Ç—è–≥—É—î –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ–º–∏ –∑ —Ç–µ–∫—Å—Ç—ñ–≤"""
    words = []
    for text in texts:
        # –í–∏—Ç—è–≥—É—î–º–æ —Å–ª–æ–≤–∞ –¥–æ–≤–∂–∏–Ω–æ—é 4+ —Å–∏–º–≤–æ–ª–∏
        text_words = [word.lower() for word in text.split() if len(word) >= 4 and word.isalpha()]
        words.extend(text_words)
    
    # –†–∞—Ö—É—î–º–æ —á–∞—Å—Ç–æ—Ç–Ω—ñ—Å—Ç—å
    from collections import Counter
    word_counts = Counter(words)
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–ø —Å–ª–æ–≤–∞, –≤–∏–∫–ª—é—á–∞—é—á–∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    stop_words = {'—è–∫–∏–π', '—è–∫–∞', '—è–∫–µ', '—Ü–µ–π', '—Ü—è', '—Ü–µ', '—Ç–æ–π', '—Ç–∞', '—Ç–µ', '–º–µ–Ω–µ', '—Ç–µ–±–µ'}
    common_themes = [word for word, count in word_counts.most_common(10) 
                    if word not in stop_words and count > 1]
    
    return common_themes[:5]
