# –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–∑—É–º–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è —Å–∏—Ç—É–∞—Ü—ñ–π
import time
import random
import re
from datetime import datetime, timedelta
from collections import defaultdict
from bot.bot_config import PERSONA

# –†–æ–∑—à–∏—Ä–µ–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–æ–∑–º–æ–≤
CONVERSATION_PATTERNS = {
    "—Ç–µ—Ö–Ω—ñ—á–Ω–µ": [
        "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–∞", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Ñ—É–Ω–∫—Ü—ñ—è", "–±–∞–≥", "—Å–µ—Ä–≤–µ—Ä", "API", "git", 
        "python", "javascript", "react", "hooks", "–ø–æ–º–∏–ª–∫–∞", "–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç", 
        "–∫–æ–º–ø'—é—Ç–µ—Ä", "—Ç–µ—Ö–Ω—ñ—á–Ω", "–ø—Ä–æ–≥—Ä–∞–º—É–≤", "—Ä–æ–∑—Ä–æ–±–∫", "–±–µ–∫–µ–Ω–¥", "—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥", "–±–∞–∑–∞", 
        "–¥–∞–Ω–Ω–∏—Ö", "sql", "backend", "frontend", "up–∞–≤", "–æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è", "—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ", 
        "ai", "—à—Ç—É—á–Ω–∏–π", "—ñ–Ω—Ç–µ–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ–Ω–Ω", "–º–µ—Ä–µ–∂—ñ"
    ],
    "—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ": [
        "–∂–∏—Ç—Ç—è", "—Å–º–µ—Ä—Ç—å", "–ª—é–±–æ–≤", "—Å–µ–Ω—Å", "–º–µ—Ç–∞", "—â–æ —Ç–∞–∫–µ", "—á–æ–º—É", "—è–∫ –¥—É–º–∞—î—à", 
        "–±—É—Ç—Ç—è", "–¥—É—à–∞", "—Ä–æ–∑—É–º", "—Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å", "—Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å", "—ñ—Å—Ç–∏–Ω–∞", "–≤—ñ—Ä–∞", 
        "—Å–ø—Ä–∞–≤–∂–Ω", "–¥—Ä—É–∂–±–∞", "—ñ—Å–Ω—É—î", "–≤–∑–∞–≥–∞–ª—ñ", "–∫–≤–∞–Ω—Ç–æ–≤", "—Ñ—ñ–∑–∏–∫–∞", "–ø–∞—Ä–∞–ª–µ–ª—å–Ω", 
        "–≤—Å–µ—Å–≤—ñ—Ç", "—Ñ—ñ–ª–æ—Å–æ—Ñ", "–º—É–¥—Ä—ñ—Å—Ç—å", "—ñ—Å—Ç–∏–Ω"
    ],
    "–≤–µ—Å–µ–ª–µ": [
        "—Ö–∞—Ö–∞", "–ª–æ–ª", "üòÇ", "–∂–∞—Ä—Ç", "–ø—Ä–∏–∫–æ–ª", "—Å–º—ñ—à–Ω–æ", "–æ—Ä—É", "–º–µ–º", "–∫–µ–∫", "—Ä–∂—É", 
        "—Ö–∞—Ö–∞—Ö–∞", "–Ω–∞–π–∫—Ä–∞—â–∏–π", "—Ä–æ–∫—É", "–≤–µ—Å–µ–ª–æ", "üòÑ", "üòÜ", "ü§£"
    ],
    "–µ–º–æ—Ü—ñ–π–Ω–µ": [
        "üò¢", "üò≠", "üò°", "üíî", "—Å—É–º–Ω–æ", "–≤–µ—Å–µ–ª–æ", "–∑–ª–∏–π", "—Ä–∞–¥—ñ–π", "–ø–µ—Ä–µ–∂–∏–≤–∞—é", 
        "–±–æ–ª–∏—Ç—å", "—Å—Ç—Ä–∞–∂–¥–∞—é", "—â–∞—Å–ª–∏–≤–∏–π", "—Ç–∞–∫ —Å—É–º–Ω–æ", "–Ω–µ —Ö–æ—á–µ—Ç—å—Å—è", "–Ω—ñ—á–æ–≥–æ", 
        "—Ä–æ–±–∏—Ç–∏", "–Ω–∞—Å—Ç—Ä—ñ–π", "–ø–æ—á—É—Ç—Ç—è", "–µ–º–æ—Ü—ñ"
    ],
    "–ø–æ–±—É—Ç–æ–≤–µ": [
        "—ó–∂–∞", "—Ä–æ–±–æ—Ç–∞", "–Ω–∞–≤—á–∞–Ω–Ω—è", "–ø–æ–≥–æ–¥–∞", "–¥—ñ–º", "—Å—ñ–º'—è", "–ø–ª–∞–Ω–∏", "–≤—á–æ—Ä–∞", 
        "—Å—å–æ–≥–æ–¥–Ω—ñ", "–∑–∞–≤—Ç—Ä–∞", "–æ–±—ñ–¥", "–≤–µ—á–µ—Ä—è", "–º–∞–≥–∞–∑–∏–Ω", "–ø–æ–∫—É–ø–∫"
    ],
    "–∫–æ–Ω—Ñ–ª—ñ–∫—Ç": [
        "–¥—É—Ä–µ–Ω—å", "—ñ–¥—ñ–æ—Ç", "–Ω–µ –∑–≥–æ–¥–µ–Ω", "–Ω–µ–ø—Ä–∞–≤–∏–π", "—Ñ—ñ–≥–Ω—è", "–ª–∞–π–Ω–æ", "üò°", "ü§¨", 
        "–º—É–¥–∞–∫", "–∫—Ä–µ—Ç–∏–Ω", "–¥—É—Ä–∞–∫", "–ø—Ä–∏–∫–∏–¥–∞—î—à—Å—è", "—Ç—É–ø–∏–π", "–±–ª—è—Ç—å"
    ]
}

# –ï–º–æ—Ü—ñ–π–Ω—ñ –º–∞—Ä–∫–µ—Ä–∏
MOOD_INDICATORS = {
    "–ø–æ–∑–∏—Ç–∏–≤": ["–∫–ª–∞—Å–Ω–æ", "—Å—É–ø–µ—Ä", "–∫—Ä—É—Ç–æ", "–¥—è–∫—É—é", "–º–æ–ª–æ–¥–µ—Ü—å", "–≤–∞—É", "–æ–≥–æ", "‚ù§Ô∏è", "üòç", "üòä", "üëç", "üî•"],
    "–Ω–µ–≥–∞—Ç–∏–≤": ["–ø–æ–≥–∞–Ω–æ", "—Å—É–º–Ω–æ", "–∑–ª–∏–π", "–ª–∞–π–Ω–æ", "–±—ñ–¥–∞", "üò¢", "üò≠", "üò°", "üëé", "üí©"],
    "–Ω–µ–π—Ç—Ä–∞–ª": ["–¥—É–º–∞—é", "–º–∞–±—É—Ç—å", "–º–æ–∂–ª–∏–≤–æ", "—Ü—ñ–∫–∞–≤–æ", "ü§î", "üßê"],
    "–µ–Ω–µ—Ä–≥—ñ—è": ["–æ–≥–æ", "–≤–∞—É", "–∫–∞–ø–µ—Ü—å", "–Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ", "ü§Ø", "‚ö°", "üéâ"]
}

# –Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω–¥—ñ–≤
chat_analysis_history = defaultdict(list)  # chat_id -> [analysis_data]
last_intervention = defaultdict(float)  # chat_id -> timestamp

def analyze_conversation_context(message_text, recent_messages=None):
    """–ê–Ω–∞–ª—ñ–∑—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –±–æ—Ç–∞"""
    if not message_text:
        return {"type": "unknown", "mood": "neutral", "should_respond": False}
    
    text = message_text.lower()
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ä–æ–∑–º–æ–≤–∏
    conv_type = detect_conversation_type(text)
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –Ω–∞—Å—Ç—Ä—ñ–π
    mood = detect_mood(text)
    
    # –†—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ
    engagement = calculate_engagement_level(text, conv_type, mood)
    
    # –ß–∏ –≤–∞—Ä—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏
    should_respond = should_bot_respond(text, conv_type, mood, engagement)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ç–æ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    response_tone = get_response_tone(conv_type, mood)
    
    return {
        "type": conv_type,
        "mood": mood,
        "engagement": engagement,
        "should_respond": should_respond,
        "response_tone": response_tone,
        "keywords": extract_keywords(text)
    }

def detect_conversation_type(text):
    """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø —Ä–æ–∑–º–æ–≤–∏ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –∞–Ω–∞–ª—ñ–∑–æ–º"""
    scores = {}
    text_lower = text.lower()
    
    for conv_type, keywords in CONVERSATION_PATTERNS.items():
        score = 0
        for keyword in keywords:
            # –ü–æ—à—É–∫ —Ç–æ—á–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤ —Ç–∞ –ø—ñ–¥—Ä—è–¥–∫—ñ–≤
            if keyword in text_lower:
                score += 1
                # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥ —Å–ª–æ–≤–∞
                if f" {keyword} " in f" {text_lower} ":
                    score += 0.5
        scores[conv_type] = score
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
    
    # –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: –ø–æ–º–∏–ª–∫–∏, –∑'—î–¥–Ω–∞–Ω–Ω—è, –∫–æ–ª–µ–∫—Ü—ñ—ó
    if any(word in text_lower for word in ["–ø–æ–º–∏–ª–∫", "–ø—ñ–¥–∫–ª—é—á–µ–Ω", "–∫–æ–ª–µ–∫—Ü", "–ø–µ—Ä–ª–∏–Ω", "–æ–∫–µ–∞–Ω", "—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç"]):
        scores["—Ç–µ—Ö–Ω—ñ—á–Ω–µ"] = scores.get("—Ç–µ—Ö–Ω—ñ—á–Ω–µ", 0) + 2
    
    # –§—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: –º–µ—Ç–∞—Ñ–æ—Ä–∏, –≥–ª–∏–±–æ–∫—ñ –¥—É–º–∫–∏
    if any(word in text_lower for word in ["—Ç–∞—î–º–Ω–∏—á", "–≥–ª–∏–±–∏–Ω", "—Å–µ–Ω—Å", "–±—É—Ç—Ç—è", "—Ä–µ–∞–ª—å–Ω"]):
        scores["—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ"] = scores.get("—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ", 0) + 2
    
    # –ü–æ–µ—Ç–∏—á–Ω–∏–π/—Ç–≤–æ—Ä—á–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if any(word in text_lower for word in ["–ø–µ—Ä–ª–∏–Ω", "–æ–∫–µ–∞–Ω", "–ø–∞–≤—É—Ç–∏–Ω", "—Ä–æ–∑—É—â–µ–Ω"]):
        scores["—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ"] = scores.get("—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ", 0) + 1.5
    
    if max(scores.values()) > 0:
        return max(scores, key=scores.get)
    return "–∑–∞–≥–∞–ª—å–Ω–µ"

def detect_mood(text):
    """–í–∏–∑–Ω–∞—á–∞—î –Ω–∞—Å—Ç—Ä—ñ–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    scores = {}
    for mood, indicators in MOOD_INDICATORS.items():
        score = sum(1 for indicator in indicators if indicator in text)
        scores[mood] = score
    
    if max(scores.values()) > 0:
        return max(scores, key=scores.get)
    return "–Ω–µ–π—Ç—Ä–∞–ª"

def calculate_engagement_level(text, conv_type, mood):
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ä—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞ (1-10)"""
    base_level = 3
    
    # –ó–≥–∞–¥–∫–∏ –±–æ—Ç–∞
    bot_keywords = PERSONA.get("trigger_keywords", ["–≥—Ä—è–≥", "–±–æ—Ç"])
    bot_mentions = sum(1 for keyword in bot_keywords if keyword.strip() in text)
    base_level += bot_mentions * 3
    
    # –¢–∏–ø —Ä–æ–∑–º–æ–≤–∏
    type_bonuses = {
        "—Ç–µ—Ö–Ω—ñ—á–Ω–µ": 2,
        "—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ": 2,
        "–≤–µ—Å–µ–ª–µ": 1,
        "–µ–º–æ—Ü—ñ–π–Ω–µ": 1,
        "–∫–æ–Ω—Ñ–ª—ñ–∫—Ç": -1
    }
    base_level += type_bonuses.get(conv_type, 0)
    
    # –ù–∞—Å—Ç—Ä—ñ–π
    mood_bonuses = {
        "–ø–æ–∑–∏—Ç–∏–≤": 1,
        "–Ω–µ–≥–∞—Ç–∏–≤": -1,
        "–µ–Ω–µ—Ä–≥—ñ—è": 2,
        "–Ω–µ–π—Ç—Ä–∞–ª": 1
    }
    base_level += mood_bonuses.get(mood, 0)
    
    # –ü–∏—Ç–∞–Ω–Ω—è
    if "?" in text:
        base_level += 2
    
    return max(1, min(10, base_level))

def should_bot_respond(text, conv_type, mood, engagement):
    """–í–∏–∑–Ω–∞—á–∞—î —á–∏ –≤–∞—Ä—Ç–æ –±–æ—Ç—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏"""
    # –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –∑–≥–∞–¥–∫–∏
    bot_keywords = PERSONA.get("trigger_keywords", ["–≥—Ä—è–≥", "–±–æ—Ç"])
    if any(keyword.strip() in text for keyword in bot_keywords):
        return True
    
    # –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ
    if engagement >= 7:
        return True
    
    # –ö–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ - –¥–ª—è —Ä–æ–∑—Ä—è–¥–∫–∏
    if conv_type == "–∫–æ–Ω—Ñ–ª—ñ–∫—Ç":
        return random.random() < 0.6
    
    # –§—ñ–ª–æ—Å–æ—Ñ—Å—å–∫—ñ —Ç–∞ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –¥–∏—Å–∫—É—Å—ñ—ó
    if conv_type in ["—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ", "—Ç–µ—Ö–Ω—ñ—á–Ω–µ"]:
        return random.random() < 0.4
    
    # –ü–∏—Ç–∞–Ω–Ω—è
    if "?" in text:
        return random.random() < 0.3
    
    # –ë–∞–∑–æ–≤–∏–π —à–∞–Ω—Å
    return random.random() < PERSONA.get("smart_reply_chance", 0.1)

def get_response_tone(conv_type, mood):
    """–†–µ–∫–æ–º–µ–Ω–¥—É—î —Ç–æ–Ω –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
    tone_map = {
        ("—Ç–µ—Ö–Ω—ñ—á–Ω–µ", "–ø–æ–∑–∏—Ç–∏–≤"): "—Ä–æ–∑—É–º–Ω–∏–π_–∂–∞—Ä—Ç",
        ("—Ç–µ—Ö–Ω—ñ—á–Ω–µ", "–Ω–µ–π—Ç—Ä–∞–ª"): "—Ä–æ–∑—É–º–Ω–∏–π_–∞–±—Å—É—Ä–¥",
        ("—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ", "–Ω–µ–π—Ç—Ä–∞–ª"): "–≥–ª–∏–±–æ–∫–∏–π_–∞–±—Å—É—Ä–¥",
        ("—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ", "–ø–æ–∑–∏—Ç–∏–≤"): "–º—É–¥—Ä–∏–π_–≥—É–º–æ—Ä",
        ("–≤–µ—Å–µ–ª–µ", "–ø–æ–∑–∏—Ç–∏–≤"): "–≤–µ—Å–µ–ª–∏–π_–∞–±—Å—É—Ä–¥",
        ("–≤–µ—Å–µ–ª–µ", "–µ–Ω–µ—Ä–≥—ñ—è"): "–µ–Ω–µ—Ä–≥—ñ–π–Ω–∏–π_–≥—É–º–æ—Ä",
        ("–µ–º–æ—Ü—ñ–π–Ω–µ", "–Ω–µ–≥–∞—Ç–∏–≤"): "–ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–π_–∞–±—Å—É—Ä–¥",
        ("–µ–º–æ—Ü—ñ–π–Ω–µ", "–ø–æ–∑–∏—Ç–∏–≤"): "—Ä–∞–¥—ñ—Å–Ω–∏–π_–≥—É–º–æ—Ä",
        ("–∫–æ–Ω—Ñ–ª—ñ–∫—Ç", "–Ω–µ–≥–∞—Ç–∏–≤"): "—Ä–æ–∑—Ä—è–¥–∂–∞—é—á–∏–π_–∞–±—Å—É—Ä–¥",
        ("–ø–æ–±—É—Ç–æ–≤–µ", "–Ω–µ–π—Ç—Ä–∞–ª"): "–ª–µ–≥–∫–∏–π_–≥—É–º–æ—Ä"
    }
    
    return tone_map.get((conv_type, mood), "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π_–∞–±—Å—É—Ä–¥")

def extract_keywords(text):
    """–í–∏—Ç—è–≥—É—î –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞"""
    words = re.findall(r'\b\w{4,}\b', text.lower())
    stop_words = {"—è–∫–∏–π", "—è–∫–∞", "—è–∫–µ", "—Ü–µ–π", "—Ü—è", "—Ü–µ", "—Ç–æ–π", "—Ç–∞", "—Ç–µ"}
    keywords = [word for word in words if word not in stop_words]
    return sorted(set(keywords), key=len, reverse=True)[:5]

def create_context_aware_prompt(message_text, analysis):
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–º—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    base_prompt = "–¢–∏ ‚Äî –ì—Ä—è–≥, –∞–±—Å—É—Ä–¥–Ω–∏–π –¥—É—Ö —á–∞—Ç—É –∑ –¥–æ—Ç–µ–ø–Ω–∏–º –≥—É–º–æ—Ä–æ–º."
    
    context_info = f"""
–°–∏—Ç—É–∞—Ü—ñ—è:
- –¢–∏–ø —Ä–æ–∑–º–æ–≤–∏: {analysis['type']}
- –ù–∞—Å—Ç—Ä—ñ–π: {analysis['mood']}
- –†—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ: {analysis['engagement']}/10
- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ç–æ–Ω: {analysis['response_tone']}

–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "{message_text}"
"""
    
    tone_instructions = {
        "—Ä–æ–∑—É–º–Ω–∏–π_–∂–∞—Ä—Ç": "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ä–æ–∑—É–º–Ω–æ, –∞–ª–µ –∑ –¥–æ—Ç–µ–ø–Ω–∏–º–∏ –∂–∞—Ä—Ç–∞–º–∏.",
        "—Ä–æ–∑—É–º–Ω–∏–π_–∞–±—Å—É—Ä–¥": "–ë—É–¥—å —Ä–æ–∑—É–º–Ω–∏–º, –∞–ª–µ –∑ –∞–±—Å—É—Ä–¥–Ω–∏–º–∏ –≤–∏—Å–Ω–æ–≤–∫–∞–º–∏.",
        "–≥–ª–∏–±–æ–∫–∏–π_–∞–±—Å—É—Ä–¥": "–§—ñ–ª–æ—Å–æ—Ñ—Å—Ç–≤—É–π –∞–±—Å—É—Ä–¥–Ω–æ, —Å—Ç–∞–≤—å –¥–∏–≤–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è.",
        "–≤–µ—Å–µ–ª–∏–π_–∞–±—Å—É—Ä–¥": "–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–º—ñ—à–Ω–∏–º —Ç–∞ –∞–±—Å—É—Ä–¥–Ω–∏–º.",
        "–ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–π_–∞–±—Å—É—Ä–¥": "–ü—ñ–¥—Ç—Ä–∏–º–∞–π, –∞–ª–µ –∞–±—Å—É—Ä–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º.",
        "—Ä–æ–∑—Ä—è–¥–∂–∞—é—á–∏–π_–∞–±—Å—É—Ä–¥": "–†–æ–∑—Ä—è–¥—å –Ω–∞–ø—Ä—É–≥—É –∞–±—Å—É—Ä–¥–Ω–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º."
    }
    
    instruction = tone_instructions.get(analysis['response_tone'], "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É —Å–≤–æ—î–º—É –∞–±—Å—É—Ä–¥–Ω–æ–º—É —Å—Ç–∏–ª—ñ.")
    
    return f"{base_prompt}\n{context_info}\n\n–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: {instruction}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ (1-2 —Ä–µ—á–µ–Ω–Ω—è), –¥–æ—Ç–µ–ø–Ω–æ —Ç–∞ –ø–æ-—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏."

def update_chat_analysis(chat_id, analysis):
    """–û–Ω–æ–≤–ª—é—î —ñ—Å—Ç–æ—Ä—ñ—é –∞–Ω–∞–ª—ñ–∑—É —á–∞—Ç—É"""
    timestamp = time.time()
    chat_analysis_history[chat_id].append({
        "timestamp": timestamp,
        "type": analysis["type"],
        "mood": analysis["mood"],
        "engagement": analysis["engagement"]
    })
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100 –∑–∞–ø–∏—Å—ñ–≤
    chat_analysis_history[chat_id] = chat_analysis_history[chat_id][-100:]

def get_chat_trends(chat_id, hours=6):
    """–ê–Ω–∞–ª—ñ–∑—É—î —Ç—Ä–µ–Ω–¥–∏ —á–∞—Ç—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –≥–æ–¥–∏–Ω–∏"""
    current_time = time.time()
    cutoff_time = current_time - (hours * 3600)
    
    recent_analysis = [
        a for a in chat_analysis_history[chat_id] 
        if a["timestamp"] > cutoff_time
    ]
    
    if not recent_analysis:
        return {"activity": "low", "mood_trend": "stable", "topics": []}
    
    # –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    activity_level = "high" if len(recent_analysis) > 20 else "medium" if len(recent_analysis) > 5 else "low"
    
    # –¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ—é
    moods = [a["mood"] for a in recent_analysis]
    positive_moods = sum(1 for mood in moods if mood in ["–ø–æ–∑–∏—Ç–∏–≤", "–µ–Ω–µ—Ä–≥—ñ—è"])
    mood_trend = "positive" if positive_moods > len(moods) // 2 else "negative" if positive_moods < len(moods) // 3 else "stable"
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ñ —Ç–µ–º–∏
    topics = [a["type"] for a in recent_analysis]
    topic_counts = {}
    for topic in topics:
        topic_counts[topic] = topic_counts.get(topic, 0) + 1
    popular_topics = sorted(topic_counts.items(), key=lambda x: x[1], reverse=True)[:3]
    
    return {
        "activity": activity_level,
        "mood_trend": mood_trend,
        "topics": [topic for topic, count in popular_topics],
        "engagement_avg": sum(a["engagement"] for a in recent_analysis) / len(recent_analysis)
    }

def should_intervene_spontaneously(chat_id):
    """–í–∏–∑–Ω–∞—á–∞—î —á–∏ –≤–∞—Ä—Ç–æ –≤—Ç—Ä—É—Ç–∏—Ç–∏—Å—è —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ"""
    current_time = time.time()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ç—Ä—É—á–∞–Ω–Ω—è
    time_since_last = current_time - last_intervention[chat_id]
    
    # –ú—ñ–Ω—ñ–º—É–º 30 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∏–º–∏ –≤—Ç—Ä—É—á–∞–Ω–Ω—è–º–∏
    if time_since_last < 1800:
        return False
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—Ä–µ–Ω–¥–∏
    trends = get_chat_trends(chat_id)
    
    # –í—Ç—Ä—É—á–∞—î–º–æ—Å—è –ø—Ä–∏ –Ω–∏–∑—å–∫—ñ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–æ–∂–∏–≤–∏—Ç–∏ —á–∞—Ç)
    if trends["activity"] == "low" and time_since_last > 3600:
        return random.random() < 0.3
    
    # –í—Ç—Ä—É—á–∞—î–º–æ—Å—è –ø—Ä–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–¥—ñ (–ø—ñ–¥–Ω—è—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π)
    if trends["mood_trend"] == "negative":
        return random.random() < 0.4
    
    # –ë–∞–∑–æ–≤–∞ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ñ—Å—Ç—å
    return random.random() < PERSONA.get("spontaneous_chance", 0.02)

def mark_intervention(chat_id):
    """–ü–æ–∑–Ω–∞—á–∞—î —â–æ –±–æ—Ç –≤—Ç—Ä—É—Ç–∏–≤—Å—è"""
    last_intervention[chat_id] = time.time()

def get_spontaneous_prompt_based_on_trends(chat_id):
    """–ì–µ–Ω–µ—Ä—É—î —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∏–π –ø—Ä–æ–º—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç—Ä–µ–Ω–¥—ñ–≤ —á–∞—Ç—É"""
    trends = get_chat_trends(chat_id)
    
    if trends["activity"] == "low":
        prompts = [
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –í —á–∞—Ç—ñ –¥–æ–≤–≥–æ —Ç–∏—à–∞. –°–∫–∞–∂–∏ —â–æ—Å—å –∞–±—Å—É—Ä–¥–Ω–æ-—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ —â–æ–± –æ–∂–∏–≤–∏—Ç–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ß–∞—Ç –∑–∞–º–æ–≤–∫. –ü–æ–¥—ñ–ª–∏—Å—å —è–∫–æ—é—Å—å –¥–∏–≤–Ω–æ—é –¥—É–º–∫–æ—é –∞–±–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è–º.",
        ]
    elif trends["mood_trend"] == "negative":
        prompts = [
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –í —á–∞—Ç—ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π. –°–∫–∞–∂–∏ —â–æ—Å—å –∞–±—Å—É—Ä–¥–Ω–æ-–ø—ñ–¥–±–∞–¥—å–æ—Ä–ª–∏–≤–µ.",
            "–¢—ã ‚Äî –ì—Ä—è–≥. –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–Ω—è—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π. –°–∫–∞–∂–∏ —â–æ—Å—å –¥–∏–≤–Ω–µ –∞–ª–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ.",
        ]
    else:
        prompts = [
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –°–∫–∞–∂–∏ —â–æ—Å—å –∞–±—Å—É—Ä–¥–Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, —â–æ–± –Ω–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ —Å–µ–±–µ.",
            "–¢—ã ‚Äî –ì—Ä—è–≥. –ß–∞—Å –¥–ª—è —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—ó –∞–±—Å—É—Ä–¥–Ω–æ—ó –¥—É–º–∫–∏ –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è.",
        ]
    
    return random.choice(prompts)
