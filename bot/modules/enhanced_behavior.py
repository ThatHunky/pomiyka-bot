# –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–∑—É–º–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è —Å–∏—Ç—É–∞—Ü—ñ–π
import time
import random
from datetime import datetime, timedelta
from collections import defaultdict, deque
import re
from typing import Dict, List, Any, Optional, Tuple
from aiogram.types import Message
from bot.bot_config import PERSONA
from . import context_sqlite
from .token_counter import token_counter
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –†–æ–∑—à–∏—Ä–µ–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–æ–∑–º–æ–≤
CONVERSATION_PATTERNS = {
    "—Ç–µ—Ö–Ω—ñ—á–Ω–µ": [
        "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–∞", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Ñ—É–Ω–∫—Ü—ñ—è", "–±–∞–≥", "—Å–µ—Ä–≤–µ—Ä", "API", "git", 
        "python", "javascript", "react", "hooks", "–ø–æ–º–∏–ª–∫–∞", "–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç", 
        "–∫–æ–º–ø'—é—Ç–µ—Ä", "—Ç–µ—Ö–Ω—ñ—á–Ω", "–ø—Ä–æ–≥—Ä–∞–º—É–≤", "—Ä–æ–∑—Ä–æ–±–∫", "–±–µ–∫–µ–Ω–¥", "—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥", "–±–∞–∑–∞", 
        "–¥–∞–Ω–Ω–∏—Ö", "sql", "backend", "frontend", "up–∞–≤", "–æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è", "—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ", 
        "ai", "—à—Ç—É—á–Ω–∏–π", "—ñ–Ω—Ç–µ–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ–Ω–Ω", "–º–µ—Ä–µ–∂—ñ"
    ],
    "—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ": [
        "–∂–∏—Ç—Ç—è", "—Å–º–µ—Ä—Ç—å", "–ª—é–±–æ–≤", "—Å–µ–Ω—Å", "–º–µ—Ç–∞", "—â–æ —Ç–∞–∫–µ", "—á–æ–º—É", "—è–∫ –¥—É–º–∞—î—à", 
        "–±—É—Ç—Ç—è", "–¥—É—à–∞", "—Ä–æ–∑—É–º", "—Å–≤—ñ–¥–æ–º—ñ—Å—Ç—å", "—Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å", "—ñ—Å—Ç–∏–Ω–∞", "–≤—ñ—Ä–∞", 
        "—Å–ø—Ä–∞–≤–∂–Ω", "–¥—Ä—É–∂–±–∞", "—ñ—Å–Ω—É—î", "–≤–∑–∞–≥–∞–ª—ñ", "–∫–≤–∞–Ω—Ç–æ–≤", "—Ñ—ñ–∑–∏–∫–∞", "–ø–∞—Ä–∞–ª–µ–ª—å–Ω", 
        "–≤—Å–µ—Å–≤—ñ—Ç", "—Ñ—ñ–ª–æ—Å–æ—Ñ", "–º—É–¥—Ä—ñ—Å—Ç—å", "—ñ—Å—Ç–∏–Ω"
    ],
    "–≤–µ—Å–µ–ª–µ": [
        "—Ö–∞—Ö–∞", "–ª–æ–ª", "üòÇ", "–∂–∞—Ä—Ç", "–ø—Ä–∏–∫–æ–ª", "—Å–º—ñ—à–Ω–æ", "–æ—Ä—É", "–º–µ–º", "–∫–µ–∫", "—Ä–∂—É", 
        "—Ö–∞—Ö–∞—Ö–∞", "–Ω–∞–π–∫—Ä–∞—â–∏–π", "—Ä–æ–∫—É", "–≤–µ—Å–µ–ª–æ", "üòÑ", "üòÜ", "ü§£"
    ],
    "–µ–º–æ—Ü—ñ–π–Ω–µ": [
        "üò¢", "üò≠", "üò°", "üíî", "—Å—É–º–Ω–æ", "–≤–µ—Å–µ–ª–æ", "–∑–ª–∏–π", "—Ä–∞–¥—ñ–π", "–ø–µ—Ä–µ–∂–∏–≤–∞—é", 
        "–±–æ–ª–∏—Ç—å", "—Å—Ç—Ä–∞–∂–¥–∞—é", "—â–∞—Å–ª–∏–≤–∏–π", "—Ç–∞–∫ —Å—É–º–Ω–æ", "–Ω–µ —Ö–æ—á–µ—Ç—å—Å—è", "–Ω—ñ—á–æ–≥–æ", 
        "—Ä–æ–±–∏—Ç–∏", "–Ω–∞—Å—Ç—Ä—ñ–π", "–ø–æ—á—É—Ç—Ç—è", "–µ–º–æ—Ü—ñ"
    ],
    "–ø–æ–±—É—Ç–æ–≤–µ": [
        "—ó–∂–∞", "—Ä–æ–±–æ—Ç–∞", "–Ω–∞–≤—á–∞–Ω–Ω—è", "–ø–æ–≥–æ–¥–∞", "–¥—ñ–º", "—Å—ñ–º'—è", "–ø–ª–∞–Ω–∏", "–≤—á–æ—Ä–∞", 
        "—Å—å–æ–≥–æ–¥–Ω—ñ", "–∑–∞–≤—Ç—Ä–∞", "–æ–±—ñ–¥", "–≤–µ—á–µ—Ä—è", "–º–∞–≥–∞–∑–∏–Ω", "–ø–æ–∫—É–ø–∫"
    ],
    "–∫–æ–Ω—Ñ–ª—ñ–∫—Ç": [
        "–¥—É—Ä–µ–Ω—å", "—ñ–¥—ñ–æ—Ç", "–Ω–µ –∑–≥–æ–¥–µ–Ω", "–Ω–µ–ø—Ä–∞–≤–∏–π", "—Ñ—ñ–≥–Ω—è", "–ª–∞–π–Ω–æ", "üò°", "ü§¨", 
        "–º—É–¥–∞–∫", "–∫—Ä–µ—Ç–∏–Ω", "–¥—É—Ä–∞–∫", "–ø—Ä–∏–∫–∏–¥–∞—î—à—Å—è", "—Ç—É–ø–∏–π", "–±–ª—è—Ç—å"
    ]
}

# –ï–º–æ—Ü—ñ–π–Ω—ñ –º–∞—Ä–∫–µ—Ä–∏
MOOD_INDICATORS = {
    "–ø–æ–∑–∏—Ç–∏–≤": ["–∫–ª–∞—Å–Ω–æ", "—Å—É–ø–µ—Ä", "–∫—Ä—É—Ç–æ", "–¥—è–∫—É—é", "–º–æ–ª–æ–¥–µ—Ü—å", "–≤–∞—É", "–æ–≥–æ", "‚ù§Ô∏è", "üòç", "üòä", "üëç", "üî•"],
    "–Ω–µ–≥–∞—Ç–∏–≤": ["–ø–æ–≥–∞–Ω–æ", "—Å—É–º–Ω–æ", "–∑–ª–∏–π", "–ª–∞–π–Ω–æ", "–±—ñ–¥–∞", "üò¢", "üò≠", "üò°", "üëé", "üí©"],
    "–Ω–µ–π—Ç—Ä–∞–ª": ["–¥—É–º–∞—é", "–º–∞–±—É—Ç—å", "–º–æ–∂–ª–∏–≤–æ", "—Ü—ñ–∫–∞–≤–æ", "ü§î", "üßê"],
    "–µ–Ω–µ—Ä–≥—ñ—è": ["–æ–≥–æ", "–≤–∞—É", "–∫–∞–ø–µ—Ü—å", "–Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ", "ü§Ø", "‚ö°", "üéâ"]
}

# –Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω–¥—ñ–≤  
chat_analysis_history: Dict[int, List[Dict[str, Any]]] = defaultdict(list)
last_intervention: Dict[int, float] = defaultdict(float)

# –î–æ–¥–∞–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è —Ä–æ–∑—É–º–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ —Å–ø–∞–º—É —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
chat_message_frequency: Dict[int, deque[float]] = defaultdict(deque)  # –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ —á–∞—Ç–∞—Ö
context_compression_cache: Dict[int, Dict[str, Any]] = defaultdict(dict)  # –ö–µ—à —Å—Ç–∏—Å–Ω–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
spam_detection_scores: Dict[int, Dict[str, float]] = defaultdict(lambda: defaultdict(float))  # –û—Ü—ñ–Ω–∫–∏ —Å–ø–∞–º—É

def analyze_conversation_context(message_text: str, recent_messages: Optional[List[str]] = None) -> Dict[str, Any]:
    """–ê–Ω–∞–ª—ñ–∑—É—î —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø, –Ω–∞—Å—Ç—Ä—ñ–π —Ç–∞ –∑–∞–ª—É—á–µ–Ω—ñ—Å—Ç—å."""
    conv_type = detect_conversation_type(message_text)
    mood = detect_mood(message_text)
    engagement = calculate_engagement_level(message_text, conv_type, mood)
    keywords = extract_keywords(message_text)
    
    return {
        "type": conv_type,
        "mood": mood,
        "engagement": engagement,
        "keywords": keywords,
        "should_respond": should_bot_respond(message_text, conv_type, mood, engagement)
    }

def detect_conversation_type(text: str) -> str:
    """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø —Ä–æ–∑–º–æ–≤–∏ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."""
    scores: Dict[str, int] = defaultdict(int)
    text_lower = text.lower()
    for conv_type, patterns in CONVERSATION_PATTERNS.items():
        for pattern in patterns:
            if pattern in text_lower:
                scores[conv_type] += 1
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
    if "?" in text and scores.get("—Ç–µ—Ö–Ω—ñ—á–Ω–µ", 0) > 0:
        scores["—Ç–µ—Ö–Ω—ñ—á–Ω–µ"] = scores.get("—Ç–µ—Ö–Ω—ñ—á–Ω–µ", 0) + 2

    if "—è–∫ –¥—É–º–∞—î—à" in text_lower and scores.get("—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ", 0) > 0:
        scores["—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ"] = scores.get("—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ", 0) + 2

    if len(re.findall(r'[üòÇü§£üòÑüòÜ]', text)) > 1:
        scores["–≤–µ—Å–µ–ª–µ"] = scores.get("–≤–µ—Å–µ–ª–µ", 0) + 1.5

    if scores:
        return max(scores, key=scores.get) if scores else '–ø–æ–±—É—Ç–æ–≤–µ'
    return '–ø–æ–±—É—Ç–æ–≤–µ'

def detect_mood(text: str) -> str:
    """–í–∏–∑–Ω–∞—á–∞—î –Ω–∞—Å—Ç—Ä—ñ–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    scores: Dict[str, int] = defaultdict(int)
    text_lower = text.lower()
    for mood, indicators in MOOD_INDICATORS.items():
        for indicator in indicators:
            if indicator in text_lower:
                scores[mood] += 1
    if scores:
        return max(scores, key=scores.get) if scores else '–Ω–µ–π—Ç—Ä–∞–ª'
    return '–Ω–µ–π—Ç—Ä–∞–ª'

def calculate_engagement_level(text: str, conv_type: str, mood: str) -> int:
    """–û—Ü—ñ–Ω—é—î —Ä—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ (1-10)."""
    score = 5  # –±–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å
    if '–ì—Ä—è–≥' in text or '@gryag_bot' in text:
        score += 3
    if '??' in text:
        score += 2
    if len(text) > 100:
        score += 1
    if conv_type in ["—Ç–µ—Ö–Ω—ñ—á–Ω–µ", "—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ", "–∫–æ–Ω—Ñ–ª—ñ–∫—Ç"]:
        score += 1
    if mood in ["–ø–æ–∑–∏—Ç–∏–≤", "–µ–Ω–µ—Ä–≥—ñ—è"]:
        score += 1
    return min(max(1, score), 10)

def should_bot_respond(text: str, conv_type: str, mood: str, engagement: int) -> bool:
    """–í–∏—Ä—ñ—à—É—î, —á–∏ –≤–∞—Ä—Ç–æ –±–æ—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏."""
    if engagement > 7:
        return True
    if conv_type == "–∫–æ–Ω—Ñ–ª—ñ–∫—Ç" and mood == "–Ω–µ–≥–∞—Ç–∏–≤":
        return False  # –ù–µ –≤—Ç—Ä—É—á–∞—î–º–æ—Å—å —É –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏
    if PERSONA.get("smart_reply_chance", 0.1) > random.random():
        return True
    return False

def get_response_tone(conv_type: str, mood: str) -> str:
    """–í–∏–∑–Ω–∞—á–∞—î —Ç–æ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."""
    tone_map = PERSONA.get("tone_mappings", {})
    return tone_map.get((conv_type, mood), "–ø—Ä–∏—Ä–æ–¥–Ω–µ_—Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è")

def extract_keywords(text: str) -> List[str]:
    """–í–∏—Ç—è–≥—É—î –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞."""
    words = re.findall(r'\b\w{4,}\b', text.lower())
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω—É –ª–æ–≥—ñ–∫—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, TF-IDF
    return list(set(words))[:5] # 5 –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏—Ö —Å–ª—ñ–≤

def get_tone_instruction(analysis: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –ø–æ —Ç–æ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É."""
    tone = get_response_tone(analysis['type'], analysis['mood'])
    return PERSONA["tone_mappings"].get(tone, "–°–ø—ñ–ª–∫—É–π—Å—è –ø—Ä–∏—Ä–æ–¥–Ω–æ —ñ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.")


def create_context_aware_prompt(message: Message, analysis: Dict[str, Any]) -> Tuple[str, str]:
    """
    –°—Ç–≤–æ—Ä—é—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç —ñ —Å–∏—Å—Ç–µ–º–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è Gemini,
    –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—é –¥—ñ–∞–ª–æ–≥—É.
    """
    chat_id = message.chat.id
    user_name = message.from_user.full_name if message.from_user else "–ê–Ω–æ–Ω—ñ–º"
    
    # 1. –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥—ñ–∞–ª–æ–≥—É –∑ —ñ–º–µ–Ω–∞–º–∏
    messages = context_sqlite.get_context(chat_id, limit=PERSONA.get("context_limit", 50))
    dialog_lines = []
    for msg in messages:
        dialog_user_name = msg.get("user_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
        text = msg.get("text", "")
        if text:
            dialog_lines.append(f"{dialog_user_name}: {text}")
    dialog_context = "\n".join(dialog_lines)

    # 2. –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç
    prompt = (
        f"–û—Å—å —ñ—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É:\n{dialog_context}\n\n"
        f"–ó–∞—Ä–∞–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á '{user_name}' –ø–∏—à–µ:\n{message.text}\n\n"
        f"–ì—Ä—è–≥, —Ç–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å:"
    )

    # 3. –§–æ—Ä–º—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É
    tone_instruction = get_tone_instruction(analysis)
    system_instruction = (
        "–¢–∏ - –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —á–∞—Ç-–±–æ—Ç –∑ —ñ–º'—è–º –ì—Ä—è–≥ —É —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç—ñ. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –õ–ò–®–ï —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. "
        "–ë—É–¥—å –ø—Ä–∏—Ä–æ–¥–Ω–∏–º —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ, –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ —ñ–º–µ–Ω—ñ, —è–∫—â–æ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ. "
        f"{tone_instruction}" # –î–æ–¥–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –ø–æ —Ç–æ–Ω—É
    )
    
    return prompt, system_instruction


def update_chat_analysis(chat_id: int, analysis: Dict[str, Any]) -> None:
    """–û–Ω–æ–≤–ª—é—î —ñ—Å—Ç–æ—Ä—ñ—é –∞–Ω–∞–ª—ñ–∑—É —á–∞—Ç—É"""
    timestamp = time.time()
    chat_analysis_history[chat_id].append({
        "timestamp": timestamp,
        "type": analysis["type"],
        "mood": analysis["mood"],
        "engagement": analysis["engagement"]
    })
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100 –∑–∞–ø–∏—Å—ñ–≤
    chat_analysis_history[chat_id] = chat_analysis_history[chat_id][-100:]

def get_chat_trends(chat_id, hours=6):
    """–ê–Ω–∞–ª—ñ–∑—É—î —Ç—Ä–µ–Ω–¥–∏ —á–∞—Ç—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –≥–æ–¥–∏–Ω–∏"""
    current_time = time.time()
    cutoff_time = current_time - (hours * 3600)
    
    recent_analysis = [
        a for a in chat_analysis_history[chat_id] 
        if a["timestamp"] > cutoff_time
    ]
    
    if not recent_analysis:
        return {"activity": "low", "mood_trend": "stable", "topics": []}
    
    # –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    activity_level = "high" if len(recent_analysis) > 20 else "medium" if len(recent_analysis) > 5 else "low"
    
    # –¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ—é
    moods = [a["mood"] for a in recent_analysis]
    positive_moods = sum(1 for mood in moods if mood in ["–ø–æ–∑–∏—Ç–∏–≤", "–µ–Ω–µ—Ä–≥—ñ—è"])
    mood_trend = "positive" if positive_moods > len(moods) // 2 else "negative" if positive_moods < len(moods) // 3 else "stable"
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ñ —Ç–µ–º–∏
    topics = [a["type"] for a in recent_analysis]
    topic_counts = {}
    for topic in topics:
        topic_counts[topic] = topic_counts.get(topic, 0) + 1
    popular_topics = sorted(topic_counts.items(), key=lambda x: x[1], reverse=True)[:3]
    
    return {
        "activity": activity_level,
        "mood_trend": mood_trend,
        "topics": [topic for topic, count in popular_topics],
        "engagement_avg": sum(a["engagement"] for a in recent_analysis) / len(recent_analysis)
    }

def should_intervene_spontaneously(chat_id):
    """–í–∏–∑–Ω–∞—á–∞—î —á–∏ –≤–∞—Ä—Ç–æ –≤—Ç—Ä—É—Ç–∏—Ç–∏—Å—è —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ"""
    current_time = time.time()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ç—Ä—É—á–∞–Ω–Ω—è
    time_since_last = current_time - last_intervention[chat_id]
    
    # –ú—ñ–Ω—ñ–º—É–º 30 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∏–º–∏ –≤—Ç—Ä—É—á–∞–Ω–Ω—è–º–∏
    if time_since_last < 1800:
        return False
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—Ä–µ–Ω–¥–∏
    trends = get_chat_trends(chat_id)
    
    # –í—Ç—Ä—É—á–∞—î–º–æ—Å—è –ø—Ä–∏ –Ω–∏–∑—å–∫—ñ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–æ–∂–∏–≤–∏—Ç–∏ —á–∞—Ç)
    if trends["activity"] == "low" and time_since_last > 3600:
        return random.random() < 0.3
    
    # –í—Ç—Ä—É—á–∞—î–º–æ—Å—è –ø—Ä–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º—É —Ç—Ä–µ–Ω–¥—ñ (–ø—ñ–¥–Ω—è—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π)
    if trends["mood_trend"] == "negative":
        return random.random() < 0.4
    
    # –ë–∞–∑–æ–≤–∞ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ñ—Å—Ç—å
    return random.random() < PERSONA.get("spontaneous_chance", 0.02)

def mark_intervention(chat_id):
    """–ü–æ–∑–Ω–∞—á–∞—î —â–æ –±–æ—Ç –≤—Ç—Ä—É—Ç–∏–≤—Å—è"""
    last_intervention[chat_id] = time.time()

def get_spontaneous_prompt_based_on_trends(chat_id):
    """–ì–µ–Ω–µ—Ä—É—î —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∏–π –ø—Ä–æ–º—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç—Ä–µ–Ω–¥—ñ–≤ —á–∞—Ç—É"""
    trends = get_chat_trends(chat_id)
    
    if trends["activity"] == "low":
        prompts = [
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –í —á–∞—Ç—ñ –¥–æ–≤–≥–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –°–∫–∞–∂–∏ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ –∞–±–æ –∫–æ—Ä–∏—Å–Ω–µ —â–æ–± –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–º.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ß–∞—Ç –∑–∞–º–æ–≤–∫. –ü–æ–¥—ñ–ª–∏—Å—å —è–∫–æ—é—Å—å —Ü—ñ–∫–∞–≤–æ—é –¥—É–º–∫–æ—é –∞–±–æ –∑–∞–ø–∏—Ç–∞–π —â–æ—Å—å —É –ª—é–¥–µ–π. –ì–æ–≤–æ—Ä–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –°–ø–æ–∫—ñ–π –≤ —Ä–æ–∑–º–æ–≤—ñ. –°–∫–∞–∂–∏ —â–æ—Å—å –∫–æ—Ä–∏—Å–Ω–µ –∞–±–æ —Ü—ñ–∫–∞–≤–µ. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–º —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–∏–º.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ü–∞—É–∑–∞ —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ. –†–æ–∑–∫–∞–∂–∏ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π —Ç–µ–º—É –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ó–∞—Ç–∏—à—à—è –≤ —á–∞—Ç—ñ. –ü–æ–¥—ñ–ª–∏—Å—å –∫–æ—Ä–∏—Å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –∞–±–æ —Ü—ñ–∫–∞–≤–∏–º —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è–º.",
        ]
    elif trends["mood_trend"] == "negative":
        prompts = [
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –í —á–∞—Ç—ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π. –°–∫–∞–∂–∏ —â–æ—Å—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —Ç–∞ –ø—ñ–¥–±–∞–¥—å–æ—Ä–ª–∏–≤–µ. –ë—É–¥—å –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–º.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–Ω—è—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π. –°–∫–∞–∂–∏ —â–æ—Å—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —Ç–∞ –º–æ—Ç–∏–≤—É—é—á–µ. –ì–æ–≤–æ—Ä–∏ –∑—Ä–æ–∑—É–º—ñ–ª–æ.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ù–∞—Å—Ç—Ä—ñ–π –Ω–µ –¥—É–∂–µ. –ü–æ–¥—ñ–ª–∏—Å—å —á–∏–º–æ—Å—å –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–º. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–º.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ù–∞–ø—Ä—É–≥–∞ –≤ —á–∞—Ç—ñ. –†–æ–∑—Ä—è–¥—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–º —Ç–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º.",
        ]
    else:
        prompts = [
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –°–∫–∞–∂–∏ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ –∞–±–æ –∫–æ—Ä–∏—Å–Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–º —Ç–∞ –ø—Ä–∏—Ä–æ–¥–Ω–∏–º.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ü–æ–¥—ñ–ª–∏—Å—å —Ü—ñ–∫–∞–≤–æ—é –¥—É–º–∫–æ—é –∞–±–æ –∫–æ—Ä–∏—Å–Ω–∏–º —Ñ–∞–∫—Ç–æ–º. –ì–æ–≤–æ—Ä–∏ –∑—Ä–æ–∑—É–º—ñ–ª–æ.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ó–∞–ø–∏—Ç–∞–π —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ —É –ª—é–¥–µ–π –∞–±–æ –ø–æ–¥—ñ–ª–∏—Å—å –∫–æ—Ä–∏—Å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é. –ë—É–¥—å –∞–¥–µ–∫–≤–∞—Ç–Ω–∏–º.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –ü—ñ–¥—Ç—Ä–∏–º–∞–π —Ä–æ–∑–º–æ–≤—É —Ü—ñ–∫–∞–≤–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π –Ω–æ–≤—É —Ç–µ–º—É.",
            "–¢–∏ ‚Äî –ì—Ä—è–≥. –î–æ–ª—É—á–∏—Å—è –¥–æ —á–∞—Ç—É –∑ –∫–æ—Ä–∏—Å–Ω–æ—é –¥—É–º–∫–æ—é –∞–±–æ —Ü—ñ–∫–∞–≤–∏–º —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è–º.",
        ]
    
    base_prompt = random.choice(prompts)
    return f"{base_prompt} –ì–æ–≤–æ—Ä–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ."

def cleanup_old_analysis_data(max_age_hours: int = 48):
    """–û—á–∏—â–∞—î —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –ø–∞–º'—è—Ç—ñ"""
    current_time = time.time()
    cutoff_time = current_time - (max_age_hours * 3600)
    
    cleaned_chats = 0
    for chat_id in list(chat_analysis_history.keys()):
        original_count = len(chat_analysis_history[chat_id])
        chat_analysis_history[chat_id] = [
            analysis for analysis in chat_analysis_history[chat_id]
            if analysis["timestamp"] > cutoff_time
        ]
        new_count = len(chat_analysis_history[chat_id])
        
        if new_count != original_count:
            logging.info(f"–û—á–∏—â–µ–Ω–æ {original_count - new_count} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —á–∞—Ç—É {chat_id}")
            cleaned_chats += 1
    
    return cleaned_chats

def analyze_chat_spam_level(chat_id: int, recent_messages: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª—ñ–∑—É—î —Ä—ñ–≤–µ–Ω—å —Å–ø–∞–º—É —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤ —á–∞—Ç—ñ"""
    current_time = time.time()
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–Ω–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)
    five_minutes_ago = current_time - 300
    chat_message_frequency[chat_id] = deque([
        ts for ts in chat_message_frequency[chat_id] if ts > five_minutes_ago
    ])
    
    # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
    chat_message_frequency[chat_id].append(current_time)
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    message_count = len(chat_message_frequency[chat_id])
    spam_level = "low"
    
    if message_count > 30:  # –ë—ñ–ª—å—à–µ 30 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω
        spam_level = "high"
    elif message_count > 15:  # 15-30 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω
        spam_level = "medium"
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if recent_messages:
        recent_texts = [msg.get('text', '').lower() for msg in recent_messages[-10:]]
        unique_texts = set(recent_texts)
        repetition_ratio = 1 - (len(unique_texts) / len(recent_texts)) if recent_texts else 0
        
        if repetition_ratio > 0.7:  # –ë—ñ–ª—å—à–µ 70% –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            spam_level = "high"
        elif repetition_ratio > 0.4:  # 40-70% –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            spam_level = "medium" if spam_level == "low" else spam_level
    
    return {
        "spam_level": spam_level,
        "message_frequency": message_count,
        "should_reduce_activity": spam_level in ["medium", "high"],
        "suggested_reply_chance": _get_spam_adjusted_reply_chance(spam_level)
    }

def _get_spam_adjusted_reply_chance(spam_level: str) -> float:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏–π —à–∞–Ω—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä—ñ–≤–Ω—è —Å–ø–∞–º—É"""
    base_chance = PERSONA.get("smart_reply_chance", 0.05)
    
    if spam_level == "high":
        return base_chance * 0.1  # –ó–º–µ–Ω—à—É—î–º–æ –≤ 10 —Ä–∞–∑—ñ–≤
    elif spam_level == "medium":
        return base_chance * 0.3  # –ó–º–µ–Ω—à—É—î–º–æ –≤ 3 —Ä–∞–∑–∏
    else:
        return base_chance

def compress_context_smartly(context: List[Dict[str, Any]], max_context_size: int = 100) -> List[Dict[str, Any]]:
    """
    –†–æ–∑—É–º–Ω–æ —Å—Ç–∏—Å–∫–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞–º—ñ—Å—Ç—å –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
    """
    if not context:
        return context
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ç–æ–∫–µ–Ω—ñ–≤
    max_tokens = PERSONA.get('max_context_tokens', 800000)
    
    # –Ø–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä max_context_size –ø–µ—Ä–µ–¥–∞–Ω–æ —è–∫ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, 
    # –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ç–æ–∫–µ–Ω–∏ (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
    if max_context_size < 10000:  # –Ø–∫—â–æ —Ü–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        estimated_tokens_per_message = 50  # –°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞
        max_tokens = min(max_tokens, max_context_size * estimated_tokens_per_message)
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ token_counter –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏—Å–∫–∞–Ω–Ω—è
    compressed = token_counter.compress_context_by_tokens(context, max_tokens)
    
    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–∏—Å–Ω–µ–Ω–æ: {len(context)} -> {len(compressed)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, "
                f"~{token_counter.estimate_context_tokens(compressed)} —Ç–æ–∫–µ–Ω—ñ–≤")
    
    return compressed

def analyze_context_quality(context: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª—ñ–∑—É—î —è–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
    if not context:
        return {"quality": "poor", "coherence": 0, "topics": []}
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å —Ä–æ–∑–º–æ–≤–∏
    recent_messages = context[-10:]  # –û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    topics = []
    
    for msg in recent_messages:
        text = msg.get('text', '')
        if text:
            analysis = analyze_conversation_context(text)
            topics.append(analysis['type'])
    
    # –†–∞—Ö—É—î–º–æ –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å (–Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Å—Ö–æ–∂—ñ —Ç–µ–º–∏)
    if topics:
        topic_counts = {}
        for topic in topics:
            topic_counts[topic] = topic_counts.get(topic, 0) + 1
        
        # –Ø–∫—â–æ —î –¥–æ–º—ñ–Ω—É—é—á–∞ —Ç–µ–º–∞, –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å –≤–∏—â–∞
        max_count = max(topic_counts.values())
        coherence = max_count / len(topics)
    else:
        coherence = 0
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if coherence > 0.7:
        quality = "high"
    elif coherence > 0.4:
        quality = "medium"
    else:
        quality = "poor"
    
    return {
        "quality": quality,
        "coherence": coherence,
        "dominant_topics": [topic for topic, count in topic_counts.items() if count == max(topic_counts.values())],
        "message_count": len(recent_messages)
    }

def should_respond_contextually(message_text: str, chat_id: int, context: List[Dict[str, Any]], 
                               recent_messages: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
    """–†–æ–∑—É–º–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ —Å–ø–∞–º—É"""
    
    # –ë–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    base_analysis = analyze_conversation_context(message_text)
    
    # –ê–Ω–∞–ª—ñ–∑ —Å–ø–∞–º—É –≤ —á–∞—Ç—ñ
    spam_analysis = analyze_chat_spam_level(chat_id, recent_messages or [])
    
    # –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    context_quality = analyze_context_quality(context)
    
    # –ö–æ—Ä–∏–≥—É—î–º–æ —Ä—ñ—à–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–ø–∞–º—É
    should_respond = base_analysis["should_respond"]
    
    if spam_analysis["should_reduce_activity"]:
        # –í —É–º–æ–≤–∞—Ö —Å–ø–∞–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ —Ä—ñ–¥—à–µ
        if not any(trigger in message_text.lower() for trigger in PERSONA.get("trigger_keywords", [])):
            # –Ø–∫—â–æ –Ω–µ –∑–≥–∞–¥–∞–ª–∏ –±–æ—Ç–∞ –ø—Ä—è–º–æ, —Ä—ñ–∑–∫–æ –∑–º–µ–Ω—à—É—î–º–æ —à–∞–Ω—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            should_respond = should_respond and (random.random() < spam_analysis["suggested_reply_chance"])
    
    # –ü–æ–∫—Ä–∞—â—É—î–º–æ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if context_quality["quality"] == "poor" and should_respond:
        # –í –ø–æ–≥–∞–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É
        base_analysis["response_tone"] = "–Ω–∞–ø—Ä–∞–≤–ª—è—é—á–∏–π_–∂–∞—Ä—Ç"
    
    return {
        **base_analysis,
        "should_respond": should_respond,
        "spam_analysis": spam_analysis,
        "context_quality": context_quality,
        "adjusted_reply_chance": spam_analysis["suggested_reply_chance"]
    }

def process_message_with_smart_context(message_text: str, chat_id: int, context: List[Dict[str, Any]], 
                                       recent_messages: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—É–º–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ —Å–ø–∞–º—É"""
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    analysis = should_respond_contextually(message_text, chat_id, context, recent_messages)
    
    # –Ø–∫—â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π, —Å—Ç–∏—Å–∫–∞—î–º–æ –π–æ–≥–æ
    if len(context) > 100:
        compressed_context = compress_context_smartly(context)
        logging.info(f"–°—Ç–∏—Å–Ω—É—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç—É {chat_id}: {len(context)} -> {len(compressed_context)}")
        context = compressed_context
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∞–Ω–∞–ª—ñ–∑—É
    update_chat_analysis(chat_id, analysis)
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    return {
        **analysis,
        "processed_context": context,
        "tone_instruction": get_tone_instruction(analysis),
        "recommendations": _get_response_recommendations(analysis)
    }

def _get_response_recommendations(analysis: Dict[str, Any]) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É"""
    recommendations = {}
    
    spam_level = analysis.get('spam_analysis', {}).get('spam_level', 'low')
    context_quality = analysis.get('context_quality', {}).get('quality', 'medium')
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –¥–æ–≤–∂–∏–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if spam_level == 'high':
        recommendations['max_response_length'] = 50  # –î—É–∂–µ –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        recommendations['response_style'] = 'minimal'
    elif spam_level == 'medium':
        recommendations['max_response_length'] = 100  # –ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        recommendations['response_style'] = 'concise'
    else:
        recommendations['max_response_length'] = 200  # –ù–æ—Ä–º–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        recommendations['response_style'] = 'normal'
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ —Ç–∏–ø—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if context_quality == 'poor':
        recommendations['should_ask_clarification'] = True
        recommendations['should_provide_guidance'] = True
    
    return recommendations

def get_anti_spam_message(spam_level: str) -> Optional[str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å–∏—Ç—É–∞—Ü—ñ–π –∑—ñ —Å–ø–∞–º–æ–º"""
    if spam_level == 'high':
        return random.choice([
            "–û–π, —Ç—É—Ç —Ç—Ä–æ—Ö–∏ –±–∞–≥–∞—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ! –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Ç–∏—Ö–Ω–µ–º–æ –Ω–∞ —Ö–≤–∏–ª–∏–Ω–∫—É ü§´",
            "–°–ø–æ–∫—ñ–π–Ω—ñ—à–µ, –¥—Ä—É–∑—ñ! –î–∞–π—Ç–µ –º–µ–Ω—ñ –æ–±–¥—É–º–∞—Ç–∏ —â–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ ü§î",
            "–¢—ñ—Ö–∞, —Ö–ª–æ–ø—Ü—ñ! –ó–∞–Ω–∞–¥—Ç–æ —à–≤–∏–¥–∫–æ –ø–∏—à–µ—Ç–µ üòÖ"
        ])
    elif spam_level == 'medium':
        return random.choice([
            "–û–≥–æ, —è–∫ –∞–∫—Ç–∏–≤–Ω–æ! üî•",
            "–ë–∞–≥–∞—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ–¥—Ä–∞–∑—É! üì±",
            "–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞—à–∫–∞–ª—é—î! ‚ö°"
        ])
    
    return None

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
def log_context_processing(chat_id: int, message_count: int, spam_level: str, context_quality: str):
    logger.info(f"–ß–∞—Ç {chat_id}: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å={message_count}, —Å–ø–∞–º={spam_level}, —è–∫—ñ—Å—Ç—å_–∫–æ–Ω—Ç–µ–∫—Å—Ç—É={context_quality}")

def get_processing_statistics(chat_id: int) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–æ–±–∫–∏ –¥–ª—è —á–∞—Ç—É"""
    current_time = time.time()
    hour_ago = current_time - 3600
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Å—Ç–æ—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    recent_timestamps = [ts for ts in chat_message_frequency[chat_id] if ts > hour_ago]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª—ñ–∑—É
    recent_analysis = [
        a for a in chat_analysis_history[chat_id] 
        if a["timestamp"] > hour_ago
    ]
    
    return {
        "chat_id": chat_id,
        "messages_last_hour": len(recent_timestamps),
        "analysis_records": len(recent_analysis),
        "last_intervention": last_intervention.get(chat_id, 0),
        "current_time": current_time
    }

def generate_enhanced_response(message: Message, context_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä—É—î –ø–æ–∫—Ä–∞—â–µ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó.
    
    Args:
        message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context_data: –î–∞–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ —ñ–º–µ–Ω–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∞–Ω–∞–ª—ñ–∑–æ–º
        
    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    """
    user_name = getattr(message.from_user, 'full_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π') if message.from_user else '–ù–µ–≤—ñ–¥–æ–º–∏–π'
    text = message.text or ""
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ –Ω–∞—Å—Ç—Ä—ñ–π
    conv_type = detect_conversation_type(text)
    mood = detect_mood(text)
    engagement = calculate_engagement_level(text, conv_type, mood)
    
    # –§–æ—Ä–º—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
    personal_instruction = f"–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É '{user_name}' "
    
    if conv_type == "—Ç–µ—Ö–Ω—ñ—á–Ω–µ":
        personal_instruction += "–Ω–∞–¥–∞—é—á–∏ –∫–æ—Ä–∏—Å–Ω—É —Ç–µ—Ö–Ω—ñ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. "
    elif conv_type == "—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ":
        personal_instruction += "–∑ —Ü—ñ–∫–∞–≤–∏–º–∏ —Ä–æ–∑–¥—É–º–∞–º–∏ —Ç–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º–∏. "
    elif conv_type == "–≤–µ—Å–µ–ª–µ":
        personal_instruction += "–ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏ –≤–µ—Å–µ–ª–∏–π –Ω–∞—Å—Ç—Ä—ñ–π. "
    elif conv_type == "–µ–º–æ—Ü—ñ–π–Ω–µ":
        personal_instruction += "–∑ —Ä–æ–∑—É–º—ñ–Ω–Ω—è–º —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é. "
    else:
        personal_instruction += "–¥—Ä—É–∂–Ω—å–æ —Ç–∞ –ø—Ä–∏—Ä–æ–¥–Ω–æ. "
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Ç–æ–Ω—É
    response_tone = get_response_tone(conv_type, mood)
    tone_instruction = f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π {response_tone} —Ç–æ–Ω —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è. "
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    if engagement > 7:
        tone_instruction += "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥—É–∂–µ –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω–∏–π, –¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. "
    elif engagement < 4:
        tone_instruction += "–î–∞–π –∫–æ—Ä–æ—Ç–∫—É, –∞–ª–µ –∫–æ—Ä–∏—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. "
    
    # –£–Ω–∏–∫–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä—ñ–≤
    tone_instruction += "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ —Å–ª–æ–≤–∞ —Ç–∞ —Ñ—Ä–∞–∑–∏, —É–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤. "
    
    return {
        "should_reply": should_bot_respond(text, conv_type, mood, engagement),
        "tone_instruction": personal_instruction + tone_instruction,
        "conversation_type": conv_type,
        "mood": mood,
        "engagement_level": engagement,
        "user_name": user_name,
        "max_response_length": 200 if engagement > 7 else 100,
        "complex_request": engagement > 6 and conv_type in ["—Ç–µ—Ö–Ω—ñ—á–Ω–µ", "—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ"]
    }

def should_reply_with_enhanced_logic(message: Message, context_data: Dict[str, Any]) -> bool:
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏.
    """
    analysis = generate_enhanced_response(message, context_data)
    return analysis.get("should_reply", False)

def get_enhanced_tone_instruction(message: Message, context_data: Dict[str, Any]) -> str:
    """
    –û—Ç—Ä–∏–º—É—î –ø–æ–∫—Ä–∞—â–µ–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è —Ç–æ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.
    """
    analysis = generate_enhanced_response(message, context_data)
    return analysis.get("tone_instruction", "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–º —Ç–∞ –ø—Ä–∏—Ä–æ–¥–Ω–∏–º.")
