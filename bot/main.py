# –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart
import asyncio
import logging
from bot.modules import context, gemini, management, media_map, context_sqlite, random_life
from bot.bot_config import PERSONA
import os
from dotenv import load_dotenv
import random

load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç—É
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(f"–í—ñ—Ç–∞—é! –Ø {PERSONA['name']}. {PERSONA['description']}")

# –Ñ–¥–∏–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def universal_handler(message: Message):
    try:
        # –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
        if message.from_user.id == PERSONA["admin_id"]:
            if message.text and message.text.startswith("/import_history"):
                parts = message.text.split()
                if len(parts) < 3:
                    await message.reply("–í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ JSON —Ç–∞ chat_id: /import_history <—à–ª—è—Ö_–¥–æ_json> <chat_id>")
                    return
                json_path = parts[1]
                chat_id = int(parts[2])
                try:
                    context_sqlite.import_telegram_history(json_path, chat_id)
                    await message.reply("–Ü—Å—Ç–æ—Ä—ñ—é —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!")
                except Exception as e:
                    await message.reply(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
                return
            elif message.text and message.text.startswith("/"):
                await management.handle(message)
                return
        
        # –ì—Ä—É–ø–æ–≤—ñ —á–∞—Ç–∏
        if message.chat.type in ["group", "supergroup"]:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.save_message(message)
            
            # –†–∞–Ω–¥–æ–º–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫—â–æ –∑–≥–∞–¥–∞–Ω–æ –±–æ—Ç–∞
            if message.text and random_life.should_reply_randomly(message.text):
                if random.random() < 0.5:  # 50% –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏
                    recent_context = [m['text'] for m in context.get_context(message.chat.id)[-5:]]
                    reply = await random_life.get_random_reply(recent_context)
                    await message.reply(reply)
                    return
            
            # –ó–≤–∏—á–∞–π–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ Gemini
            reply = await gemini.process_message(message)
            await message.reply(reply)
    
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ universal_handler: {e}")
        await message.reply("–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... ü§ñ")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
