# –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart
import asyncio
import logging
from bot.modules import context, gemini, management, media_map, random_life, smart_behavior, chat_scanner, reactions
from bot.bot_config import PERSONA
import os
from dotenv import load_dotenv
import random
from datetime import datetime, timezone, timedelta

load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /rescan)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

def is_message_too_old(message: Message) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä–µ –¥–ª—è –æ–±—Ä–æ–±–∫–∏"""
    if not PERSONA["ignore_old_messages"]:
        return False
    
    if not message.date:
        return False
    
    # –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —á–∞—Å–æ–≤–æ—ó –∑–æ–Ω–∏
    now = datetime.now(timezone.utc)
    message_time = message.date
    
    # –†—ñ–∑–Ω–∏—Ü—è –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
    age_minutes = (now - message_time).total_seconds() / 60
    
    if age_minutes > PERSONA["max_message_age_minutes"]:
        logging.info(f"–Ü–≥–Ω–æ—Ä—É—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤—ñ–∫: {age_minutes:.1f} —Ö–≤)")
        return True
    
    return False

# –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç—É
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(f"–í—ñ—Ç–∞—é! –Ø {PERSONA['name']}. {PERSONA['description']}")

# –Ñ–¥–∏–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def universal_handler(message: Message):
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä–µ
        if is_message_too_old(message):
            return
        
        # –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
        if message.from_user.id == PERSONA["admin_id"]:
            if message.text and message.text.startswith("/import_history"):
                parts = message.text.split()
                if len(parts) < 3:
                    await message.reply("–í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ JSON —Ç–∞ chat_id: /import_history <—à–ª—è—Ö_–¥–æ_json> <chat_id>")
                    return
                json_path = parts[1]
                chat_id = int(parts[2])
                try:
                    result = chat_scanner.import_telegram_history(json_path, chat_id)
                    await message.reply(f"‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ! {result} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–æ–¥–∞–Ω–æ.")
                except Exception as e:
                    await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
                return
            elif message.text and message.text.startswith("/"):
                await management.handle(message)
                return
        
        # –ì—Ä—É–ø–æ–≤—ñ —á–∞—Ç–∏
        if message.chat.type in ["group", "supergroup"]:
            chat_id = message.chat.id
            user_id = message.from_user.id
            
            # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∏
            smart_behavior.track_user_activity(chat_id, user_id)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏—è–≤–ª–µ–Ω–æ —Å–ø–∞–º
            if smart_behavior.is_spam_detected(chat_id, user_id):
                # –Ü–Ω–æ–¥—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ —Å–ø–∞–º
                if random.random() < 0.3:  # 30% —à–∞–Ω—Å –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏
                    spam_reply = smart_behavior.get_spam_reply()
                    await message.reply(spam_reply)
                return
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
            if not chat_scanner.is_chat_scanned(chat_id):
                await chat_scanner.auto_scan_chat_history(bot, chat_id)
            
            # –ó–∞–≤–∂–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.save_message(message)
            
            # –ú–æ–∂–ª–∏–≤–æ —Å—Ç–∞–≤–∏–º–æ —Ä–µ–∞–∫—Ü—ñ—é (–ø–µ—Ä–µ–¥ —ñ–Ω—à–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏)
            reaction_posted = await reactions.maybe_react_to_message(message)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (—Ä–∞–∑ –Ω–∞ N —Ö–≤–∏–ª–∏–Ω)
            if smart_behavior.should_be_spontaneous(chat_id):
                recent_context = [m.get('text', '') for m in context.get_context(chat_id)[-5:]]
                prompt = smart_behavior.get_spontaneous_prompt(recent_context)
                
                class FakeMessage:
                    def __init__(self, text: str):
                        self.text = text
                        self.from_user = type('User', (), {'full_name': PERSONA['name']})
                        self.chat = type('Chat', (), {'id': 0})
                
                fake_msg = FakeMessage(prompt)
                reply = await gemini.process_message(fake_msg)
                await message.reply(f"üí≠ {reply}")
                smart_behavior.mark_bot_activity(chat_id, is_spontaneous=True)
                return
            
            # –†–∞–Ω–¥–æ–º–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç—Ä–∏–≥–µ—Ä–∏ (–∑–≥–∞–¥–∫–∏ —ñ–º–µ–Ω—ñ)
            if message.text and random_life.should_reply_randomly(message.text):
                if random.random() < PERSONA["random_reply_chance"]:
                    recent_context = [m.get('text', '') for m in context.get_context(chat_id)[-5:]]
                    reply = await random_life.get_random_reply(recent_context)
                    await message.reply(reply)
                    smart_behavior.mark_bot_activity(chat_id)
                    return
            
            # –†–æ–∑—É–º–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ä—ñ–¥–∫–æ)
            if smart_behavior.should_reply_smart(chat_id, message.text or ""):
                reply = await gemini.process_message(message)
                await message.reply(reply)
                smart_behavior.mark_bot_activity(chat_id)
    
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ universal_handler: {e}")
        await message.reply("–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... ü§ñ")

async def spontaneous_activity_loop():
    """–§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    while True:
        try:
            await asyncio.sleep(300)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤
            from bot.modules.context import get_active_chats
            active_chats = get_active_chats()
            
            for chat_id in active_chats:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                if smart_behavior.should_be_spontaneous(chat_id):
                    recent_context = [m.get('text', '') for m in context.get_context(chat_id)[-5:]]
                    prompt = smart_behavior.get_spontaneous_prompt(recent_context)
                    
                    class FakeMessage:
                        def __init__(self, text: str):
                            self.text = text
                            self.from_user = type('User', (), {'full_name': PERSONA['name']})
                            self.chat = type('Chat', (), {'id': chat_id})
                    
                    fake_msg = FakeMessage(prompt)
                    reply = await gemini.process_message(fake_msg)
                    
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç
                    await bot.send_message(chat_id, f"üí≠ {reply}")
                    smart_behavior.mark_bot_activity(chat_id, is_spontaneous=True)
                    
                    # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö —á–∞—Ç–∞—Ö
                    await asyncio.sleep(30)
                    
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ spontaneous_activity_loop: {e}")
            await asyncio.sleep(60)  # –ë—ñ–ª—å—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

async def main():
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤—É –∑–∞–¥–∞—á—É –¥–ª—è —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    asyncio.create_task(spontaneous_activity_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
