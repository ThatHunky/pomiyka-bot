# –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart
import asyncio
import logging
from bot.modules import context, gemini, management, media_map, random_life, smart_behavior, chat_scanner
from bot.bot_config import PERSONA
import os
from dotenv import load_dotenv
import random

load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç—É
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(f"–í—ñ—Ç–∞—é! –Ø {PERSONA['name']}. {PERSONA['description']}")

# –Ñ–¥–∏–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def universal_handler(message: Message):
    try:
        # –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
        if message.from_user.id == PERSONA["admin_id"]:
            if message.text and message.text.startswith("/import_history"):
                parts = message.text.split()
                if len(parts) < 3:
                    await message.reply("–í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ JSON —Ç–∞ chat_id: /import_history <—à–ª—è—Ö_–¥–æ_json> <chat_id>")
                    return
                json_path = parts[1]
                chat_id = int(parts[2])
                try:
                    result = chat_scanner.import_telegram_history(json_path, chat_id)
                    await message.reply(f"‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ! {result} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–æ–¥–∞–Ω–æ.")
                except Exception as e:
                    await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
                return
            elif message.text and message.text.startswith("/"):
                await management.handle(message)
                return
        
        # –ì—Ä—É–ø–æ–≤—ñ —á–∞—Ç–∏
        if message.chat.type in ["group", "supergroup"]:
            chat_id = message.chat.id
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
            if not chat_scanner.is_chat_scanned(chat_id):
                await chat_scanner.auto_scan_chat_history(bot, chat_id)
            
            # –ó–∞–≤–∂–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.save_message(message)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (—Ä–∞–∑ –Ω–∞ N —Ö–≤–∏–ª–∏–Ω)
            if smart_behavior.should_be_spontaneous(chat_id):
                recent_context = [m['text'] for m in context.get_context(chat_id)[-5:]]
                prompt = smart_behavior.get_spontaneous_prompt(recent_context)
                
                class FakeMessage:
                    def __init__(self, text: str):
                        self.text = text
                        self.from_user = type('User', (), {'full_name': PERSONA['name']})
                        self.chat = type('Chat', (), {'id': 0})
                
                fake_msg = FakeMessage(prompt)
                reply = await gemini.process_message(fake_msg)
                await message.reply(f"üí≠ {reply}")
                smart_behavior.mark_bot_activity(chat_id, is_spontaneous=True)
                return
            
            # –†–∞–Ω–¥–æ–º–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç—Ä–∏–≥–µ—Ä–∏ (–∑–≥–∞–¥–∫–∏ —ñ–º–µ–Ω—ñ)
            if message.text and random_life.should_reply_randomly(message.text):
                if random.random() < PERSONA["random_reply_chance"]:
                    recent_context = [m['text'] for m in context.get_context(chat_id)[-5:]]
                    reply = await random_life.get_random_reply(recent_context)
                    await message.reply(reply)
                    smart_behavior.mark_bot_activity(chat_id)
                    return
            
            # –†–æ–∑—É–º–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ä—ñ–¥–∫–æ)
            if smart_behavior.should_reply_smart(chat_id, message.text or ""):
                reply = await gemini.process_message(message)
                await message.reply(reply)
                smart_behavior.mark_bot_activity(chat_id)
    
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ universal_handler: {e}")
        await message.reply("–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... ü§ñ")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
