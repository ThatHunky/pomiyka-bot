# EMERGENCY FIX - –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞ –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart
import asyncio
import logging
from bot.modules import context, gemini, management, media_map, random_life, smart_behavior, chat_scanner, reactions, rate_limiter, enhanced_behavior
from bot.bot_config import PERSONA
import os
from dotenv import load_dotenv
import random
from datetime import datetime, timezone, timedelta
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter
from typing import Optional, Dict, Any
import signal

# –ß–∞—Å –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –¥–ª—è —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - –ö–†–ò–¢–ò–ß–ù–û!
BOT_START_TIME = datetime.now(timezone.utc)

load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not API_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –±–æ—Ç
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

def validate_config() -> None:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞."""
    required_vars = ["TELEGRAM_BOT_TOKEN", "GEMINI_API_KEY"]
    missing = [v for v in required_vars if not os.getenv(v)]
    if missing:
        raise RuntimeError(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ: {', '.join(missing)}")

validate_config()

def is_message_too_old(message: Message) -> bool:
    """üö® –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–µ –¥–æ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    if not PERSONA["ignore_old_messages"]:
        return False
    if not message.date:
        return False
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ message_time —É UTC —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    message_time = message.date
    if message_time.tzinfo is None:
        message_time = message_time.replace(tzinfo=timezone.utc)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–µ, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ –î–û –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
    # –ë—É—Ñ–µ—Ä–Ω–∞ –∑–æ–Ω–∞ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —á–∞—Å–æ–≤–∏—Ö —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç–µ–π
    buffer_zone = timedelta(seconds=30)
    cutoff_time = BOT_START_TIME - buffer_zone
    
    if message_time < cutoff_time:
        # –ù–µ –ª–æ–≥—É—î–º–æ –∫–æ–∂–Ω–µ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –Ω–µ –∑–∞—Å–º—ñ—á—É–≤–∞—Ç–∏ –ª–æ–≥–∏
        return True
    
    return False

async def safe_reply(message: Message, text: str) -> bool:
    """–ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    try:
        await message.reply(text)
        return True
    except TelegramRetryAfter as e:
        logging.warning(f"Telegram rate limit: –∑–∞—Ç—Ä–∏–º–∫–∞ {e.retry_after} —Å–µ–∫—É–Ω–¥")
        return False
    except TelegramBadRequest as e:
        logging.warning(f"Telegram –ø–æ–º–∏–ª–∫–∞: {e}")
        return False
    except Exception as e:
        logging.error(f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {e}")
        return False

# –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç—É
@dp.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–í—ñ—Ç–∞–ª—å–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä"""
    await message.answer(f"–í—ñ—Ç–∞—é! –Ø {PERSONA['name']}. {PERSONA['description']}")

# üö® –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –°–ø—Ä–æ—â–µ–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –±–µ–∑ —Å–ø–∞–º—É
@dp.message()
async def universal_handler(message: Message) -> None:
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - EMERGENCY VERSION"""
    try:
        # üö® –ö–†–ò–¢–ò–ß–ù–û: –Ü–≥–Ω–æ—Ä—É—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if is_message_too_old(message):
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ None –¥–ª—è from_user
        if not message.from_user or not getattr(message.from_user, 'id', None):
            logging.warning("message.from_user –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            return
        
        # –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        user_name = message.from_user.full_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π"
        if message.text and len(message.text) > 10:
            logging.info(f"üÜï –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_name}: {message.text[:50]}...")
        else:
            logging.info(f"üÜï –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_name}: {message.text or '[–º–µ–¥—ñ–∞]'}")
        
        # –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
        if message.from_user.id == PERSONA["admin_id"]:
            if message.text and message.text.startswith("/"):
                management.handle(message)
                return
        
        # –ì—Ä—É–ø–æ–≤—ñ —á–∞—Ç–∏
        if message.chat.type in ["group", "supergroup"]:
            chat_id = message.chat.id
            user_id = message.from_user.id
            
            # Rate limiting
            if not rate_limiter.rate_limiter.can_send_message(
                chat_id,
                PERSONA["rate_limit_per_chat"],
                PERSONA["global_rate_limit"]
            ):
                logging.info(f"Rate limit: –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —á–∞—Ç {chat_id}")
                return
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
            context.add_message(chat_id, user_id, message.text or "[–º–µ–¥—ñ–∞]", user_name)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –±–æ—Ç–∞
            should_respond = False
            bot_name = PERSONA['name'].lower()
            
            if message.text:
                text_lower = message.text.lower()
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≥–∞–¥–æ–∫ –±–æ—Ç–∞
                if any(trigger in text_lower for trigger in [bot_name, '@gryag_bot', '–≥—Ä—è–≥', '–±–æ—Ç']):
                    should_respond = True
                    logging.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥–∞—é –Ω–∞ –∑–≥–∞–¥–∫—É –±–æ—Ç–∞: {message.text[:30]}...")
                # –í–∏–ø–∞–¥–∫–æ–≤–∏–π —à–∞–Ω—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                elif random.random() < PERSONA["smart_reply_chance"]:
                    should_respond = True
                    logging.info(f"–í–∏–ø–∞–¥–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {message.text[:30]}...")
            
            if should_respond:
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    chat_context = context.get_recent_messages(chat_id, PERSONA["context_limit"])
                    
                    # üö® –ü–û–ö–†–ê–©–ï–ù–ò–ô –ü–†–û–ú–ü–¢ –¥–ª—è —è–∫—ñ—Å–Ω—ñ—à–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                    enhanced_instruction = (
                        f"–¢–∏ ‚Äî {PERSONA['name']}, –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —á–∞—Ç-–±–æ—Ç. "
                        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–∏—Ä–æ–¥–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ. "
                        "–ë—É–¥—å –∫–æ—Ä–∏—Å–Ω–∏–º, –∞–ª–µ –Ω–µ –Ω–∞–¥—Ç–æ —Å–µ—Ä–π–æ–∑–Ω–∏–º. "
                        "–ú–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –ª–µ–≥–∫–∏–π –≥—É–º–æ—Ä —è–∫—â–æ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ. "
                        "–ù–µ –ø–∏—à–∏ –¥–∏–≤–Ω–∏—Ö —Ä–µ—á–µ–π –∞–±–æ –∞–±—Å—É—Ä–¥—É. "
                        "–í–ê–ñ–õ–ò–í–û: –î–∞–π –û–î–ù–£ –∫–æ—Ä–æ—Ç–∫—É, –∑—Ä–æ–∑—É–º—ñ–ª—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
                    )
                    
                    # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Gemini
                    reply = await gemini.process_message(message, enhanced_instruction)
                    
                    if reply and len(reply.strip()) > 0:
                        await safe_reply(message, reply)
                        logging.info(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {reply[:50]}...")
                    else:
                        logging.warning("Gemini –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
                        
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ universal_handler: {e}")
                    await safe_reply(message, "–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... ü§ñ")
            
            # –†–µ–∞–∫—Ü—ñ—ó (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π)
            try:
                await reactions.maybe_react_to_message(message)
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó: {e}")
            
        # –ü—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏
        elif message.chat.type == "private":
            try:
                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
                if message.from_user:
                    context.add_message(message.chat.id, message.from_user.id, 
                                      message.text or "[–º–µ–¥—ñ–∞]", user_name)
                
                # –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç–∞—Ö
                chat_context = context.get_recent_messages(message.chat.id, PERSONA["context_limit"])
                
                enhanced_instruction = (
                    f"–¢–∏ ‚Äî {PERSONA['name']}, –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —á–∞—Ç-–±–æ—Ç. "
                    "–¶–µ –ø—Ä–∏–≤–∞—Ç–Ω–∞ —Ä–æ–∑–º–æ–≤–∞, —Ç–æ–º—É –±—É–¥—å –±—ñ–ª—å—à –æ—Å–æ–±–∏—Å—Ç–∏–º —Ç–∞ —É–≤–∞–∂–Ω–∏–º. "
                    "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–∏—Å–Ω–æ —Ç–∞ –ø—Ä–∏—Ä–æ–¥–Ω–æ. "
                    "–î–∞–π –û–î–ù–£ –∑–º—ñ—Å—Ç–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
                )
                
                reply = await gemini.process_message(message, enhanced_instruction)
                
                if reply and len(reply.strip()) > 0:
                    await safe_reply(message, reply)
                    logging.info(f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {reply[:50]}...")
                else:
                    await safe_reply(message, "–ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —á–∏–º–æ—Å—å? ü§ñ")
                    
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ: {e}")
                await safe_reply(message, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞... ü§ñ")
        
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ universal_handler: {e}")

async def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É - EMERGENCY VERSION"""
    
    print("üö® EMERGENCY FIX - –ó–∞–ø—É—Å–∫–∞—é –ì—Ä—è–≥-–±–æ—Ç–∞...")
    print(f"‚è∞ –ß–∞—Å –∑–∞–ø—É—Å–∫—É: {BOT_START_TIME}")
    print(f"üõ°Ô∏è –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {PERSONA['ignore_old_messages']}")
    print("üîß –í–µ—Ä—Å—ñ—è: Emergency Fix –¥–ª—è —Å–ø–∞–º—É —Å—Ç–∞—Ä–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
