#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—ñ—Å–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É
"""

import asyncio
import os
import tempfile
import logging
from datetime import datetime
from bot.modules.personalization import create_personalization_manager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_personalization_async():
    """–¢–µ—Å—Ç—É—î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ä–æ–±–æ—Ç—É –º–æ–¥—É–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è async –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –ë–î
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_file:
        temp_db_path = tmp_file.name
    
    try:
        # 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        print("üìã 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è PersonalizationManager...")
        manager = await create_personalization_manager(temp_db_path)
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        # 2. –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        print("üìã 2. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
        
        test_users = [
            (12345, "test_user1", "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏? üòä"),
            (67890, "test_user2", "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–ø–æ–º–æ–∂—ñ—Ç—å –∑ –∫–æ–¥–æ–º"),
            (11111, "test_user3", "–°—É–ø–µ—Ä –∫—Ä—É—Ç–æ! üî• –î—É–∂–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è")
        ]
        
        for user_id, username, text in test_users:
            result = await manager.process_user_message(user_id, username, text)
            print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {username}: {result['processed']}")
        
        # 3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —É–ø–æ–¥–æ–±–∞–Ω—å
        print("üìã 3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É–ø–æ–¥–æ–±–∞–Ω—å...")
        await manager.update_user_preference(12345, "humor_level", 0.8)
        print("‚úÖ –£–ø–æ–¥–æ–±–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ")
        
        # 4. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("üìã 4. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
        for user_id, username, _ in test_users:
            stats = await manager.get_user_statistics(user_id)
            if 'error' not in stats:
                print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {username}: {stats['total_messages']} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {username}: {stats['error']}")
        
        # 5. –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
        print("üìã 5. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
        deleted_count = await manager.cleanup_old_data(days_to_keep=1)
        print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
        
        # 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É
        print("üìã 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –∑–¥–æ—Ä–æ–≤'—è...")
        health = manager.get_health_status()
        print(f"‚úÖ –°—Ç–∞–Ω: {health['status']}, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {health['users_count']}")
        
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –ë–î
        try:
            os.unlink(temp_db_path)
        except:
            pass

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    success = await test_personalization_async()
    
    if success:
        print("‚úÖ –£–°–ü–Ü–•: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        return 0
    else:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó!")
        return 1

if __name__ == "__main__":
    import sys
    sys.exit(asyncio.run(main()))
