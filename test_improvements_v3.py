#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω—å –≤–µ—Ä—Å—ñ—ó 3.0 –¥–ª—è –±–æ—Ç–∞ –ì—Ä—è–≥
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
"""

import pytest
import asyncio
import os
import sys
from unittest.mock import Mock, AsyncMock, patch

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—ñ–≤ –±–æ—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'bot'))

# –ú–æ–∫—ñ–Ω–≥ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
os.environ['TELEGRAM_BOT_TOKEN'] = 'test_token'
os.environ['GEMINI_API_KEY'] = 'test_key'
os.environ['BOT_ADMIN_ID'] = '123456789'

class TestContextImprovements:
    """–¢–µ—Å—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω—å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    
    def test_context_with_usernames(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ —ñ–º–µ–Ω–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        from bot.modules.context_enhanced import build_context
        
        # –ú–æ–∫—ñ–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó get_recent_messages
        with patch('bot.modules.context_enhanced.get_recent_messages') as mock_get:
            mock_get.return_value = [
                {"full_name": "–û–ª–µ–∫—Å—ñ–π", "text": "–ü—Ä–∏–≤—ñ—Ç –≤—Å—ñ–º!", "timestamp": "2025-06-28T10:00:00"},
                {"full_name": "–ú–∞—Ä—ñ—è", "text": "–Ø–∫ —Å–ø—Ä–∞–≤–∏?", "timestamp": "2025-06-28T10:01:00"},
                {"full_name": "–ì—Ä—è–≥", "text": "–í—ñ—Ç–∞—é! –í—Å–µ –¥–æ–±—Ä–µ!", "timestamp": "2025-06-28T10:02:00"}
            ]
            
            result = build_context(12345, 10)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–∞—î —ñ–º–µ–Ω–∞
            assert "–û–ª–µ–∫—Å—ñ–π: –ü—Ä–∏–≤—ñ—Ç –≤—Å—ñ–º!" in result
            assert "–ú–∞—Ä—ñ—è: –Ø–∫ —Å–ø—Ä–∞–≤–∏?" in result
            assert "–ì—Ä—è–≥: –í—ñ—Ç–∞—é! –í—Å–µ –¥–æ–±—Ä–µ!" in result
            
            print("‚úÖ –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑ —ñ–º–µ–Ω–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

class TestRandomLifeImprovements:
    """–¢–µ—Å—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω—å random_life"""
    
    def test_expanded_replies(self):
        """–¢–µ—Å—Ç —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
        from bot.modules.random_life import RANDOM_REPLIES
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ
        assert len(RANDOM_REPLIES) >= 30, f"–û—á—ñ–∫—É–≤–∞–ª–æ—Å—å >= 30 –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, –æ—Ç—Ä–∏–º–∞–Ω–æ {len(RANDOM_REPLIES)}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å
        unique_words = set()
        for reply in RANDOM_REPLIES:
            unique_words.update(reply.lower().split())
        
        assert len(unique_words) > 50, "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏—Ö —Å–ª—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö"
        
        print("‚úÖ –¢–µ—Å—Ç —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    def test_cache_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∫–µ—à—É"""
        from bot.modules.random_life import add_to_cache, is_similar_to_cached, last_messages_cache
        
        # –û—á–∏—â—É—î–º–æ –∫–µ—à
        last_messages_cache.clear()
        
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        add_to_cache("–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?")
        add_to_cache("–©–æ –Ω–æ–≤–æ–≥–æ –≤ –∂–∏—Ç—Ç—ñ?")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ö–æ–∂—ñ—Å—Ç—å
        assert is_similar_to_cached("–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏ —É –≤–∞—Å?") == True
        assert is_similar_to_cached("–°—å–æ–≥–æ–¥–Ω—ñ —á—É–¥–æ–≤–∞ –ø–æ–≥–æ–¥–∞") == False
        
        print("‚úÖ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∫–µ—à—É –ø—Ä–æ–π–¥–µ–Ω–æ")

class TestEnhancedBehavior:
    """–¢–µ—Å—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏"""
    
    def test_generate_enhanced_response(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
        from bot.modules.enhanced_behavior import generate_enhanced_response
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        mock_message = Mock()
        mock_message.text = "–ì—Ä—è–≥, —è–∫ —Å–ø—Ä–∞–≤–∏ –∑ –∫–æ–¥–æ–º?"
        mock_message.from_user = Mock()
        mock_message.from_user.full_name = "–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        
        mock_context = [
            {"user_name": "–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á", "text": "–ü—Ä–∏–≤—ñ—Ç!"},
            {"user_name": "–ì—Ä—è–≥", "text": "–í—ñ—Ç–∞—é!"}
        ]
        
        result = generate_enhanced_response(mock_message, mock_context)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        assert "should_reply" in result
        assert "tone_instruction" in result
        assert "conversation_type" in result
        assert "user_name" in result
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—é
        assert "–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á" in result["tone_instruction"]
        
        print("‚úÖ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ")

class TestMainLogic:
    """–¢–µ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ—ó –ª–æ–≥—ñ–∫–∏"""
    
    def test_fake_message_class(self):
        """–¢–µ—Å—Ç –∫–ª–∞—Å—É FakeMessage"""
        from bot.main import FakeMessage
        
        fake_msg = FakeMessage(
            text="–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            chat_id=12345,
            user_name="–¢–µ—Å—Ç–µ—Ä",
            processed_context="–∫–æ–Ω—Ç–µ–∫—Å—Ç",
            recommendations={"test": "value"}
        )
        
        assert fake_msg.text == "–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        assert fake_msg.chat.id == 12345
        assert fake_msg.from_user.full_name == "–¢–µ—Å—Ç–µ—Ä"
        assert fake_msg.processed_context == "–∫–æ–Ω—Ç–µ–∫—Å—Ç"
        assert fake_msg.recommendations == {"test": "value"}
        
        print("‚úÖ –¢–µ—Å—Ç –∫–ª–∞—Å—É FakeMessage –ø—Ä–æ–π–¥–µ–Ω–æ")

def test_integration():
    """–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω—å"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—Å—ñ –º–æ–¥—É–ª—ñ –º–æ–∂–Ω–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏
    try:
        from bot.modules import context_enhanced, enhanced_behavior, random_life
        from bot.main import FakeMessage
        print("‚úÖ –í—Å—ñ –ø–æ–∫—Ä–∞—â–µ–Ω—ñ –º–æ–¥—É–ª—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    except ImportError as e:
        pytest.fail(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—ñ–≤: {e}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
    from bot.modules.random_life import RANDOM_REPLIES, should_reply_randomly
    
    assert len(RANDOM_REPLIES) > 20, "–°–ø–∏—Å–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ"
    assert should_reply_randomly("–ü—Ä–∏–≤—ñ—Ç –ì—Ä—è–≥"), "–§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–≥–∞–¥–æ–∫ –Ω–µ –ø—Ä–∞—Ü—é—î"
    
    print("‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ")

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –ø–æ–∫—Ä–∞—â–µ–Ω—å v3.0...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    pytest.main([__file__, "-v", "--tb=short"])
    
    print("üéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
