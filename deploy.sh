#!/bin/bash
# –°–∫—Ä–∏–ø—Ç —à–≤–∏–¥–∫–æ–≥–æ –¥–µ–ø–ª–æ—é –ì—Ä—è–≥-–±–æ—Ç–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏

set -e  # –ó—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

echo "üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –¥–µ–ø–ª–æ–π –ì—Ä—è–≥-–±–æ—Ç–∞..."
echo "=================================="

# –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    exit 1
fi

log "‚úÖ Docker —Ç–∞ Docker Compose –¥–æ—Å—Ç—É–ø–Ω—ñ"

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ .env —Ñ–∞–π–ª
if [ ! -f ".env" ]; then
    log "‚ùå –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    if [ -f ".env.sample" ]; then
        log "üìÑ –ö–æ–ø—ñ—é—î–º–æ .env.sample –≤ .env"
        cp .env.sample .env
        log "‚ö†Ô∏è –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É"
        exit 1
    else
        log "‚ùå .env.sample —Ç–∞–∫–æ–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        exit 1
    fi
fi

log "‚úÖ –§–∞–π–ª .env –∑–Ω–∞–π–¥–µ–Ω–æ"

# –°—Ç–≤–æ—Ä—é—î–º–æ backup
log "üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ backup..."
if [ -d "data" ]; then
    backup_dir="backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    cp -r data "$backup_dir/"
    log "‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ: $backup_dir"
else
    log "‚ÑπÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è data –Ω–µ —ñ—Å–Ω—É—î, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ backup"
fi

# –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –≤–µ—Ä—Å—ñ—é
log "‚èπÔ∏è –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –≤–µ—Ä—Å—ñ—é..."
docker-compose down --remove-orphans || true

# –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–∞–∑
log "üèóÔ∏è –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±—Ä–∞–∑..."
docker-compose build --no-cache

# –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
log "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏..."
docker-compose up -d

# –ß–µ–∫–∞—î–º–æ –∑–∞–ø—É—Å–∫—É
log "‚è≥ –ß–µ–∫–∞—î–º–æ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞..."
sleep 15

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ health
log "üè• –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ health check..."
for i in {1..10}; do
    if curl -f http://localhost:8080/health &>/dev/null; then
        log "‚úÖ Bot —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!"
        break
    else
        if [ $i -eq 10 ]; then
            log "‚ùå Health check –Ω–µ –ø—Ä–æ–π—à–æ–≤ –ø—ñ—Å–ª—è 10 —Å–ø—Ä–æ–±"
            log "üìã –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
            docker-compose logs --tail=20 gryag-bot
            exit 1
        fi
        log "‚è≥ –°–ø—Ä–æ–±–∞ $i/10..."
        sleep 3
    fi
done

# –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å
log "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤:"
docker-compose ps

# –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–∞–∑–∏
log "üßπ –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –æ–±—Ä–∞–∑–∏..."
docker image prune -f

# –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
echo ""
echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
echo "=================================="
echo "üåê –í–µ–±-–¥–∞—à–±–æ—Ä–¥: http://localhost:8080"
echo "üìä Health check: http://localhost:8080/health"
echo "üìà –ú–µ—Ç—Ä–∏–∫–∏: http://localhost:8080/metrics"
echo ""
echo "üìã –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
echo "  –õ–æ–≥–∏ –±–æ—Ç–∞:     docker-compose logs -f gryag-bot"
echo "  –°—Ç–∞—Ç—É—Å:        docker-compose ps"
echo "  –ó—É–ø–∏–Ω–∏—Ç–∏:      docker-compose down"
echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏: docker-compose restart gryag-bot"
echo ""

# –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ª–æ–≥–∏
log "üìã –û—Å—Ç–∞–Ω–Ω—ñ –ª–æ–≥–∏ –±–æ—Ç–∞:"
docker-compose logs --tail=10 gryag-bot

echo "üöÄ –ì–æ—Ç–æ–≤–æ! –ë–æ—Ç –ø—Ä–∞—Ü—é—î."
