#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–∑–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞
"""
import sys
import os
import tempfile

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ—î–∫—Ç—É
sys.path.insert(0, os.path.dirname(__file__))

def test_imports():
    """–¢–µ—Å—Ç—É—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏ –≤—Å—ñ—Ö –º–æ–¥—É–ª—ñ–≤"""
    try:
        from bot.modules import context, gemini, management, media_map, random_life, smart_behavior, chat_scanner
        from bot.modules.context_sqlite import init_db, get_global_stats
        from bot.bot_config import PERSONA
        print("‚úÖ –í—Å—ñ –º–æ–¥—É–ª—ñ —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        return False

def test_database():
    """–¢–µ—Å—Ç—É—î–º–æ —Ä–æ–±–æ—Ç—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –±–∞–∑—É
        original_db = os.environ.get("BOT_DATA_DIR")
        temp_dir = tempfile.mkdtemp()
        os.environ["BOT_DATA_DIR"] = temp_dir
        
        from bot.modules.context_sqlite import init_db, save_message_obj, get_global_stats
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É
        init_db()
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è  
        save_message_obj(
            chat_id=-1001234567890,
            user="Test User",
            text="–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
            timestamp="2025-01-01T12:00:00"
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_global_stats()
        assert stats["total_messages"] == 1
        assert stats["active_chats"] == 1
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if original_db:
            os.environ["BOT_DATA_DIR"] = original_db
        else:
            del os.environ["BOT_DATA_DIR"]
            
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏: {e}")
        return False

def test_chat_scanner():
    """–¢–µ—Å—Ç—É—î–º–æ –º–æ–¥—É–ª—å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤"""
    try:
        from bot.modules.chat_scanner import is_chat_scanned, mark_chat_scanned
        
        test_chat_id = -1001111111111
        
        # –°–ø–æ—á–∞—Ç–∫—É —á–∞—Ç –Ω–µ —Å–∫–∞–Ω–æ–≤–∞–Ω–∏–π
        assert not is_chat_scanned(test_chat_id)
        
        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ —Å–∫–∞–Ω–æ–≤–∞–Ω–∏–π
        mark_chat_scanned(test_chat_id)
        
        # –¢–µ–ø–µ—Ä –º–∞—î –±—É—Ç–∏ —Å–∫–∞–Ω–æ–≤–∞–Ω–∏–π
        assert is_chat_scanned(test_chat_id)
        
        print("‚úÖ –ú–æ–¥—É–ª—å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è chat_scanner: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
    try:
        from bot.bot_config import PERSONA, DB_PATH, MEDIA_MAP_PATH, CHAT_STATE_PATH
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        assert "name" in PERSONA
        assert "auto_scan_history" in PERSONA
        assert "max_history_scan" in PERSONA
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–ª—è—Ö–∏
        assert DB_PATH.endswith(".db")
        assert MEDIA_MAP_PATH.endswith(".json")
        assert CHAT_STATE_PATH.endswith(".json")
        
        print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return False

def main():
    print("üß™ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ì—Ä—è–≥-–±–æ—Ç–∞...\n")
    
    tests = [
        ("–Ü–º–ø–æ—Ä—Ç–∏ –º–æ–¥—É–ª—ñ–≤", test_imports),
        ("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö", test_database), 
        ("–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤", test_chat_scanner),
        ("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è", test_config),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"üîç –¢–µ—Å—Ç—É—é: {test_name}")
        if test_func():
            passed += 1
        print()
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
        return 0
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
