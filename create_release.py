#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–ª—ñ–∑—É –ì—Ä—è–≥-–±–æ—Ç–∞
"""
import os
import zipfile
from pathlib import Path

def create_release():
    """–°—Ç–≤–æ—Ä—é—î –∞—Ä—Ö—ñ–≤ –∑ —Ä–µ–ª—ñ–∑–æ–º –±–æ—Ç–∞"""
    
    # –í–µ—Ä—Å—ñ—è –∑ CHANGELOG
    version = "v2.4"
    
    # –ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è
    current_dir = Path(__file__).parent
    
    # –ù–∞–∑–≤–∞ –∞—Ä—Ö—ñ–≤—É
    archive_name = f"gryag-bot-release-{version}.zip"
    archive_path = current_dir / archive_name
    
    # –§–∞–π–ª–∏ —Ç–∞ –ø–∞–ø–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è –≤ —Ä–µ–ª—ñ–∑
    include_files = [
        "bot/",
        "requirements.txt", 
        "start.py",
        "README.md",
        "CHANGELOG.md",
        "Dockerfile",
        "docker-compose.yml",
        ".env.example"
    ]
    
    # –§–∞–π–ª–∏ —Ç–∞ –ø–∞–ø–∫–∏ –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è
    exclude_patterns = [
        "__pycache__",
        ".git",
        ".env",
        "data/",
        "*.pyc",
        "*.pyo",
        "test_bot.py",
        "create_release.py",
        "gryag-bot-release*.zip",
        "gryag-bot-release*.tar.gz"
    ]
    
    print(f"–°—Ç–≤–æ—Ä—é—é —Ä–µ–ª—ñ–∑ {version}...")
    
    try:
        with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for item in include_files:
                item_path = current_dir / item
                
                if item_path.is_file():
                    # –î–æ–¥–∞—î–º–æ —Ñ–∞–π–ª
                    zipf.write(item_path, item)
                    print(f"–î–æ–¥–∞–Ω–æ —Ñ–∞–π–ª: {item}")
                    
                elif item_path.is_dir():
                    # –î–æ–¥–∞—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                    for root, dirs, files in os.walk(item_path):
                        # –í–∏–∫–ª—é—á–∞—î–º–æ –Ω–µ–±–∞–∂–∞–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                        dirs[:] = [d for d in dirs if not any(pattern in d for pattern in exclude_patterns)]
                        
                        for file in files:
                            # –í–∏–∫–ª—é—á–∞—î–º–æ –Ω–µ–±–∞–∂–∞–Ω—ñ —Ñ–∞–π–ª–∏
                            if any(pattern in file for pattern in exclude_patterns):
                                continue
                                
                            file_path = Path(root) / file
                            arc_path = file_path.relative_to(current_dir)
                            zipf.write(file_path, arc_path)
                            print(f"–î–æ–¥–∞–Ω–æ —Ñ–∞–π–ª: {arc_path}")
                            
        print(f"\n‚úÖ –†–µ–ª—ñ–∑ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {archive_name}")
        print(f"üìÅ –†–æ–∑–º—ñ—Ä –∞—Ä—Ö—ñ–≤—É: {archive_path.stat().st_size / 1024:.1f} KB")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–º—ñ—Å—Ç –∞—Ä—Ö—ñ–≤—É
        print(f"\nüìã –í–º—ñ—Å—Ç –∞—Ä—Ö—ñ–≤—É:")
        with zipfile.ZipFile(archive_path, 'r') as zipf:
            for name in sorted(zipf.namelist()):
                print(f"  {name}")
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞—Ä—Ö—ñ–≤—É: {e}")
        return False
        
    return True

if __name__ == "__main__":
    create_release()
