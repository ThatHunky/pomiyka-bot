# Makefile –¥–ª—è –ì—Ä—è–≥-–±–æ—Ç–∞
.PHONY: help install install-dev setup format lint test clean run docker-build docker-run

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏
	@echo "$(GREEN)ü§ñ –ì—Ä—è–≥-–±–æ—Ç - Makefile –∫–æ–º–∞–Ω–¥–∏$(NC)"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "$(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

install: ## –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
	@echo "$(GREEN)üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...$(NC)"
	pip install -r requirements.txt

install-dev: install ## –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
	@echo "$(GREEN)üõ†Ô∏è  –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è dev –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...$(NC)"
	pip install -r requirements-dev.txt
	pre-commit install

setup: install-dev ## –ü–æ–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ä–æ–∑—Ä–æ–±–∫–∏
	@echo "$(GREEN)üöÄ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ä–æ–∑—Ä–æ–±–∫–∏...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  –ö–æ–ø—ñ—é—é .env.example -> .env$(NC)"; \
		cp .env.example .env; \
		echo "$(RED)‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª –∑ –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏$(NC)"; \
	fi
	mkdir -p data logs backups
	@echo "$(GREEN)‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–±–æ—Ç–∏!$(NC)"

format: ## –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É
	@echo "$(GREEN)üé® –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É...$(NC)"
	black bot/ tests/ *.py
	isort bot/ tests/ *.py

lint: ## –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É –ª—ñ–Ω—Ç–µ—Ä–∞–º–∏
	@echo "$(GREEN)üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É...$(NC)"
	black --check bot/ tests/ *.py
	isort --check-only bot/ tests/ *.py
	flake8 bot/ tests/ *.py
	mypy bot/
	bandit -r bot/ -f json -o bandit-report.json || true
	safety check

test: ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤...$(NC)"
	pytest -v --cov=bot --cov-report=term-missing

test-quick: ## –®–≤–∏–¥–∫—ñ —Ç–µ—Å—Ç–∏ (–±–µ–∑ coverage)
	@echo "$(GREEN)‚ö° –®–≤–∏–¥–∫—ñ —Ç–µ—Å—Ç–∏...$(NC)"
	pytest -v -x

clean: ## –û—á–∏—Å—Ç–∫–∞ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
	@echo "$(GREEN)üßπ –û—á–∏—Å—Ç–∫–∞...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	rm -rf .pytest_cache .mypy_cache .coverage htmlcov/ bandit-report.json
	rm -rf *.egg-info build/ dist/

run: ## –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
	@echo "$(GREEN)ü§ñ –ó–∞–ø—É—Å–∫ –ì—Ä—è–≥-–±–æ—Ç–∞...$(NC)"
	python -m bot.main

run-dev: ## –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
	@echo "$(GREEN)üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏...$(NC)"
	python start.py

check-deps: ## –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
	@echo "$(GREEN)üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...$(NC)"
	pip check
	safety check

docker-build: ## –ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—É
	@echo "$(GREEN)üê≥ –ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—É...$(NC)"
	docker build -t gryag-bot .

docker-run: ## –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	@echo "$(GREEN)üê≥ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(NC)"
	docker-compose up -d

docker-logs: ## –ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤ Docker
	@echo "$(GREEN)üìã –õ–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(NC)"
	docker-compose logs -f

docker-stop: ## –ó—É–ø–∏–Ω–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	@echo "$(GREEN)üõë –ó—É–ø–∏–Ω–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(NC)"
	docker-compose down

pre-commit: format lint test ## –í–∏–∫–æ–Ω–∞—Ç–∏ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º—ñ—Ç–æ–º
	@echo "$(GREEN)‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ!$(NC)"

analyze: ## –ê–Ω–∞–ª—ñ–∑ –∫–æ–¥—É —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	@echo "$(GREEN)üìä –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–µ–∫—Ç—É...$(NC)"
	@echo "–†—è–¥–∫—ñ–≤ –∫–æ–¥—É –≤ bot/:"
	@find bot/ -name "*.py" -exec wc -l {} + | tail -1
	@echo "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤:"
	@find bot/ -name "*.py" | wc -l
	@echo "TODOs —Ç–∞ FIXMEs:"
	@grep -r "TODO\|FIXME" bot/ || echo "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

backup: ## –°—Ç–≤–æ—Ä–∏—Ç–∏ backup
	@echo "$(GREEN)üíæ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup...$(NC)"
	python -c "from bot.modules.backup_manager import BackupManager; BackupManager().create_backup()"

# –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ü—ñ–ª—ñ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞
install-local-deps: ## –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞
	@echo "$(GREEN)üß† –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞...$(NC)"
	pip install sentence-transformers spacy
	python -m spacy download uk_core_news_sm || echo "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞"
	python -m spacy download en_core_web_sm

test-local-analyzer: ## –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞
	@echo "$(GREEN)üß† –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞...$(NC)"
	python -c "from bot.modules.local_analyzer import get_analyzer; print('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –ø—Ä–∞—Ü—é—î')"

# –¶—ñ–ª—ñ –¥–ª—è CI/CD
ci: lint test ## CI –ø–∞–π–ø–ª–∞–π–Ω
	@echo "$(GREEN)üîÑ CI –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

build-release: clean test docker-build ## –ü–æ–≤–Ω–∞ –∑–±—ñ—Ä–∫–∞ —Ä–µ–ª—ñ–∑—É
	@echo "$(GREEN)üéâ –†–µ–ª—ñ–∑ –≥–æ—Ç–æ–≤–∏–π!$(NC)"

# –ù–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω—å –§–∞–∑–∏ 1
monitor: ## –ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
	@echo "$(GREEN)üìä –ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É...$(NC)"
	python -c "from bot.modules.web_dashboard import start_dashboard; start_dashboard()"

validate-config: ## –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
	@echo "$(GREEN)üîß –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...$(NC)"
	python -c "from bot.modules.config_validator import ConfigValidator; ConfigValidator().validate_all()"
