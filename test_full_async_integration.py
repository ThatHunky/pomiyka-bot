#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç –≤—Å—ñ—Ö async-—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
"""

import asyncio
import os
import tempfile
import logging
from datetime import datetime
from bot.modules.context_sqlite import init_db, save_message_obj, get_context
from bot.modules.local_analyzer import get_analyzer
from bot.modules.personalization import create_personalization_manager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_all_async_modules():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç –≤—Å—ñ—Ö async –º–æ–¥—É–ª—ñ–≤"""
    
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç async —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –ë–î
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_context:
        context_db_path = tmp_context.name
    
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_analyzer:
        analyzer_db_path = tmp_analyzer.name
    
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_personal:
        personal_db_path = tmp_personal.name
    
    try:
        # 1. –¢–µ—Å—Ç context_sqlite
        print("üìã 1. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è context_sqlite (async)...")
        await init_db()
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ save_message_obj –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        await save_message_obj(
            chat_id=12345,
            user="test_user",
            text="–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è context",
            timestamp=datetime.now().isoformat()
        )
        
        context = await get_context(12345, limit=10)
        assert len(context) > 0, "Context –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        print("‚úÖ context_sqlite –ø—Ä–∞—Ü—é—î async")
        
        # 2. –¢–µ—Å—Ç local_analyzer
        print("üìã 2. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è local_analyzer (async)...")
        analyzer = get_analyzer()
        analyzer.db_path = analyzer_db_path
        
        # –ö–µ—à—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É
        await analyzer.cache_analysis(
            chat_id=12345,
            analysis_type="conversation_type",
            result="technical",
            confidence=0.85
        )
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–µ—à—É
        cached = await analyzer.get_cached_analysis(
            chat_id=12345,
            analysis_type="conversation_type"
        )
        assert cached is not None, "–ö–µ—à –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑"
        print("‚úÖ local_analyzer –ø—Ä–∞—Ü—é—î async")
        
        # 3. –¢–µ—Å—Ç personalization
        print("üìã 3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è personalization (async)...")
        personal_manager = await create_personalization_manager(personal_db_path)
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        result = await personal_manager.process_user_message(
            user_id=67890,
            username="test_user",
            text="–ü—Ä–∏–≤—ñ—Ç! –î—É–∂–µ –∫—Ä—É—Ç–æ! üòä"
        )
        assert result['processed'], "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = await personal_manager.get_user_statistics(67890)
        assert 'error' not in stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—î –±—É—Ç–∏ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫"
        print("‚úÖ personalization –ø—Ä–∞—Ü—é—î async")
        
        # 4. –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç
        print("üìã 4. –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç...")
        
        # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
        tasks = [
            save_message(12345, 11111, "user1", "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 1", datetime.now()),
            analyzer.cache_analysis(12345, "mood", "happy", 0.9),
            personal_manager.process_user_message(11111, "user1", "–ü—Ä–∏–≤—ñ—Ç!"),
        ]
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ–π—à–ª–∏ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                print(f"‚ùå –ó–∞–¥–∞—á–∞ {i+1} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: {result}")
                return False
        
        print("‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        # 5. –¢–µ—Å—Ç concurrent –æ–ø–µ—Ä–∞—Ü—ñ–π
        print("üìã 5. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è concurrent –æ–ø–µ—Ä–∞—Ü—ñ–π...")
        
        concurrent_tasks = []
        for i in range(10):
            concurrent_tasks.extend([
                save_message(12345, 20000+i, f"user_{i}", f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {i}", datetime.now()),
                analyzer.cache_analysis(12345, f"test_{i}", f"result_{i}", 0.7),
                personal_manager.process_user_message(20000+i, f"user_{i}", f"–¢–µ—Å—Ç {i}")
            ])
        
        concurrent_results = await asyncio.gather(*concurrent_tasks, return_exceptions=True)
        
        errors = [r for r in concurrent_results if isinstance(r, Exception)]
        if errors:
            print(f"‚ùå {len(errors)} –ø–æ–º–∏–ª–æ–∫ –≤ concurrent —Ç–µ—Å—Ç—ñ")
            for error in errors[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 –ø–æ–º–∏–ª–∫–∏
                print(f"   - {error}")
            return False
        
        print("‚úÖ Concurrent –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å")
        
        print("\nüéâ –í—Å—ñ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –ë–î
        for db_path in [context_db_path, analyzer_db_path, personal_db_path]:
            try:
                os.unlink(db_path)
            except:
                pass

async def performance_test():
    """–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ async –æ–ø–µ—Ä–∞—Ü—ñ–π"""
    print("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ async –æ–ø–µ—Ä–∞—Ü—ñ–π...")
    
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_file:
        db_path = tmp_file.name
    
    try:
        await init_db(db_path)
        
        # –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        start_time = asyncio.get_event_loop().time()
        
        tasks = []
        for i in range(100):
            tasks.append(save_message(
                chat_id=12345,
                user_id=i,
                username=f"user_{i}",
                text=f"–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {i}",
                timestamp=datetime.now()
            ))
        
        await asyncio.gather(*tasks)
        
        end_time = asyncio.get_event_loop().time()
        elapsed = end_time - start_time
        
        print(f"‚úÖ 100 async –∑–±–µ—Ä–µ–∂–µ–Ω—å –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥ ({100/elapsed:.1f} ops/sec)")
        
        # –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        start_time = asyncio.get_event_loop().time()
        
        tasks = []
        for i in range(50):
            tasks.append(get_context(12345, limit=20))
        
        await asyncio.gather(*tasks)
        
        end_time = asyncio.get_event_loop().time()
        elapsed = end_time - start_time
        
        print(f"‚úÖ 50 async –æ—Ç—Ä–∏–º–∞–Ω—å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥ ({50/elapsed:.1f} ops/sec)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
        return False
        
    finally:
        try:
            os.unlink(db_path)
        except:
            pass

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üî• –§–Ü–ù–ê–õ–¨–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø ASYNC –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–£")
    print("=" * 50)
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π —Ç–µ—Å—Ç
    complex_success = await test_all_async_modules()
    
    # –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    perf_success = await performance_test()
    
    print("\n" + "=" * 50)
    if complex_success and perf_success:
        print("üèÜ –£–°–ü–Ü–•: Async —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∏–π –¥–æ production!")
        print("üìä –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å: 100%")
        print("üöÄ –°—Ç–∞—Ç—É—Å: ENTERPRISE-READY")
        return 0
    elif complex_success:
        print("‚ö†Ô∏è –ß–ê–°–¢–ö–û–í–ò–ô –£–°–ü–Ü–•: –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å, –∞–ª–µ —î –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
        return 0
    else:
        print("‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –≤ async —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó!")
        return 1

if __name__ == "__main__":
    import sys
    sys.exit(asyncio.run(main()))
