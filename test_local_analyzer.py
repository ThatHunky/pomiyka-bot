#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –Ω–∞ i5-6500
"""

import asyncio
import os
import sys
import json
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—ñ–≤ –±–æ—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'bot'))

async def test_local_analyzer():
    """–¢–µ—Å—Ç—É—î –ª–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä"""
    print("üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞...")
    
    try:
        from bot.modules.local_analyzer import LocalAnalyzer, get_analyzer, analyze_text_local
        print("‚úÖ –ú–æ–¥—É–ª—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        try:
            from sentence_transformers import SentenceTransformer
            print("‚úÖ sentence-transformers –¥–æ—Å—Ç—É–ø–Ω–∞")
            transformers_available = True
        except ImportError:
            print("‚ùå sentence-transformers –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            transformers_available = False
        
        try:
            import spacy
            print("‚úÖ spaCy –¥–æ—Å—Ç—É–ø–Ω–∞")
            spacy_available = True
        except ImportError:
            print("‚ùå spaCy –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            spacy_available = False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        test_data_dir = "test_data"
        os.makedirs(test_data_dir, exist_ok=True)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä
        analyzer = LocalAnalyzer(db_path=os.path.join(test_data_dir, "test_analysis.db"))
        print("‚úÖ –ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        test_messages = [
            "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏? üòä",
            "–¶–µ–π –∫–æ–¥ –Ω–∞ Python –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–æ–º–æ–≥–∏ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—è",
            "–î—É–∂–µ —Å—É–º–Ω–æ —â–æ —Ç–∞–∫ —Å—Ç–∞–ª–æ—Å—è üò¢",
            "–û–ì–û! –¶–µ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –∫—Ä—É—Ç–æ! üî•",
            "–©–æ –±—É–¥–µ–º–æ –Ω–∞ –æ–±—ñ–¥ –≥–æ—Ç—É–≤–∞—Ç–∏?",
            "–î—É—Ä–Ω—è, —Ç–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–∑—É–º—ñ—î—à! üò°",
            "–î—É–º–∞—é, —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–µ...",
            "git push origin main –Ω–µ –ø—Ä–∞—Ü—é—î",
            "–î–∏–≤–ª—é—Å—è –Ω–æ–≤–∏–π —Ñ—ñ–ª—å–º Marvel, —Å—É–ø–µ—Ä!",
            "–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —á—É–¥–æ–≤–∞, —Å–æ–Ω—è—á–Ω–æ ‚òÄÔ∏è"
        ]
        
        print("\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
        
        for i, message in enumerate(test_messages, 1):
            print(f"\n{i}. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{message}'")
            
            start_time = datetime.now()
            analysis = await analyzer.analyze_message(message)
            end_time = datetime.now()
            
            processing_time = (end_time - start_time).total_seconds() * 1000
            
            print(f"   üé≠ –ï–º–æ—Ü—ñ—è: {analysis['emotion']} (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {analysis['confidence']:.2f})")
            print(f"   üìù –¢–µ–º–∞: {analysis['topic']}")
            print(f"   üîë –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: {', '.join(analysis['keywords'])}")
            print(f"   ‚ö° –ú–µ—Ç–æ–¥: {analysis['analysis_method']}")
            print(f"   ‚è±Ô∏è  –ß–∞—Å: {processing_time:.1f}–º—Å")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        print("\nüìà –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É...")
        
        chat_history = [
            {"text": msg, "user": f"user_{i%3}", "timestamp": datetime.now().timestamp()}
            for i, msg in enumerate(test_messages)
        ]
        
        context_analysis = await analyzer.analyze_conversation_batch(chat_history, chat_id=123)
        
        print(f"üìã –ü—ñ–¥—Å—É–º–æ–∫ —Ä–æ–∑–º–æ–≤–∏: {context_analysis['summary']}")
        print(f"üé≠ –î–æ–º—ñ–Ω—É—é—á–∞ –µ–º–æ—Ü—ñ—è: {context_analysis['dominant_emotion']}")
        print(f"üìö –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ–º–∏: {', '.join(context_analysis['main_topics'])}")
        print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {context_analysis['message_count']}")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∫–µ—à
        print("\nüíæ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è...")
        
        start_time = datetime.now()
        cached_analysis = await analyzer.analyze_message(test_messages[0])  # –¢–æ–π –∂–µ —Ç–µ–∫—Å—Ç
        end_time = datetime.now()
        
        cache_time = (end_time - start_time).total_seconds() * 1000
        print(f"‚ö° –ß–∞—Å –∑ –∫–µ—à—É: {cache_time:.1f}–º—Å")
        print(f"‚úÖ –ú–µ—Ç–æ–¥: {cached_analysis['analysis_method']}")
        
        # –¢–µ—Å—Ç—É—î–º–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ situation_predictor
        print("\nüîó –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ situation_predictor...")
        
        try:
            from bot.modules.situation_predictor import (
                analyze_message_context_enhanced, 
                generate_enhanced_context_prompt,
                is_local_analyzer_available
            )
            
            print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π: {is_local_analyzer_available()}")
            
            enhanced_analysis = await analyze_message_context_enhanced(
                "–ì—Ä—è–≥, –ø–æ—è—Å–Ω–∏ —è–∫ –ø—Ä–∞—Ü—é—î React useEffect —Ö—É–∫",
                chat_history,
                chat_id=123
            )
            
            print(f"üéØ –¢–∏–ø —Ä–æ–∑–º–æ–≤–∏: {enhanced_analysis['type']}")
            print(f"üé≠ –ù–∞—Å—Ç—Ä—ñ–π: {enhanced_analysis['mood']}")
            print(f"üìà –†—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ: {enhanced_analysis['engagement_level']}/10")
            print(f"üí¨ –ß–∏ –≤—Ç—Ä—É—á–∞—Ç–∏—Å—è –±–æ—Ç—É: {enhanced_analysis['should_intervene']}")
            print(f"üé® –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ç–æ–Ω: {enhanced_analysis['suggested_tone']}")
            
            # –¢–µ—Å—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø—Ä–æ–º–ø—Ç—É
            prompt = await generate_enhanced_context_prompt(
                "–ì—Ä—è–≥, —è–∫ —Å–ø—Ä–∞–≤–∏?",
                123,
                chat_history
            )
            
            print(f"\nüìù –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç:")
            print(f"'{prompt[:200]}...' (–ø–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤)")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:")
        print(f"üß† –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {analyzer.model is not None}")
        print(f"üìö NLP –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {analyzer.nlp is not None}")
        print(f"üíæ –†–æ–∑–º—ñ—Ä –∫–µ—à—É: {len(analyzer.analysis_cache)}")
        print(f"‚öôÔ∏è  –†–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç—É: {analyzer.batch_size}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è i5-6500
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è i5-6500:")
        
        if not transformers_available:
            print("üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install sentence-transformers")
            print("üöÄ –¶–µ –∑–Ω–∞—á–Ω–æ –ø–æ–∫—Ä–∞—â–∏—Ç—å —è–∫—ñ—Å—Ç—å –∞–Ω–∞–ª—ñ–∑—É")
        
        if not spacy_available:
            print("üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install spacy")
            print("üì¶ –ü–æ—Ç—ñ–º: python -m spacy download uk_core_news_sm")
            print("üîç –¶–µ –ø–æ–∫—Ä–∞—â–∏—Ç—å –æ–±—Ä–æ–±–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏")
        
        print("‚ö° –ü—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å BOT_ANALYSIS_BATCH_SIZE=5")
        print("üíæ –ü—Ä–∏ –æ–±–º–µ–∂–µ–Ω—ñ–π RAM –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å BOT_ANALYSIS_CACHE_HOURS=12")
        print("üßπ –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –Ω–∞ –≤–µ–ª–∏–∫–æ–º—É –æ–±—Å—è–∑—ñ –¥–∞–Ω–∏—Ö"""
    print("\nüöÄ –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")
    
    try:
        from bot.modules.local_analyzer import get_analyzer
        
        analyzer = get_analyzer()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–≥–∞—Ç–æ —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        large_dataset = [
            "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?",
            "–¶–µ–π Python –∫–æ–¥ –Ω–µ –ø—Ä–∞—Ü—é—î",
            "–î—É–∂–µ —Å—É–º–Ω–æ",
            "–ù–µ–π–º–æ–≤—ñ—Ä–Ω–æ –∫—Ä—É—Ç–æ!",
            "–©–æ –Ω–∞ –æ–±—ñ–¥?",
        ] * 20  # 100 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        
        print(f"üìä –û–±—Ä–æ–±–∫–∞ {len(large_dataset)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
        
        start_time = datetime.now()
        
        for i, message in enumerate(large_dataset):
            await analyzer.analyze_message(message)
            if (i + 1) % 20 == 0:
                print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ {i + 1}/{len(large_dataset)}")
        
        end_time = datetime.now()
        total_time = (end_time - start_time).total_seconds()
        
        print(f"‚è±Ô∏è  –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å: {len(large_dataset)/total_time:.1f} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å/—Å–µ–∫")
        print(f"üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à—É: {len(analyzer.analysis_cache)} –∑–∞–ø–∏—Å—ñ–≤")
        
        # –û—Ü—ñ–Ω–∫–∞ –¥–ª—è i5-6500
        if total_time > 60:
            print("‚ö†Ô∏è  –®–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–∏–∑—å–∫–∞ –¥–ª—è i5-6500")
            print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º–µ–Ω—à–∏—Ç–∏ BOT_ANALYSIS_BATCH_SIZE –¥–æ 3")
        elif total_time < 30:
            print("üöÄ –®–≤–∏–¥–∫—ñ—Å—Ç—å —á—É–¥–æ–≤–∞ –¥–ª—è i5-6500!")
        else:
            print("‚úÖ –®–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–∞ –¥–ª—è i5-6500")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")

if __name__ == "__main__":
    print("ü§ñ –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –ì—Ä—è–≥-–±–æ—Ç–∞")
    print("üíª –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è Intel i5-6500, 16GB RAM")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ—Å—Ç
    success = asyncio.run(test_local_analyzer())
    
    if success:
        # –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        asyncio.run(test_performance())
        
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ!")
        print("\nüìã –©–æ–± —É–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä:")
        print("1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pip install sentence-transformers spacy")
        print("2. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å BOT_LOCAL_ANALYSIS_ENABLED=true –≤ .env")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        sys.exit(1)
