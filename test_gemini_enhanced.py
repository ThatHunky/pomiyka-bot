#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ Gemini API –º–æ–¥—É–ª—è.
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ API —Ç–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑—ñ —Å—Ç–∞—Ä–∏–º –∫–æ–¥–æ–º.
"""

import asyncio
import sys
import os
import json
import time
from typing import Dict, Any
import pytest

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è pytest-asyncio
pytest_plugins = ('pytest_asyncio',)

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—ñ–≤ –±–æ—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "bot"))

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–æ–¥—É–ª—å
from bot.modules.gemini_enhanced import (
    GeminiAPIClient,
    GenerationConfig,
    ThinkingConfig,
    HarmCategory,
    HarmBlockThreshold,
    SafetySetting,
    get_client,
    get_api_stats,
    clear_cache,
    api_stats,
    cache
)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ wrapper –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
from bot.modules.gemini import (
    get_gemini_stats,
    clear_gemini_cache,
    create_custom_client
)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π message –æ–±'—î–∫—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
class FakeUser:
    def __init__(self, full_name: str = "Test User"):
        self.full_name = full_name

class FakeChat:
    def __init__(self, chat_id: int = -1001234567890):
        self.id = chat_id

class FakeMessage:
    def __init__(self, text: str = "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?", chat_id: int = -1001234567890):
        self.text = text
        self.chat = FakeChat(chat_id)
        self.from_user = FakeUser()
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
        self.processed_context = []
        self.recommendations = {
            'response_style': 'normal',
            'max_response_length': 200,
            'should_ask_clarification': False,
            'should_provide_guidance': False,
            'max_context_size': 10000
        }

@pytest.mark.asyncio
async def test_basic_api_client():
    """–¢–µ—Å—Ç—É—î –æ—Å–Ω–æ–≤–Ω–∏–π API –∫–ª—ñ—î–Ω—Ç."""
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤–∏–π API –∫–ª—ñ—î–Ω—Ç...")
    
    try:
        client = await get_client()
        
        # –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç
        response = await client.generate_content(
            "–ü—Ä–∏–≤—ñ—Ç! –°–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ —è–∫ —Å–ø—Ä–∞–≤–∏?",
            context_type="normal"
        )
        
        print(f"‚úÖ –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response[:100]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ API: {e}")
        return False

@pytest.mark.asyncio
async def test_generation_config():
    """–¢–µ—Å—Ç—É—î –∫–∞—Å—Ç–æ–º–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó."""
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é...")
    
    try:
        client = await get_client()
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ –Ω–∏–∑—å–∫–æ—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ—é –¥–ª—è –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ—Å—Ç—ñ
        config = GenerationConfig(
            temperature=0.1,
            max_output_tokens=50,
            top_p=0.8,
            top_k=20
        )
        
        response = await client.generate_content(
            "–î–∞–π –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å: —Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2?",
            custom_config=config
        )
        
        print(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response[:100]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return False

async def test_thinking_mode():
    """–¢–µ—Å—Ç—É—î —Ä–µ–∂–∏–º thinking."""
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ —Ä–µ–∂–∏–º thinking...")
    
    try:
        client = await get_client()
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ thinking
        config = GenerationConfig(
            temperature=0.7,
            max_output_tokens=200,
            thinking_config=ThinkingConfig(
                include_thoughts=False,  # –ù–µ –≤–∫–ª—é—á–∞—î–º–æ –¥—É–º–∫–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                thinking_budget=1024
            )
        )
        
        response = await client.generate_content(
            "–†–æ–∑–≤'—è–∂–∏ —Ü—é –ª–æ–≥—ñ—á–Ω—É –∑–∞–¥–∞—á—É: –Ø–∫—â–æ –≤—Å—ñ –∫–æ—Ç–∏ –ª—é–±–ª—è—Ç—å —Ä–∏–±—É, –∞ –ú—É—Ä–∑—ñ–∫ —Ü–µ –∫—ñ—Ç, —Ç–æ —â–æ –º–æ–∂–Ω–∞ —Å–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ –ú—É—Ä–∑—ñ–∫–∞?",
            custom_config=config
        )
        
        print(f"‚úÖ Thinking —Ä–µ–∂–∏–º –ø—Ä–∞—Ü—é—î. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response[:150]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ thinking —Ä–µ–∂–∏–º—É: {e}")
        return False

async def test_safety_settings():
    """–¢–µ—Å—Ç—É—î –∫–∞—Å—Ç–æ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏."""
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏...")
    
    try:
        client = await get_client()
        
        # –ë—ñ–ª—å—à –¥–æ–∑–≤–æ–ª—è—é—á—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        safety_settings = [
            SafetySetting(HarmCategory.HARASSMENT, HarmBlockThreshold.BLOCK_ONLY_HIGH),
            SafetySetting(HarmCategory.DANGEROUS_CONTENT, HarmBlockThreshold.BLOCK_ONLY_HIGH),
        ]
        
        response = await client.generate_content(
            "–†–æ–∑–∫–∞–∂–∏ –∂–∞—Ä—Ç –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤",
            custom_safety=safety_settings
        )
        
        print(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞ –±–µ–∑–ø–µ–∫–∞ –ø—Ä–∞—Ü—é—î. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response[:100]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏: {e}")
        return False

async def test_context_types():
    """–¢–µ—Å—Ç—É—î —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ —Ç–∏–ø–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
    
    try:
        client = await get_client()
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏
        test_cases = [
            ("normal", "–Ø–∫ —Å–ø—Ä–∞–≤–∏?"),
            ("minimal", "–ü—Ä–∏–≤—ñ—Ç"),
            ("guidance", "–©–æ –º–µ–Ω—ñ —Ä–æ–±–∏—Ç–∏?"),
            ("clarification", "–ù–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ"),
            ("humor", "–†–æ–∑—Å–º—ñ–π –º–µ–Ω–µ")
        ]
        
        for context_type, prompt in test_cases:
            response = await client.generate_content(
                prompt,
                context_type=context_type
            )
            print(f"  ‚úì {context_type}: {response[:80]}...")
            # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ API
            await asyncio.sleep(0.5)
        
        print("‚úÖ –í—Å—ñ —Ç–∏–ø–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—Ä–∞—Ü—é—é—Ç—å")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–∏–ø—ñ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {e}")
        return False

async def test_caching():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –∫–µ—à—É–≤–∞–Ω–Ω—è."""
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ –∫–µ—à—É–≤–∞–Ω–Ω—è...")
    
    try:
        # –û—á–∏—â–∞—î–º–æ –∫–µ—à
        await clear_cache()
        
        client = await get_client()
        test_prompt = "–°–∫–∞–∂–∏ '–ø—Ä–∏–≤—ñ—Ç' —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"
        
        # –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Ç (cache miss)
        start_time = time.time()
        response1 = await client.generate_content(test_prompt)
        time1 = time.time() - start_time
        
        # –î—Ä—É–≥–∏–π –∑–∞–ø–∏—Ç (–ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ cache hit)
        start_time = time.time()
        response2 = await client.generate_content(test_prompt)
        time2 = time.time() - start_time
        
        if time2 < time1 * 0.5:  # –î—Ä—É–≥–∏–π –∑–∞–ø–∏—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —à–≤–∏–¥—à–∏–º
            print(f"‚úÖ –ö–µ—à—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î. –ß–∞—Å: {time1:.2f}—Å ‚Üí {time2:.2f}—Å")
        else:
            print(f"‚ö†Ô∏è  –ö–µ—à—É–≤–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ –Ω–µ –ø—Ä–∞—Ü—é—î. –ß–∞—Å: {time1:.2f}—Å ‚Üí {time2:.2f}—Å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è: {e}")
        return False

async def test_rate_limiting():
    """–¢–µ—Å—Ç—É—î rate limiting."""
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ rate limiting...")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
        can_make_request = api_stats.can_make_request()
        rpm = api_stats.get_rpm()
        
        print(f"  üìä –ü–æ—Ç–æ—á–Ω–∏–π RPM: {rpm}")
        print(f"  üö¶ –ú–æ–∂–Ω–∞ —Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç: {can_make_request}")
        
        # –†–æ–±–∏–º–æ –∫—ñ–ª—å–∫–∞ —à–≤–∏–¥–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        for i in range(3):
            if api_stats.can_make_request():
                client = await get_client()
                response = await client.generate_content(f"–¢–µ—Å—Ç {i+1}")
                print(f"  ‚úì –ó–∞–ø–∏—Ç {i+1} —É—Å–ø—ñ—à–Ω–∏–π")
            else:
                print(f"  ‚è∏Ô∏è –ó–∞–ø–∏—Ç {i+1} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π rate limiter")
            
            await asyncio.sleep(0.2)
        
        print("‚úÖ Rate limiting –ø—Ä–∞—Ü—é—î")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ rate limiting: {e}")
        return False

async def test_statistics():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π API
        stats = await get_api_stats()
        print(f"  üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {json.dumps(stats, indent=2, ensure_ascii=False)}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ wrapper –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        compat_stats = await get_gemini_stats()
        print(f"  üîÑ –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å wrapper: –û–ö")
        
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞—Ü—é—î")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

async def test_compatibility_wrapper():
    """–¢–µ—Å—Ç—É—î wrapper –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º –∫–æ–¥–æ–º."""
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑—ñ —Å—Ç–∞—Ä–∏–º –∫–æ–¥–æ–º...")
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
        custom_client = await create_custom_client(
            model="gemini-2.5-flash",
            temperature=0.5,
            max_tokens=100
        )
        
        # –¢–µ—Å—Ç—É—î–º–æ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
        await clear_gemini_cache()
        
        print("‚úÖ Wrapper –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –ø—Ä–∞—Ü—é—î")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ wrapper —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ: {e}")
        return False

async def test_fake_message_processing():
    """–¢–µ—Å—Ç—É—î –æ–±—Ä–æ–±–∫—É FakeMessage –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏."""
    print("üß™ –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É FakeMessage...")
    
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        from bot.modules.gemini import process_message
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏
        fake_msg = FakeMessage("–î–æ–ø–æ–º–æ–∂–∏ –º–µ–Ω—ñ –∑ Python")
        fake_msg.recommendations = {
            'response_style': 'concise',
            'max_response_length': 150,
            'should_provide_guidance': True,
            'max_context_size': 5000
        }
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        response = await process_message(fake_msg)
        
        print(f"‚úÖ FakeMessage –æ–±—Ä–æ–±–∫–∞ –ø—Ä–∞—Ü—é—î. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response[:100]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ FakeMessage –æ–±—Ä–æ–±–∫–∏: {e}")
        return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ Gemini API\n")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î API –∫–ª—é—á
    if not os.getenv("GEMINI_API_KEY"):
        print("‚ùå GEMINI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        print("   –î–æ–¥–∞–π—Ç–µ –∫–ª—é—á —É .env —Ñ–∞–π–ª –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        return
    
    tests = [
        ("–ë–∞–∑–æ–≤–∏–π API –∫–ª—ñ—î–Ω—Ç", test_basic_api_client),
        ("–ö–∞—Å—Ç–æ–º–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è", test_generation_config),
        ("Thinking —Ä–µ–∂–∏–º", test_thinking_mode),
        ("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏", test_safety_settings),
        ("–¢–∏–ø–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É", test_context_types),
        ("–ö–µ—à—É–≤–∞–Ω–Ω—è", test_caching),
        ("Rate limiting", test_rate_limiting),
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", test_statistics),
        ("Wrapper —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ", test_compatibility_wrapper),
        ("FakeMessage –æ–±—Ä–æ–±–∫–∞", test_fake_message_processing),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"–¢–µ—Å—Ç: {test_name}")
        print('='*50)
        
        try:
            success = await test_func()
            if success:
                passed += 1
        except Exception as e:
            print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        
        # –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(1)
    
    print(f"\n{'='*60}")
    print(f"üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print('='*60)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total-passed}/{total}")
    print(f"üìä –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {passed/total*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ! –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π Gemini API –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.")
    else:
        print(f"\n‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ API –∫–ª—é—á.")
    
    # –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_stats = await get_api_stats()
    print(f"\nüìà –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:")
    print(f"   ‚Ä¢ –ó–∞–ø–∏—Ç—ñ–≤: {final_stats['total_requests']}")
    print(f"   ‚Ä¢ –£—Å–ø—ñ—à–Ω–∏—Ö: {final_stats['successful_requests']}")
    print(f"   ‚Ä¢ –¢–æ–∫–µ–Ω—ñ–≤: {final_stats['total_tokens']}")
    print(f"   ‚Ä¢ Cache hits: {final_stats['cache_hits']}")

if __name__ == "__main__":
    asyncio.run(main())
