#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ async —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
"""

import asyncio
import sys
import os
import tempfile
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—ñ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), 'bot'))

async def test_async_context_sqlite():
    """–¢–µ—Å—Ç async —Ñ—É–Ω–∫—Ü—ñ–π context_sqlite"""
    print("üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è context_sqlite async —Ñ—É–Ω–∫—Ü—ñ–π...")
    
    try:
        from bot.modules.context_sqlite import (
            init_db, save_message, get_context, 
            get_recent_messages, add_message_to_context,
            get_chat_stats, get_global_stats, get_active_chats,
            import_telegram_history, save_message_obj
        )
        
        # –¢–∏–º—á–∞—Å–æ–≤–∞ —Ç–µ—Å—Ç–æ–≤–∞ –ë–î
        temp_db = tempfile.mktemp(suffix='.db')
        
        # –ú–æ–∫–∞—î–º–æ Message –æ–±'—î–∫—Ç
        class MockMessage:
            def __init__(self, text: str, chat_id: int = 123):
                self.text = text
                self.chat = type('Chat', (), {'id': chat_id})()
                self.from_user = type('User', (), {
                    'id': 999, 
                    'full_name': 'Test User'
                })()
        
        # –¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î
        await init_db()
        print("‚úÖ init_db() - —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        test_msg = MockMessage("–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", 123)
        await save_message(test_msg)
        print("‚úÖ save_message() - —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        context = await get_context(123, limit=10)
        assert isinstance(context, list), "Context –º–∞—î –±—É—Ç–∏ —Å–ø–∏—Å–∫–æ–º"
        print("‚úÖ get_context() - —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        await add_message_to_context(123, "Test User", "–©–µ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        print("‚úÖ add_message_to_context() - —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç—É
        stats = await get_chat_stats(123)
        assert 'total_messages' in stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ total_messages"
        print("‚úÖ get_chat_stats() - —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        global_stats = await get_global_stats()
        assert 'total_messages' in global_stats, "–ì–ª–æ–±–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ total_messages"
        print("‚úÖ get_global_stats() - —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤
        active_chats = await get_active_chats()
        assert isinstance(active_chats, list), "Active chats –º–∞—î –±—É—Ç–∏ —Å–ø–∏—Å–∫–æ–º"
        print("‚úÖ get_active_chats() - —É—Å–ø—ñ—à–Ω–æ")
        
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ context_sqlite –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ context_sqlite —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_async_local_analyzer():
    """–¢–µ—Å—Ç async —Ñ—É–Ω–∫—Ü—ñ–π local_analyzer"""
    print("üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è local_analyzer async —Ñ—É–Ω–∫—Ü—ñ–π...")
    
    try:
        from bot.modules.local_analyzer import get_analyzer
        
        analyzer = get_analyzer()
        
        # –¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î
        await analyzer._ensure_db_initialized()
        print("‚úÖ _ensure_db_initialized() - —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∫–µ—à—É–≤–∞–Ω–Ω—è
        test_text = "–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–∞—Å—Ç—Ä–æ—é"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –∫–µ—à—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î
        cached = await analyzer.get_cached_analysis(test_text)
        # –ö–µ—à –º–æ–∂–µ –±—É—Ç–∏ —ñ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–º - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        print("‚úÖ get_cached_analysis() (–ø–æ—Ä–æ–∂–Ω—ñ–π –∫–µ—à) - —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        analysis = await analyzer.analyze_message(test_text, use_cache=False)
        assert isinstance(analysis, dict), "–ê–Ω–∞–ª—ñ–∑ –º–∞—î –±—É—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–º"
        assert 'emotion' in analysis, "–ê–Ω–∞–ª—ñ–∑ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ emotion"
        print("‚úÖ analyze_message() - —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à
        await analyzer.cache_analysis(test_text, analysis)
        print("‚úÖ cache_analysis() - —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ–ø–µ—Ä –∫–µ—à –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cached = await analyzer.get_cached_analysis(test_text)
        assert cached is not None, "–ö–µ—à –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        assert cached['emotion'] == analysis['emotion'], "–ö–µ—à–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—î —Å–ø—ñ–≤–ø–∞–¥–∞—Ç–∏"
        print("‚úÖ get_cached_analysis() (–∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –∫–µ—à) - —É—Å–ø—ñ—à–Ω–æ")
        
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ local_analyzer –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ local_analyzer —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_async_integration():
    """–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç async –≤–∑–∞—î–º–æ–¥—ñ—ó –º–æ–¥—É–ª—ñ–≤"""
    print("üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó async –º–æ–¥—É–ª—ñ–≤...")
    
    try:
        from bot.modules.context_sqlite import save_message, get_context
        from bot.modules.local_analyzer import get_analyzer
        
        # –ú–æ–∫–∞—î–º–æ Message
        class MockMessage:
            def __init__(self, text: str, chat_id: int = 456):
                self.text = text
                self.chat = type('Chat', (), {'id': chat_id})()
                self.from_user = type('User', (), {
                    'id': 888, 
                    'full_name': 'Integration Test User'
                })()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        test_msg = MockMessage("–Ø –¥—É–∂–µ —Ä–∞–¥–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ! üòä", 456)
        await save_message(test_msg)
        print("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - —É—Å–ø—ñ—à–Ω–æ")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = await get_context(456, limit=5)
        assert len(context) >= 1, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        print("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É - —É—Å–ø—ñ—à–Ω–æ")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        analyzer = get_analyzer()
        analysis = await analyzer.analyze_message(test_msg.text)
        assert analysis['emotion'] in ['—Ä–∞–¥—ñ—Å—Ç—å', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π'], f"–û—á—ñ–∫—É–≤–∞–Ω–∞ —Ä–∞–¥—ñ—Å—Ç—å –∞–±–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π, –æ—Ç—Ä–∏–º–∞–Ω–æ: {analysis['emotion']}"
        print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –Ω–∞—Å—Ç—Ä–æ—é - —É—Å–ø—ñ—à–Ω–æ")
        
        print("üéâ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–æ–º—É —Ç–µ—Å—Ç—ñ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ async —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Å—Ç—ñ–≤")
    print("=" * 50)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    import logging
    logging.basicConfig(level=logging.WARNING)  # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    results.append(await test_async_context_sqlite())
    results.append(await test_async_local_analyzer())
    results.append(await test_async_integration())
    
    print("=" * 50)
    
    # –ü—ñ–¥—Å—É–º–∫–∏
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print(f"üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ! ({passed}/{total})")
        print("‚úÖ Async —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!")
        return 0
    else:
        print(f"‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ: {passed}/{total}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
