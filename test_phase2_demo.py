#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω—å –§–∞–∑–∏ 2: –ë–µ–∑–ø–µ–∫–∞ —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
"""
import sys
import os
import asyncio
import tempfile
from datetime import datetime
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(__file__))

def print_header(title: str):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print(f"\n{'='*50}")
    print(f"üéØ {title}")
    print('='*50)

def print_result(test_name: str, success: bool, details: str = ""):
    """–í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É"""
    status = "‚úÖ" if success else "‚ùå"
    print(f"{status} {test_name}")
    if details:
        print(f"   {details}")

def test_security_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–ø–µ–∫–∏"""
    print_header("–¢–ï–°–¢ –ú–ï–ù–ï–î–ñ–ï–†–ê –ë–ï–ó–ü–ï–ö–ò")
    
    try:
        from bot.modules.security_manager import SecurityManager
        
        security = SecurityManager()
        print_result("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è SecurityManager", True)
        
        # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        is_safe, reason = security.validate_message("–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?", 123)
        print_result("–í–∞–ª—ñ–¥–∞—Ü—ñ—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", is_safe, reason)
        
        # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        is_safe, reason = security.validate_message("<script>alert('hack')</script>", 123)
        print_result("–í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", not is_safe, reason)
        
        # –¢–µ—Å—Ç rate limiting
        for i in range(5):
            allowed = security.rate_limit_check(456, "message")
        # –û—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—î –±—É—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
        allowed = security.rate_limit_check(456, "message")
        print_result("Rate limiting", not allowed, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
        
        # –¢–µ—Å—Ç —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—ó
        clean_text = security.sanitize_input("Test <b>bold</b> text")
        print_result("–°–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É", len(clean_text) > 0, f"'{clean_text}'")
        
        return True
        
    except Exception as e:
        print_result("SecurityManager", False, str(e))
        return False

def test_automated_testing():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print_header("–¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ó–û–í–ê–ù–û–ì–û –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    
    try:
        from bot.modules.automated_testing import AutomatedTester
        
        tester = AutomatedTester()
        print_result("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è AutomatedTester", True)
        
        # –¢–µ—Å—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–¥—É–ª—ñ–≤ (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
        modules_checked = 0
        test_modules = [
            'bot.modules.context_adapter',
            'bot.modules.gemini_cache',
            'bot.modules.security_manager'
        ]
        
        for module_name in test_modules:
            try:
                __import__(module_name)
                modules_checked += 1
            except ImportError:
                pass
                
        print_result("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤ –º–æ–¥—É–ª—ñ–≤", modules_checked > 0, 
                    f"–ó–Ω–∞–π–¥–µ–Ω–æ {modules_checked} –º–æ–¥—É–ª—ñ–≤")
        
        # –¢–µ—Å—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
        config_ok = os.path.exists("bot/bot_config.py")
        print_result("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó", config_ok)
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É
        report = {
            'timestamp': datetime.now().isoformat(),
            'modules_checked': modules_checked,
            'config_ok': config_ok
        }
        print_result("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É", isinstance(report, dict),
                    f"–ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ")
        
        return True
        
    except Exception as e:
        print_result("AutomatedTester", False, str(e))
        return False

async def test_advanced_backup():
    """–¢–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ backup –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print_header("–¢–ï–°–¢ –ü–û–ö–†–ê–©–ï–ù–û–ì–û BACKUP")
    
    try:
        from bot.modules.advanced_backup import AdvancedBackupManager
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
        with tempfile.TemporaryDirectory() as temp_dir:
            backup_manager = AdvancedBackupManager(temp_dir)
            print_result("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è AdvancedBackupManager", True)
            
            # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è backup
            backup_file = await backup_manager.create_backup("test")
            backup_created = backup_file is not None and os.path.exists(backup_file)
            print_result("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup", backup_created, 
                        f"–§–∞–π–ª: {os.path.basename(backup_file) if backup_file else '–ù–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ'}")
            
            # –¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó backup (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
            if backup_file:
                is_valid = await backup_manager._verify_backup(Path(backup_file))
                print_result("–í–∞–ª—ñ–¥–∞—Ü—ñ—è backup", is_valid)
            
            # –¢–µ—Å—Ç —Å–ø–∏—Å–∫—É backup-—ñ–≤
            backups = await backup_manager.list_backups()
            print_result("–°–ø–∏—Å–æ–∫ backup-—ñ–≤", len(backups) > 0,
                        f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(backups)} backup-—ñ–≤")
            
            # –¢–µ—Å—Ç –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö backup-—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –º–µ—Ç–æ–¥)
            await backup_manager._cleanup_old_backups()
            print_result("–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö backup-—ñ–≤", True,
                        f"–û—á–∏—â–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ")
        
        return True
        
    except Exception as e:
        print_result("AdvancedBackupManager", False, str(e))
        return False

def test_ci_cd_integration():
    """–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó CI/CD"""
    print_header("–¢–ï–°–¢ CI/CD –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ CI/CD —Ñ–∞–π–ª—ñ–≤
        ci_files = [
            ".github/workflows/ci.yml",
            "pyproject.toml",
            "requirements-dev.txt"
        ]
        
        ci_setup = 0
        for file_path in ci_files:
            exists = os.path.exists(file_path)
            print_result(f"–§–∞–π–ª {file_path}", exists)
            if exists:
                ci_setup += 1
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ pre-commit hooks
        precommit_exists = os.path.exists(".pre-commit-config.yaml")
        print_result("Pre-commit hooks", precommit_exists)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó linting
        lint_configs = [
            "pyproject.toml",
            ".flake8", 
            "mypy.ini"
        ]
        
        lint_setup = sum(1 for config in lint_configs if os.path.exists(config))
        print_result("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è linting", lint_setup > 0,
                    f"{lint_setup}/{len(lint_configs)} —Ñ–∞–π–ª—ñ–≤")
        
        return ci_setup >= 2
        
    except Exception as e:
        print_result("CI/CD Integration", False, str(e))
        return False

def test_security_hardening():
    """–¢–µ—Å—Ç –∑–∞–≥–∞—Ä—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏"""
    print_header("–¢–ï–°–¢ –ó–ê–ì–ê–†–¢–£–í–ê–ù–ù–Ø –ë–ï–ó–ü–ï–ö–ò")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É –≤ .gitignore
        gitignore_safe = False
        if os.path.exists(".gitignore"):
            with open(".gitignore", 'r') as f:
                content = f.read()
                gitignore_safe = ".env" in content
        
        print_result("ENV —Ñ–∞–π–ª–∏ –≤ .gitignore", gitignore_safe)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ .env.sample
        env_sample_exists = os.path.exists(".env.sample")
        print_result("–ó—Ä–∞–∑–æ–∫ .env —Ñ–∞–π–ª—É", env_sample_exists)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Docker security
        docker_secure = False
        if os.path.exists("Dockerfile"):
            try:
                with open("Dockerfile", 'r', encoding='utf-8') as f:
                    content = f.read()
            except UnicodeDecodeError:
                with open("Dockerfile", 'r', encoding='latin-1') as f:
                    content = f.read()
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ non-root user —Ç–∞ —ñ–Ω—à—ñ security –ø—Ä–∞–∫—Ç–∏–∫–∏
            docker_secure = "USER" in content and "adduser" in content
        
        print_result("Docker security", docker_secure)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–º–µ–∂–µ–Ω—å —Ä–µ—Å—É—Ä—Å—ñ–≤ –≤ docker-compose
        compose_limits = False
        if os.path.exists("docker-compose.yml"):
            try:
                with open("docker-compose.yml", 'r', encoding='utf-8') as f:
                    content = f.read()
            except UnicodeDecodeError:
                with open("docker-compose.yml", 'r', encoding='latin-1') as f:
                    content = f.read()
            compose_limits = "resources:" in content or "limits:" in content
        
        print_result("Docker resource limits", compose_limits)
        
        return gitignore_safe and docker_secure
        
    except Exception as e:
        print_result("Security Hardening", False, str(e))
        return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –§–∞–∑–∏ 2"""
    print("üîê –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –ü–û–ö–†–ê–©–ï–ù–¨ –§–ê–ó–ò 2: –ë–ï–ó–ü–ï–ö–ê –¢–ê –°–¢–ê–ë–Ü–õ–¨–ù–Ü–°–¢–¨")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    results = []
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ç–µ—Å—Ç–∏
    results.append(("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–ø–µ–∫–∏", test_security_manager()))
    results.append(("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è", test_automated_testing()))
    results.append(("CI/CD —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è", test_ci_cd_integration()))
    results.append(("–ó–∞–≥–∞—Ä—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏", test_security_hardening()))
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ç–µ—Å—Ç
    try:
        backup_result = await asyncio.wait_for(test_advanced_backup(), timeout=15.0)
        results.append(("–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π backup", backup_result))
    except asyncio.TimeoutError:
        results.append(("–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π backup", False))
        print("‚ùå –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π backup: –¢–∞–π–º-–∞—É—Ç (> 15 —Å–µ–∫)")
    except Exception as e:
        results.append(("–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π backup", False))
        print(f"‚ùå –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π backup: {e}")
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print_header("–ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–ê–ó–ò 2")
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total:.1%})")
    
    if passed == total:
        print("üéâ –í—Å—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –§–∞–∑–∏ 2 –ø—Ä–∞—Ü—é—é—Ç—å —á—É–¥–æ–≤–æ!")
        print("üöÄ –ì–æ—Ç–æ–≤–æ –¥–æ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –§–∞–∑—É 3!")
    elif passed >= total * 0.7:
        print("üëç –ë—ñ–ª—å—à—ñ—Å—Ç—å –ø–æ–∫—Ä–∞—â–µ–Ω—å –ø—Ä–∞—Ü—é—î, —î –∫—ñ–ª—å–∫–∞ –ø—Ä–æ–±–ª–µ–º –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è.")
    else:
        print("‚ö†Ô∏è  –ë–∞–≥–∞—Ç–æ –ø—Ä–æ–±–ª–µ–º –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —É–≤–∞–≥–∏.")
    
    print(f"\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print("   1. –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –º–æ–¥—É–ª—ñ")
    print("   2. –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ security –≤ main.py")
    print("   3. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ CI/CD pipeline")
    print("   4. –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –§–∞–∑–∏ 3: UX –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
    
    # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    return passed == total

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
