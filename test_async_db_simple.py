#!/usr/bin/env python3
# –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î –±–µ–∑ connection pool

import asyncio
import os
import sys
import tempfile
import aiosqlite
from pathlib import Path

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—ñ–≤ –±–æ—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'bot'))

async def test_simple_async_db():
    """–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î"""
    
    print("üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—ó –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –ë–î
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
        db_path = tmp.name
    
    try:
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
        conn = await aiosqlite.connect(db_path)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS test_messages (
                id INTEGER PRIMARY KEY,
                chat_id INTEGER,
                message_text TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        await conn.execute(
            "INSERT INTO test_messages (chat_id, message_text) VALUES (?, ?)",
            (123, "–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        )
        await conn.commit()
        
        # –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        async with conn.execute("SELECT * FROM test_messages") as cursor:
            rows = await cursor.fetchall()
            
        print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —Ç–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {len(rows)} –∑–∞–ø–∏—Å—ñ–≤")
        
        await conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False
        
    finally:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –ë–î
        if os.path.exists(db_path):
            os.unlink(db_path)

async def test_context_async_import():
    """–¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—è context_async"""
    
    print("üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É context_async...")
    
    try:
        from bot.modules import context_async
        print("‚úÖ –ú–æ–¥—É–ª—å context_async —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        functions = [
            'init_database',
            'add_message_to_context', 
            'get_recent_messages',
            'get_context_summary',
            'get_database_stats'
        ]
        
        for func_name in functions:
            if hasattr(context_async, func_name):
                print(f"‚úÖ –§—É–Ω–∫—Ü—ñ—è {func_name} –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                print(f"‚ùå –§—É–Ω–∫—Ü—ñ—è {func_name} –≤—ñ–¥—Å—É—Ç–Ω—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    
    print("üöÄ –ü–†–û–°–¢–ò–ô –¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–û–á –ë–î")
    print("=" * 50)
    
    tests = [
        ("–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç aiosqlite", test_simple_async_db),
        ("–Ü–º–ø–æ—Ä—Ç context_async", test_context_async_import),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüéØ {test_name}")
        print("-" * 30)
        
        try:
            result = await test_func()
            if result:
                passed += 1
                print(f"‚úÖ {test_name} –ø—Ä–æ–π–¥–µ–Ω–æ")
            else:
                print(f"‚ùå {test_name} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå {test_name} –ø–æ–º–∏–ª–∫–∞: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        return False

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
