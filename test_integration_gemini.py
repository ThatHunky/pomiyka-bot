#!/usr/bin/env python3
"""
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ Gemini API –º–æ–¥—É–ª—è.
–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ –±–æ—Ç –ø—Ä–∞—Ü—é—î –∑ –Ω–æ–≤–∏–º Gemini enhanced –º–æ–¥—É–ª–µ–º.
"""

import pytest
import sys
import os
from unittest.mock import AsyncMock, patch

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—ñ–≤ –±–æ—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "bot"))

@pytest.mark.asyncio 
async def test_gemini_integration():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ Gemini –º–æ–¥—É–ª—è –∑ –±–æ—Ç–æ–º."""
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—ñ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É
    from bot.modules import gemini
    from bot.modules.utils import FakeMessage
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    test_message = FakeMessage(
        text="–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?",
        chat_id=12345,
        user_name="–¢–µ—Å—Ç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    )
    
    # –ú–æ–∫–∞—î–º–æ HTTP –∑–∞–ø–∏—Ç –¥–æ Gemini API
    mock_response = {
        "candidates": [{
            "content": {
                "parts": [{"text": "–ü—Ä–∏–≤—ñ—Ç! –£ –º–µ–Ω–µ –≤—Å–µ –¥–æ–±—Ä–µ, –¥—è–∫—É—é! –Ø–∫ —É —Ç–µ–±–µ —Å–ø—Ä–∞–≤–∏?"}],
                "role": "model"
            },
            "finishReason": "STOP"
        }],
        "usageMetadata": {
            "promptTokenCount": 10,
            "candidatesTokenCount": 15,
            "totalTokenCount": 25
        }
    }
    
    with patch('aiohttp.ClientSession.post') as mock_post:
        mock_response_obj = AsyncMock()
        mock_response_obj.status = 200
        mock_response_obj.json = AsyncMock(return_value=mock_response)
        mock_post.return_value.__aenter__.return_value = mock_response_obj
        
        # –¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤–∏–π –≤–∏–∫–ª–∏–∫
        response = await gemini.process_message(test_message)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        assert response is not None
        assert isinstance(response, str)
        assert len(response) > 0
        
        print(f"‚úÖ –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response}")


@pytest.mark.asyncio
async def test_gemini_with_tone_instruction():
    """–¢–µ—Å—Ç—É—î Gemini –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é —Ç–æ–Ω—É."""
    
    from bot.modules import gemini
    from bot.modules.utils import FakeMessage
    
    test_message = FakeMessage(
        text="–†–æ–∑–∫–∞–∂–∏ –∂–∞—Ä—Ç",
        chat_id=12345,
        user_name="–¢–µ—Å—Ç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    )
    
    tone_instruction = "–ë—É–¥—å –¥—É–∂–µ –≤–µ—Å–µ–ª–∏–º —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –±–∞–≥–∞—Ç–æ –µ–º–æ–¥–∑—ñ"
    
    # –ú–æ–∫–∞—î–º–æ HTTP –∑–∞–ø–∏—Ç
    mock_response = {
        "candidates": [{
            "content": {
                "parts": [{"text": "–û—Å—å –≤–µ—Å–µ–ª–∏–π –∂–∞—Ä—Ç! üòÑ –ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞–≤–∂–¥–∏ –ø–ª—É—Ç–∞—î –†—ñ–∑–¥–≤–æ —Ç–∞ –•–µ–ª–ª–æ–≤—ñ–Ω? üéÉüéÑ –¢–æ–º—É —â–æ OCT 31 == DEC 25! üòÇ"}],
                "role": "model"
            },
            "finishReason": "STOP"
        }],
        "usageMetadata": {
            "promptTokenCount": 20,
            "candidatesTokenCount": 30,
            "totalTokenCount": 50
        }
    }
    
    with patch('aiohttp.ClientSession.post') as mock_post:
        mock_response_obj = AsyncMock()
        mock_response_obj.status = 200
        mock_response_obj.json = AsyncMock(return_value=mock_response)
        mock_post.return_value.__aenter__.return_value = mock_response_obj
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑ —Ç–æ–Ω–æ–º
        response = await gemini.process_message(test_message, tone_instruction)
        
        assert response is not None
        assert isinstance(response, str)
        assert len(response) > 0
        
        print(f"‚úÖ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —Ç–æ–Ω–æ–º –ø—Ä–∞—Ü—é—î. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response}")


@pytest.mark.asyncio
async def test_gemini_stats():
    """–¢–µ—Å—Ç—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Gemini API."""
    
    from bot.modules import gemini
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await gemini.get_gemini_stats()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    assert isinstance(stats, dict)
    assert 'total_requests' in stats
    assert 'successful_requests' in stats
    assert 'total_tokens' in stats
    assert 'cache_hits' in stats
    
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞—Ü—é—î: {stats}")


@pytest.mark.asyncio
async def test_gemini_shutdown():
    """–¢–µ—Å—Ç—É—î –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ Gemini –º–æ–¥—É–ª—è."""
    
    from bot.modules import gemini
    
    # –¢–µ—Å—Ç—É—î–º–æ shutdown (–º–∞—î –ø—Ä–æ–π—Ç–∏ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫)
    await gemini.shutdown_gemini()
    
    print("‚úÖ Shutdown –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")


if __name__ == "__main__":
    pytest.main([__file__])
