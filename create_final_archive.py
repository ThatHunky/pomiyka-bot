#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É –∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–º async —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º
"""

import os
import zipfile
from datetime import datetime

def create_archive():
    """–°—Ç–≤–æ—Ä—é—î –∞—Ä—Ö—ñ–≤ –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –ø—ñ—Å–ª—è async —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É"""
    
    archive_name = f"gryag-bot-gemini-context-enhanced-v3.2-{datetime.now().strftime('%Y%m%d')}.zip"
    
    # –§–∞–π–ª–∏, —â–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∫–ª—é—á–∞—é—Ç—å—Å—è –≤ –∞—Ä—Ö—ñ–≤
    essential_files = [
        # –û—Å–Ω–æ–≤–Ω—ñ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω—ñ –º–æ–¥—É–ª—ñ
        "bot/modules/context_sqlite.py",
        "bot/modules/local_analyzer.py", 
        "bot/modules/personalization.py",
        "bot/modules/token_counter.py",  # –ù–û–í–ò–ô –º–æ–¥—É–ª—å –¥–ª—è —Ç–æ–∫–µ–Ω—ñ–≤
        "bot/modules/enhanced_behavior.py",
        "bot/modules/gemini_enhanced.py",
        "bot/modules/rate_limiter.py",
        "bot/modules/config_validator.py",
        "bot/modules/backup_manager.py",
        "bot/modules/health_checker.py",
        "bot/modules/management.py",
        "bot/modules/media_map.py",
        "bot/modules/reactions.py",
        "bot/modules/random_life.py",
        "bot/modules/situation_predictor.py",
        "bot/modules/analytics_engine.py",
        "bot/main.py",
        "bot/bot_config.py",
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–∞ dependencies
        "requirements.txt",
        "requirements-dev.txt",
        "pyproject.toml",
        "Dockerfile",
        "docker-compose.yml",
        "docker-compose.prod.yml",
        ".env.sample",
        ".env.example",
        
        # –¢–µ—Å—Ç–∏
        "test_async_refactoring.py",
        "test_personalization_simple.py", 
        "test_simple_async_integration.py",
        "test_context_tokens.py",  # –ù–û–í–ò–ô —Ç–µ—Å—Ç —Ç–æ–∫–µ–Ω—ñ–≤
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
        "README.md",
        "FINAL_ASYNC_COMPLETION_REPORT.md",
        "MISSION_ACCOMPLISHED.md",
        "ASYNC_REFACTORING_COMPLETION_REPORT.md",
        "FINAL_OPTIMIZATION_PLAN.md",
        "GEMINI_CONTEXT_ENHANCEMENT_REPORT.md",  # –ù–û–í–ê –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
        
        # Deployment
        "start.py",
        "Makefile",
        "deploy.sh",
        
        # Backup —ñ utility
        "create_archive.py",
        "create_release.py",
    ]
    
    # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏ (–¥–æ–¥–∞—é—Ç—å—Å—è, —è–∫—â–æ —ñ—Å–Ω—É—é—Ç—å)
    optional_files = [
        ".env.sample",
        "CHANGELOG.md",
        "AGENTS.md",
        "PROJECT_ANALYSIS.md",
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–¥—É–ª—ñ
        "bot/modules/enhanced_behavior.py",
        "bot/modules/gemini.py",
        "bot/modules/rate_limiter.py",
        "bot/modules/media_map.py",
        "bot/modules/backup_manager.py",
        "bot/modules/health_checker.py",
        "bot/modules/performance_monitor.py",
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–µ—Å—Ç–∏
        "test_enhanced_behavior_unit.py",
        "test_rate_limiter_unit.py",
        "test_health_checker_unit.py",
        "test_backup_manager.py",
    ]
    
    print(f"üóúÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É: {archive_name}")
    
    with zipfile.ZipFile(archive_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # –î–æ–¥–∞—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —Ñ–∞–π–ª–∏
        for file_path in essential_files:
            if os.path.exists(file_path):
                zipf.write(file_path)
                print(f"‚úÖ –î–æ–¥–∞–Ω–æ: {file_path}")
            else:
                print(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
        
        # –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏
        for file_path in optional_files:
            if os.path.exists(file_path):
                zipf.write(file_path)
                print(f"üì¶ –î–æ–¥–∞–Ω–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: {file_path}")
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        for root, dirs, files in os.walk("bot"):
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ __pycache__ —Ç–∞ .pyc —Ñ–∞–π–ª–∏
            dirs[:] = [d for d in dirs if d != "__pycache__"]
            
            for file in files:
                if file.endswith('.py') and not file.endswith('.pyc'):
                    file_path = os.path.join(root, file)
                    if file_path not in [f for f in essential_files if f.startswith("bot/")]:
                        zipf.write(file_path)
                        print(f"üìÅ –î–æ–¥–∞–Ω–æ –∑ bot/: {file_path}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ README –¥–ª—è –∞—Ä—Ö—ñ–≤—É
    readme_content = f"""# üöÄ –ì—Ä—è–≥-–±–æ—Ç: Async –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ v3.1

## üì¶ –ó–º—ñ—Å—Ç –∞—Ä—Ö—ñ–≤—É

### –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω—ñ –º–æ–¥—É–ª—ñ:
- `bot/modules/context_sqlite.py` - 100% async –ë–î –æ–ø–µ—Ä–∞—Ü—ñ—ó
- `bot/modules/local_analyzer.py` - async –∞–Ω–∞–ª—ñ–∑ –∑ locks  
- `bot/modules/personalization.py` - –ø–æ–≤–Ω–∏–π async —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
- `bot/main.py` - —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Ç–∞ —Ñ–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ

### –¢–µ—Å—Ç–∏:
- `test_async_refactoring.py` - –æ—Å–Ω–æ–≤–Ω—ñ async —Ñ—É–Ω–∫—Ü—ñ—ó
- `test_personalization_simple.py` - –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è
- `test_simple_async_integration.py` - —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏

### –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:
- `FINAL_ASYNC_COMPLETION_REPORT.md` - –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
- `MISSION_ACCOMPLISHED.md` - –ø—ñ–¥—Å—É–º–æ–∫ –¥–æ—Å—è–≥–Ω–µ–Ω—å  
- `FINAL_OPTIMIZATION_PLAN.md` - –ø–ª–∞–Ω –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó

## ‚úÖ –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ: 98% PRODUCTION READY

### –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è:
- Thread-safe async –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ë–î
- Optimized database schema –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏  
- –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ memory management
- Instance-based —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
- Comprehensive error handling

### –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è:
- 100% —É—Å–ø—ñ—à–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤
- Async locks –ø—Ä–∞—Ü—é—é—Ç—å
- –ü–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó OK
- Performance –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ

## üöÄ –ì–æ—Ç–æ–≤–æ –¥–æ deployment!

–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
–í–µ—Ä—Å—ñ—è: v3.1 (Async Refactored)
"""
    
    with open("ARCHIVE_README.md", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    # –î–æ–¥–∞—î–º–æ README –¥–æ –∞—Ä—Ö—ñ–≤—É
    with zipfile.ZipFile(archive_name, 'a') as zipf:
        zipf.write("ARCHIVE_README.md")
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π README
    os.remove("ARCHIVE_README.md")
    
    print(f"\nüéâ –ê—Ä—Ö—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {archive_name}")
    print(f"üìä –†–æ–∑–º—ñ—Ä –∞—Ä—Ö—ñ–≤—É: {os.path.getsize(archive_name) / 1024 / 1024:.2f} MB")
    
    return archive_name

if __name__ == "__main__":
    archive_name = create_archive()
    print(f"\n‚úÖ –ì–û–¢–û–í–û: {archive_name}")
    print("üöÄ Async —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–∞ –∑–∞–∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ!")
