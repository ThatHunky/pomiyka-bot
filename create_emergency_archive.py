#!/usr/bin/env python3
"""
–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É emergency fix –¥–ª—è –ì—Ä—è–≥-–±–æ—Ç–∞
–í–∫–ª—é—á–∞—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–µ–ø–ª–æ—é
"""
import os
import zipfile
import shutil
from datetime import datetime

def create_emergency_archive():
    """–°—Ç–≤–æ—Ä—é—î –∞—Ä—Ö—ñ–≤ –∑ emergency fix —Ñ–∞–π–ª–∞–º–∏"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    archive_name = f"gryag-bot-emergency-fix-{timestamp}.zip"
    
    print("üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è emergency –∞—Ä—Ö—ñ–≤—É...")
    print("=" * 60)
    
    # –§–∞–π–ª–∏ —â–æ –≤–∫–ª—é—á–∞—î–º–æ –≤ –∞—Ä—Ö—ñ–≤
    files_to_include = [
        # Emergency –æ—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏
        ("bot/main_emergency.py", "bot/main_emergency.py"),
        ("docker-compose.emergency.yml", "docker-compose.emergency.yml"),
        (".env.emergency", ".env.emergency"),
        
        # –û–Ω–æ–≤–ª–µ–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        ("bot/bot_config.py", "bot/bot_config.py"),
        (".env", ".env.example"),  # –Ø–∫ –ø—Ä–∏–∫–ª–∞–¥
        ("docker-compose.yml", "docker-compose.yml"),
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
        ("EMERGENCY_FIX_REPORT.md", "EMERGENCY_FIX_REPORT.md"),
        ("README.md", "README.md"),
        
        # –¢–µ—Å—Ç–∏
        ("test_old_messages_fix.py", "test_old_messages_fix.py"),
        
        # Dockerfile –¥–ª—è –∑–±—ñ—Ä–∫–∏
        ("Dockerfile", "Dockerfile"),
        ("requirements.txt", "requirements.txt"),
        
        # –í–∞–∂–ª–∏–≤—ñ –º–æ–¥—É–ª—ñ (—è–∫—â–æ —î)
        ("bot/modules/gemini_enhanced.py", "bot/modules/gemini_enhanced.py"),
        ("bot/modules/smart_behavior.py", "bot/modules/smart_behavior.py"),
        ("bot/modules/context.py", "bot/modules/context.py"),
        ("bot/modules/reactions.py", "bot/modules/reactions.py"),
        ("bot/modules/management.py", "bot/modules/management.py"),
    ]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä—Ö—ñ–≤
    with zipfile.ZipFile(archive_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
        
        # –î–æ–¥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏
        for source_path, archive_path in files_to_include:
            if os.path.exists(source_path):
                zipf.write(source_path, archive_path)
                print(f"‚úÖ –î–æ–¥–∞–Ω–æ: {source_path} -> {archive_path}")
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ): {source_path}")
        
        # –î–æ–¥–∞—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ bot/modules/ —è–∫—â–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —ñ—Å–Ω—É—î
        if os.path.exists("bot/modules"):
            for root, dirs, files in os.walk("bot/modules"):
                for file in files:
                    if file.endswith('.py'):
                        file_path = os.path.join(root, file)
                        archive_path = file_path.replace("\\", "/")  # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —à–ª—è—Ö–∏
                        if file_path not in [item[0] for item in files_to_include]:
                            zipf.write(file_path, archive_path)
                            print(f"üìÅ –î–æ–¥–∞–Ω–æ –º–æ–¥—É–ª—å: {file_path}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ README –¥–ª—è –∞—Ä—Ö—ñ–≤—É
        readme_content = f"""# üö® EMERGENCY FIX –ê–†–•–Ü–í - –ì—Ä—è–≥-–±–æ—Ç
–°—Ç–≤–æ—Ä–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üöÄ –®–í–ò–î–ö–ò–ô DEPLOY

1. **–†–æ–∑–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö—ñ–≤:**
   ```bash
   unzip {archive_name}
   cd emergency-deploy/
   ```

2. **–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–æ–∫–µ–Ω–∏:**
   ```bash
   cp .env.emergency .env
   # –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env - –¥–æ–¥–∞–π—Ç–µ –≤–∞—à—ñ —Ç–æ–∫–µ–Ω–∏!
   ```

3. **–ó–∞–ø—É—Å—Ç—ñ—Ç—å emergency –≤–µ—Ä—Å—ñ—é:**
   ```bash
   # –ó—É–ø–∏–Ω—ñ—Ç—å —Å—Ç–∞—Ä–∏–π –±–æ—Ç
   docker-compose down
   
   # –ó–∞–ø—É—Å—Ç—ñ—Ç—å –Ω–æ–≤–∏–π
   docker-compose -f docker-compose.emergency.yml up -d
   ```

4. **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏:**
   ```bash
   docker-compose -f docker-compose.emergency.yml logs -f
   ```

## ‚úÖ –©–û –í–ò–ü–†–ê–í–õ–ï–ù–û

- ‚ùå **–ù–ï –ë–£–î–ï** —Å–ø–∞–º—É —Å—Ç–∞—Ä–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
- ‚úÖ **–ë–£–î–ï** —è–∫—ñ—Å–Ω—ñ—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (Gemini 2.5 Flash)
- ‚úÖ **–ë–£–î–ï** –º–µ–Ω—à–µ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–ø—Ä–æ—Ç–∏ —Å–ø–∞–º—É)
- ‚úÖ **–ë–£–î–ï** –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç—É 1488

## üìã –í–ú–Ü–°–¢ –ê–†–•–Ü–í–£

- `bot/main_emergency.py` - –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏
- `docker-compose.emergency.yml` - Docker –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
- `.env.emergency` - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
- `EMERGENCY_FIX_REPORT.md` - –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
- `test_old_messages_fix.py` - —Ç–µ—Å—Ç –ª–æ–≥—ñ–∫–∏ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è

## üÜò –ü–Ü–î–¢–†–ò–ú–ö–ê

–£ —Ä–∞–∑—ñ –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ:
1. –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω—ñ —Ç–æ–∫–µ–Ω–∏ –≤ .env
2. –ß–∏ –∑—É–ø–∏–Ω–µ–Ω–∏–π —Å—Ç–∞—Ä–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
3. –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø–æ—Ä—Ç 1488

---
**Emergency Fix v1.0** | –ì—Ä—è–≥-–±–æ—Ç Project
"""
        
        # –î–æ–¥–∞—î–º–æ README –≤ –∞—Ä—Ö—ñ–≤
        zipf.writestr("README_EMERGENCY.md", readme_content)
        print("üìã –î–æ–¥–∞–Ω–æ: README_EMERGENCY.md")
        
        # –î–æ–¥–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç —à–≤–∏–¥–∫–æ–≥–æ –¥–µ–ø–ª–æ—é
        deploy_script = """#!/bin/bash
# üö® EMERGENCY DEPLOY SCRIPT

echo "üö® EMERGENCY DEPLOY - –ì—Ä—è–≥-–±–æ—Ç"
echo "=============================="

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î .env
if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è –ö–æ–ø—ñ—é—î–º–æ .env.emergency -> .env"
    cp .env.emergency .env
    echo "‚ùó –í–ê–ñ–õ–ò–í–û: –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –≤–∞—à—ñ —Ç–æ–∫–µ–Ω–∏!"
    echo "‚ùó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –∫–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ..."
    read
fi

# –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä–∏–π –±–æ—Ç
echo "üõë –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä–∏–π –±–æ—Ç..."
docker-compose down 2>/dev/null || true

# –ó–∞–ø—É—Å–∫–∞—î–º–æ emergency –≤–µ—Ä—Å—ñ—é
echo "üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ emergency –≤–µ—Ä—Å—ñ—é..."
docker-compose -f docker-compose.emergency.yml up -d

# –ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–≥–∏
echo "üìã –õ–æ–≥–∏ (Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É):"
sleep 2
docker-compose -f docker-compose.emergency.yml logs -f
"""
        
        zipf.writestr("emergency_deploy.sh", deploy_script)
        print("üöÄ –î–æ–¥–∞–Ω–æ: emergency_deploy.sh")
        
        # –î–æ–¥–∞—î–º–æ Windows bat —Ñ–∞–π–ª
        deploy_bat = """@echo off
REM Emergency Deploy Script for Windows

echo üö® EMERGENCY DEPLOY - –ì—Ä—è–≥-–±–æ—Ç
echo ==============================

REM –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î .env
if not exist ".env" (
    echo ‚ö†Ô∏è –ö–æ–ø—ñ—é—î–º–æ .env.emergency -^> .env
    copy .env.emergency .env
    echo ‚ùó –í–ê–ñ–õ–ò–í–û: –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –≤–∞—à—ñ —Ç–æ–∫–µ–Ω–∏!
    echo ‚ùó –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –∫–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ...
    pause
)

REM –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä–∏–π –±–æ—Ç
echo üõë –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä–∏–π –±–æ—Ç...
docker-compose down 2>nul

REM –ó–∞–ø—É—Å–∫–∞—î–º–æ emergency –≤–µ—Ä—Å—ñ—é
echo üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ emergency –≤–µ—Ä—Å—ñ—é...
docker-compose -f docker-compose.emergency.yml up -d

REM –ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–≥–∏
echo üìã –õ–æ–≥–∏ (Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É):
timeout /t 2 >nul
docker-compose -f docker-compose.emergency.yml logs -f
"""
        
        zipf.writestr("emergency_deploy.bat", deploy_bat)
        print("üñ•Ô∏è –î–æ–¥–∞–Ω–æ: emergency_deploy.bat")
    
    print("\nüéâ –ê–†–•–Ü–í –°–¢–í–û–†–ï–ù–û!")
    print("=" * 60)
    print(f"üì¶ –§–∞–π–ª: {archive_name}")
    print(f"üìè –†–æ–∑–º—ñ—Ä: {os.path.getsize(archive_name) / 1024:.1f} KB")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–º—ñ—Å—Ç –∞—Ä—Ö—ñ–≤—É
    with zipfile.ZipFile(archive_name, 'r') as zipf:
        file_count = len(zipf.namelist())
        print(f"üìÅ –§–∞–π–ª—ñ–≤ –≤ –∞—Ä—Ö—ñ–≤—ñ: {file_count}")
        
        print("\nüìã –í–ú–Ü–°–¢ –ê–†–•–Ü–í–£:")
        for file_name in sorted(zipf.namelist()):
            file_info = zipf.getinfo(file_name)
            size_kb = file_info.file_size / 1024
            print(f"   {file_name} ({size_kb:.1f} KB)")
    
    print(f"\nüöÄ –î–õ–Ø –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:")
    print(f"1. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ {archive_name} –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    print(f"2. unzip {archive_name}")
    print(f"3. cd emergency-deploy/")
    print(f"4. ./emergency_deploy.sh (Linux) –∞–±–æ emergency_deploy.bat (Windows)")
    print("=" * 60)
    
    return archive_name

if __name__ == "__main__":
    try:
        archive_name = create_emergency_archive()
        print(f"‚úÖ –£–°–ü–Ü–®–ù–û! –ê—Ä—Ö—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {archive_name}")
    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")
