#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω—å –≤–µ—Ä—Å—ñ—ó 3.0 –¥–ª—è –±–æ—Ç–∞ –ì—Ä—è–≥
"""

import os
import sys

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—ñ–≤ –±–æ—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'bot'))

def test_basic_improvements():
    """–ë–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω—å"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–æ–∫—Ä–∞—â–µ–Ω—å...")
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    try:
        from bot.modules.random_life import RANDOM_REPLIES
        print(f"‚úÖ RANDOM_REPLIES –º—ñ—Å—Ç–∏—Ç—å {len(RANDOM_REPLIES)} –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")
        assert len(RANDOM_REPLIES) >= 25, f"–û—á—ñ–∫—É–≤–∞–ª–æ—Å—å >= 25 –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, –æ—Ç—Ä–∏–º–∞–Ω–æ {len(RANDOM_REPLIES)}"
        print("‚úÖ –¢–µ—Å—Ç —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É RANDOM_REPLIES: {e}")
    
    # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–π –∫–µ—à—É
    try:
        from bot.modules.random_life import add_to_cache, is_similar_to_cached
        print("‚úÖ –§—É–Ω–∫—Ü—ñ—ó –∫–µ—à—É —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ñ—É–Ω–∫—Ü—ñ–π –∫–µ—à—É: {e}")
    
    # –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ analyze_text_sentiment
    try:
        from bot.modules.context_enhanced import analyze_text_sentiment
        result = analyze_text_sentiment("–¶–µ —á—É–¥–æ–≤–∏–π –¥–µ–Ω—å!")
        print(f"‚úÖ analyze_text_sentiment –ø—Ä–∞—Ü—é—î: {result}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ analyze_text_sentiment: {e}")
    
    # –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–π SQLite –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    try:
        from bot.modules.context_sqlite import get_recent_messages, add_message_to_context
        print("‚úÖ –§—É–Ω–∫—Ü—ñ—ó SQLite –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É SQLite —Ñ—É–Ω–∫—Ü—ñ–π: {e}")
    
    # –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ enhanced_behavior
    try:
        from bot.modules.enhanced_behavior import generate_enhanced_response
        print("‚úÖ enhanced_behavior —Ñ—É–Ω–∫—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ enhanced_behavior: {e}")
    
    print("üéâ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ"""
    print("\nüîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ...")
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–π random_life
    try:
        from bot.modules.random_life import should_reply_randomly, TRIGGERS
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≥–µ—Ä—ñ–≤
        assert should_reply_randomly("–ü—Ä–∏–≤—ñ—Ç –ì—Ä—è–≥!"), "–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –∑–≥–∞–¥–∫—É '–ì—Ä—è–≥'"
        assert should_reply_randomly("@gryag_bot —è–∫ —Å–ø—Ä–∞–≤–∏?"), "–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –∑–≥–∞–¥–∫—É '@gryag_bot'"
        print(f"‚úÖ –¢—Ä–∏–≥–µ—Ä–∏ –ø—Ä–∞—Ü—é—é—Ç—å: {TRIGGERS}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∏–≥–µ—Ä—ñ–≤: {e}")
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª—ñ–∑—É –Ω–∞—Å—Ç—Ä–æ—é
    try:
        from bot.modules.context_enhanced import analyze_text_sentiment
        
        positive_result = analyze_text_sentiment("–ß—É–¥–æ–≤–æ! –î—É–∂–µ –¥–æ–±—Ä–µ!")
        negative_result = analyze_text_sentiment("–ü–æ–≥–∞–Ω–æ, –≤—Å–µ –∂–∞—Ö–ª–∏–≤–æ")
        neutral_result = analyze_text_sentiment("–ù–æ—Ä–º–∞–ª—å–Ω–∏–π –¥–µ–Ω—å")
        
        print(f"‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π: {positive_result}")
        print(f"‚úÖ –ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π: {negative_result}")
        print(f"‚úÖ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π: {neutral_result}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –Ω–∞—Å—Ç—Ä–æ—é: {e}")
    
    print("üéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_context_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    print("\nüìù –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
    
    try:
        from bot.modules.context_enhanced import build_context
        
        # –ú–æ–∫—ñ–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç—É
        import unittest.mock
        
        mock_messages = [
            {"full_name": "–û–ª–µ–∫—Å—ñ–π", "text": "–ü—Ä–∏–≤—ñ—Ç –≤—Å—ñ–º!", "timestamp": "2025-06-28T10:00:00"},
            {"full_name": "–ú–∞—Ä—ñ—è", "text": "–Ø–∫ —Å–ø—Ä–∞–≤–∏?", "timestamp": "2025-06-28T10:01:00"},
            {"full_name": "–ì—Ä—è–≥", "text": "–í—ñ—Ç–∞—é! –í—Å–µ –¥–æ–±—Ä–µ!", "timestamp": "2025-06-28T10:02:00"}
        ]
        
        with unittest.mock.patch('bot.modules.context_enhanced.get_recent_messages', return_value=mock_messages):
            result = build_context(12345, 10)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:\n{result}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
            assert "–û–ª–µ–∫—Å—ñ–π: –ü—Ä–∏–≤—ñ—Ç –≤—Å—ñ–º!" in result, "–ù–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –û–ª–µ–∫—Å—ñ—è"
            assert "–ú–∞—Ä—ñ—è: –Ø–∫ —Å–ø—Ä–∞–≤–∏?" in result, "–ù–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ú–∞—Ä—ñ—ó"
            assert "–ì—Ä—è–≥: –í—ñ—Ç–∞—é! –í—Å–µ –¥–æ–±—Ä–µ!" in result, "–ù–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ì—Ä—è–≥–∞"
            
            print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É—î—Ç—å—Å—è –∑ —ñ–º–µ–Ω–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {e}")
    
    print("üéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–∏—Ö —Ç–µ—Å—Ç—ñ–≤ –ø–æ–∫—Ä–∞—â–µ–Ω—å v3.0...\n")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–æ–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    os.environ['TELEGRAM_BOT_TOKEN'] = '1234567890:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
    os.environ['GEMINI_API_KEY'] = 'test_key'
    os.environ['BOT_ADMIN_ID'] = '123456789'
    
    test_basic_improvements()
    test_functionality()
    test_context_formatting()
    
    print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –†–µ–∑—é–º–µ –ø–æ–∫—Ä–∞—â–µ–Ω—å v3.0:")
    print("   ‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–æ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏–π –∑–∞–ø–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")
    print("   ‚úÖ –î–æ–¥–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—é –∑ —ñ–º–µ–Ω–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    print("   ‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–æ –ª–æ–≥—ñ–∫—É —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É")
    print("   ‚úÖ –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–æ —Å–∏—Å—Ç–µ–º—É —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä—ñ–≤")
    print("   ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ Gemini API")
    print("\nüöÄ –ì–æ—Ç–æ–≤–æ –¥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ —Ä–µ–∞–ª—å–Ω–∏—Ö —É–º–æ–≤–∞—Ö!")
