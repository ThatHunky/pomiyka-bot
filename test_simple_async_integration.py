#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç async –º–æ–¥—É–ª—ñ–≤
"""

import asyncio
import os
import tempfile
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_basic_async_functionality():
    """–ë–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç async —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ"""
    
    print("üöÄ –ë–∞–∑–æ–≤–∏–π —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç async –º–æ–¥—É–ª—ñ–≤...")
    
    try:
        # 1. –¢–µ—Å—Ç context_sqlite
        print("üìã 1. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è context_sqlite...")
        from bot.modules.context_sqlite import init_db
        await init_db()
        print("‚úÖ context_sqlite —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        # 2. –¢–µ—Å—Ç local_analyzer  
        print("üìã 2. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è local_analyzer...")
        from bot.modules.local_analyzer import get_analyzer
        analyzer = get_analyzer()
        
        # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ
        assert analyzer is not None, "Analyzer –º–∞—î –±—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π"
        print("‚úÖ local_analyzer –ø—Ä–∞—Ü—é—î")
        
        # 3. –¢–µ—Å—Ç personalization
        print("üìã 3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è personalization...")
        
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_file:
            personal_db_path = tmp_file.name
        
        try:
            from bot.modules.personalization import create_personalization_manager
            personal_manager = await create_personalization_manager(personal_db_path)
            
            health = personal_manager.get_health_status()
            assert health['status'] == 'healthy', "PersonalizationManager –º–∞—î –±—É—Ç–∏ –∑–¥–æ—Ä–æ–≤–∏–º"
            print("‚úÖ personalization –ø—Ä–∞—Ü—é—î async")
            
        finally:
            try:
                os.unlink(personal_db_path)
            except:
                pass
        
        # 4. –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        print("üìã 4. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...")
        
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp1, \
             tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp2:
            
            try:
                # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
                tasks = [
                    create_personalization_manager(tmp1.name),
                    create_personalization_manager(tmp2.name)
                ]
                
                managers = await asyncio.gather(*tasks, return_exceptions=True)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                success_count = 0
                for manager in managers:
                    if not isinstance(manager, Exception):
                        success_count += 1
                
                assert success_count == 2, f"–û—á—ñ–∫—É–≤–∞–ª–∏ 2 —É—Å–ø—ñ—à–Ω—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó, –æ—Ç—Ä–∏–º–∞–ª–∏ {success_count}"
                print("‚úÖ –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î")
                
            finally:
                try:
                    os.unlink(tmp1.name)
                    os.unlink(tmp2.name)
                except:
                    pass
        
        print("\nüéâ –í—Å—ñ –±–∞–∑–æ–≤—ñ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_async_locks():
    """–¢–µ—Å—Ç async locks (thread safety)"""
    print("\nüîí –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è async locks...")
    
    try:
        from bot.modules.personalization import create_personalization_manager
        
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_file:
            db_path = tmp_file.name
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–ª—å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤, —â–æ –ø—Ä–∞—Ü—é—é—Ç—å –∑ –æ–¥–Ω—ñ—î—é –ë–î
            manager1 = await create_personalization_manager(db_path)
            manager2 = await create_personalization_manager(db_path)
            
            # –ü–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ —Ç—ñ—î—é —Å–∞–º–æ—é –ë–î
            tasks = []
            for i in range(5):
                tasks.append(manager1.process_user_message(1000+i, f"user_{i}", f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {i}"))
                tasks.append(manager2.process_user_message(2000+i, f"user2_{i}", f"–¢–µ–∫—Å—Ç {i}"))
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –ø–æ–º–∏–ª–∫–∏
            errors = [r for r in results if isinstance(r, Exception)]
            if errors:
                print(f"‚ö†Ô∏è {len(errors)} –ø–æ–º–∏–ª–æ–∫ —É async locks —Ç–µ—Å—Ç—ñ")
                for error in errors[:2]:
                    print(f"   - {error}")
                return False
            
            print("‚úÖ Async locks –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return True
            
        finally:
            try:
                os.unlink(db_path)
            except:
                pass
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è async locks: {e}")
        return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üî• –ü–†–û–°–¢–ò–ô –Ü–ù–¢–ï–ì–†–ê–¶–Ü–ô–ù–ò–ô –¢–ï–°–¢ ASYNC –ú–û–î–£–õ–Ü–í")
    print("=" * 50)
    
    # –ë–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç
    basic_success = await test_basic_async_functionality()
    
    # –¢–µ—Å—Ç locks
    locks_success = await test_async_locks()
    
    print("\n" + "=" * 50)
    if basic_success and locks_success:
        print("üèÜ –£–°–ü–Ü–•: Async –º–æ–¥—É–ª—ñ –ø—Ä–∞—Ü—é—é—Ç—å —Ä–∞–∑–æ–º!")
        print("üìä –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å: 100%")
        print("üöÄ –°—Ç–∞—Ç—É—Å: READY FOR INTEGRATION")
        return 0
    elif basic_success:
        print("‚ö†Ô∏è –ß–ê–°–¢–ö–û–í–ò–ô –£–°–ü–Ü–•: –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å")
        return 0
    else:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –í–∏—è–≤–ª–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏!")
        return 1

if __name__ == "__main__":
    import sys
    sys.exit(asyncio.run(main()))
