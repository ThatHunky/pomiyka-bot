#!/usr/bin/env python3
"""
Startup script –¥–ª—è –ì—Ä—è–≥-–±–æ—Ç–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏ –§–∞–∑–∏ 1
"""
import sys
import os
import asyncio
import logging
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ—î–∫—Ç—É
sys.path.insert(0, os.path.dirname(__file__))

print("üöÄ –ì—Ä—è–≥-–±–æ—Ç v3.0 - –ó–∞–ø—É—Å–∫ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏...")
print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ .env
if not os.path.exists('.env'):
    print("‚ùå –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    print("üìã –°–∫–æ–ø—ñ—é–π—Ç–µ .env.sample —è–∫ .env —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ç–æ–∫–µ–Ω–∏:")
    print("   cp .env.sample .env")
    # –ì–µ–Ω–µ—Ä—É—î–º–æ .env.sample –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    try:
        from bot.modules.config_validator import ConfigValidator
        ConfigValidator().generate_env_sample()
        print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ .env.sample")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ .env.sample: {e}")
    sys.exit(1)

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
try:
    import aiogram
    import aiohttp
    import aiosqlite
    from dotenv import load_dotenv
    load_dotenv()
except ImportError as e:
    print(f"‚ùå –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {e}")
    print("üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
    print("   pip install -r requirements.txt")
    sys.exit(1)

# üîß –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (–§–∞–∑–∞ 1)
print("üîß –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
try:
    from bot.modules.config_validator import ConfigValidator
    validator = ConfigValidator()
    if not validator.validate_all():
        print("‚ùå –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏!")
        sys.exit(1)
    print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞")
except Exception as e:
    print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")

# üìä –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–§–∞–∑–∞ 1)
print("üìä –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
try:
    from bot.modules.performance_monitor import PerformanceMonitor
    monitor = PerformanceMonitor()
    monitor.start_monitoring()
    print("‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π")
except Exception as e:
    print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")

# üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î (–§–∞–∑–∞ 1)
print("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
try:
    from bot.modules.context_async import AsyncContextManager
    async def init_async_db():
        async_db = AsyncContextManager()
        await async_db.initialize()
        return async_db
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    asyncio.run(init_async_db())
    print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ë–î –≥–æ—Ç–æ–≤–∞")
except Exception as e:
    print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –ë–î: {e}")

# üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–µ—à—É Gemini (–§–∞–∑–∞ 1)
print("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–µ—à—É Gemini...")
try:
    from bot.modules.gemini_cache import GeminiCache
    cache = GeminiCache()
    cache.cleanup_expired()
    stats = cache.get_stats()
    print(f"‚úÖ –ö–µ—à –≥–æ—Ç–æ–≤–∏–π (–∑–∞–ø–∏—Å—ñ–≤: {stats['total_entries']})")
except Exception as e:
    print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–µ—à—É: {e}")

# üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π backup –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
print("üíæ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó...")
try:
    from bot.modules.backup_manager import backup_database
    backup_database()
    print("‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ")
except Exception as e:
    print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é: {e}")

# üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
print("üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏...")
try:
    from bot.modules.performance_monitor import PerformanceMonitor
    monitor = PerformanceMonitor()
    health = monitor.health_check()
    if health['status'] == 'healthy':
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞")
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∏ –∑—ñ –∑–¥–æ—Ä–æ–≤'—è–º: {health}")
except Exception as e:
    print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è: {e}")

print("üéØ –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –≥–æ—Ç–æ–≤—ñ! –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        from bot.main import main
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ì—Ä—è–≥ –π–¥–µ —Å–ø–∞—Ç–∏...")
        # Graceful shutdown
        try:
            from bot.modules.performance_monitor import PerformanceMonitor
            monitor = PerformanceMonitor()
            monitor.stop_monitoring()
            print("‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ")
        except:
            pass
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logging.exception("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:")
        sys.exit(1)
